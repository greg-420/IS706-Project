{"zt-exec-1.8.jar": [["org.zeroturnaround.exec.close.StandardProcessCloser", "org.zeroturnaround.exec.close.StandardProcessCloser(org.zeroturnaround.exec.stream.ExecuteStreamHandler)"], ["void", "org.zeroturnaround.exec.close.StandardProcessCloser.close(java.lang.Process)"], ["java.lang.Void", "org.zeroturnaround.exec.close.TimeoutProcessCloser$1.call()"], ["java.lang.Object", "org.zeroturnaround.exec.close.TimeoutProcessCloser$1.call()"], ["org.zeroturnaround.exec.close.TimeoutProcessCloser", "org.zeroturnaround.exec.close.TimeoutProcessCloser(org.zeroturnaround.exec.stream.ExecuteStreamHandler, long, java.util.concurrent.TimeUnit)"], ["void", "org.zeroturnaround.exec.close.TimeoutProcessCloser.close(java.lang.Process)"], ["org.zeroturnaround.exec.InvalidExitValueException", "org.zeroturnaround.exec.InvalidExitValueException(java.lang.String, org.zeroturnaround.exec.ProcessResult)"], ["org.zeroturnaround.exec.InvalidOutputException", "org.zeroturnaround.exec.InvalidOutputException(java.lang.String, org.zeroturnaround.exec.ProcessResult)"], ["org.zeroturnaround.exec.InvalidResultException", "org.zeroturnaround.exec.InvalidResultException(java.lang.String, org.zeroturnaround.exec.ProcessResult)"], ["org.zeroturnaround.exec.ProcessResult", "org.zeroturnaround.exec.InvalidResultException.getResult()"], ["int", "org.zeroturnaround.exec.InvalidResultException.getExitValue()"], ["org.zeroturnaround.exec.ProcessResult", "org.zeroturnaround.exec.InvalidResultException.result()"], ["int", "org.zeroturnaround.exec.InvalidResultException.exitValue()"], ["org.zeroturnaround.exec.listener.CompositeProcessListener", "org.zeroturnaround.exec.listener.CompositeProcessListener()"], ["org.zeroturnaround.exec.listener.CompositeProcessListener", "org.zeroturnaround.exec.listener.CompositeProcessListener(java.util.List<org.zeroturnaround.exec.listener.ProcessListener>)"], ["void", "org.zeroturnaround.exec.listener.CompositeProcessListener.add(org.zeroturnaround.exec.listener.ProcessListener)"], ["void", "org.zeroturnaround.exec.listener.CompositeProcessListener.remove(org.zeroturnaround.exec.listener.ProcessListener)"], ["void", "org.zeroturnaround.exec.listener.CompositeProcessListener.removeAll(java.lang.Class<? extends org.zeroturnaround.exec.listener.ProcessListener>)"], ["void", "org.zeroturnaround.exec.listener.CompositeProcessListener.clear()"], ["org.zeroturnaround.exec.listener.CompositeProcessListener", "org.zeroturnaround.exec.listener.CompositeProcessListener.clone()"], ["void", "org.zeroturnaround.exec.listener.CompositeProcessListener.beforeStart(org.zeroturnaround.exec.ProcessExecutor)"], ["void", "org.zeroturnaround.exec.listener.CompositeProcessListener.afterStart(java.lang.Process, org.zeroturnaround.exec.ProcessExecutor)"], ["void", "org.zeroturnaround.exec.listener.CompositeProcessListener.afterFinish(java.lang.Process, org.zeroturnaround.exec.ProcessResult)"], ["void", "org.zeroturnaround.exec.listener.CompositeProcessListener.afterStop(java.lang.Process)"], ["java.lang.Object", "org.zeroturnaround.exec.listener.CompositeProcessListener.clone()"], ["org.zeroturnaround.exec.listener.DestroyerListenerAdapter", "org.zeroturnaround.exec.listener.DestroyerListenerAdapter(org.zeroturnaround.exec.listener.ProcessDestroyer)"], ["void", "org.zeroturnaround.exec.listener.DestroyerListenerAdapter.afterStart(java.lang.Process, org.zeroturnaround.exec.ProcessExecutor)"], ["void", "org.zeroturnaround.exec.listener.DestroyerListenerAdapter.afterStop(java.lang.Process)"], ["org.zeroturnaround.exec.listener.ProcessListener", "org.zeroturnaround.exec.listener.ProcessListener()"], ["void", "org.zeroturnaround.exec.listener.ProcessListener.beforeStart(org.zeroturnaround.exec.ProcessExecutor)"], ["void", "org.zeroturnaround.exec.listener.ProcessListener.afterStart(java.lang.Process, org.zeroturnaround.exec.ProcessExecutor)"], ["void", "org.zeroturnaround.exec.listener.ProcessListener.afterFinish(java.lang.Process, org.zeroturnaround.exec.ProcessResult)"], ["void", "org.zeroturnaround.exec.listener.ProcessListener.afterStop(java.lang.Process)"], ["org.zeroturnaround.exec.listener.ShutdownHookProcessDestroyer$ProcessDestroyerImpl", "org.zeroturnaround.exec.listener.ShutdownHookProcessDestroyer$ProcessDestroyerImpl(org.zeroturnaround.exec.listener.ShutdownHookProcessDestroyer)"], ["void", "org.zeroturnaround.exec.listener.ShutdownHookProcessDestroyer$ProcessDestroyerImpl.run()"], ["void", "org.zeroturnaround.exec.listener.ShutdownHookProcessDestroyer$ProcessDestroyerImpl.setShouldDestroy(boolean)"], ["org.zeroturnaround.exec.listener.ShutdownHookProcessDestroyer", "org.zeroturnaround.exec.listener.ShutdownHookProcessDestroyer()"], ["boolean", "org.zeroturnaround.exec.listener.ShutdownHookProcessDestroyer.isAddedAsShutdownHook()"], ["boolean", "org.zeroturnaround.exec.listener.ShutdownHookProcessDestroyer.add(java.lang.Process)"], ["boolean", "org.zeroturnaround.exec.listener.ShutdownHookProcessDestroyer.remove(java.lang.Process)"], ["int", "org.zeroturnaround.exec.listener.ShutdownHookProcessDestroyer.size()"], ["void", "org.zeroturnaround.exec.listener.ShutdownHookProcessDestroyer.run()"], ["void", "org.zeroturnaround.exec.MessageLoggers$1.message(org.slf4j.Logger, java.lang.String, java.lang.Object...)"], ["void", "org.zeroturnaround.exec.MessageLoggers$2.message(org.slf4j.Logger, java.lang.String, java.lang.Object...)"], ["void", "org.zeroturnaround.exec.MessageLoggers$3.message(org.slf4j.Logger, java.lang.String, java.lang.Object...)"], ["void", "org.zeroturnaround.exec.MessageLoggers$4.message(org.slf4j.Logger, java.lang.String, java.lang.Object...)"], ["org.zeroturnaround.exec.MessageLogger", "org.zeroturnaround.exec.MessageLoggers.get(org.zeroturnaround.exec.stream.slf4j.Level)"], ["org.zeroturnaround.exec.ProcessAttributes", "org.zeroturnaround.exec.ProcessAttributes(java.util.List<java.lang.String>, java.io.File, java.util.Map<java.lang.String, java.lang.String>, java.util.Set<java.lang.Integer>)"], ["java.io.File", "org.zeroturnaround.exec.ProcessAttributes.getDirectory()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.zeroturnaround.exec.ProcessAttributes.getEnvironment()"], ["java.lang.Thread", "org.zeroturnaround.exec.ProcessExecutor$1.newThread(java.lang.Runnable)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor()"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor(java.util.List<java.lang.String>)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor(java.lang.String...)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor(java.lang.Iterable<java.lang.String>)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.command(java.util.List<java.lang.String>)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.command(java.lang.String...)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.command(java.lang.Iterable<java.lang.String>)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.commandSplit(java.lang.String)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.directory(java.io.File)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.environment(java.util.Map<java.lang.String, java.lang.String>)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.environment(java.lang.String, java.lang.String)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectErrorStream(boolean)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.exitValueAny()"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.exitValueNormal()"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.exitValue(java.lang.Integer)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.exitValues(java.lang.Integer...)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.exitValues(int[])"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.timeout(long, java.util.concurrent.TimeUnit)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.stopper(org.zeroturnaround.exec.stop.ProcessStopper)"], ["org.zeroturnaround.exec.stream.ExecuteStreamHandler", "org.zeroturnaround.exec.ProcessExecutor.streams()"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.streams(org.zeroturnaround.exec.stream.ExecuteStreamHandler)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.closeTimeout(long, java.util.concurrent.TimeUnit)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectInput(java.io.InputStream)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectOutput(java.io.OutputStream)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectError(java.io.OutputStream)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectOutputAlsoTo(java.io.OutputStream)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectErrorAlsoTo(java.io.OutputStream)"], ["org.zeroturnaround.exec.stream.PumpStreamHandler", "org.zeroturnaround.exec.ProcessExecutor.pumps()"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.readOutput(boolean)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.info(org.slf4j.Logger)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.debug(org.slf4j.Logger)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.info(java.lang.String)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.debug(java.lang.String)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.info()"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.debug()"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectOutputAsInfo(org.slf4j.Logger)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectOutputAsDebug(org.slf4j.Logger)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectOutputAsInfo(java.lang.String)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectOutputAsDebug(java.lang.String)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectOutputAsInfo()"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectOutputAsDebug()"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectErrorAsInfo(org.slf4j.Logger)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectErrorAsDebug(org.slf4j.Logger)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectErrorAsInfo(java.lang.String)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectErrorAsDebug(java.lang.String)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectErrorAsInfo()"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.redirectErrorAsDebug()"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.addDestroyer(org.zeroturnaround.exec.listener.ProcessDestroyer)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.destroyer(org.zeroturnaround.exec.listener.ProcessDestroyer)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.destroyOnExit()"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.listener(org.zeroturnaround.exec.listener.ProcessListener)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.addListener(org.zeroturnaround.exec.listener.ProcessListener)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.removeListener(org.zeroturnaround.exec.listener.ProcessListener)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.removeListeners(java.lang.Class<? extends org.zeroturnaround.exec.listener.ProcessListener>)"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.clearListeners()"], ["org.zeroturnaround.exec.ProcessExecutor", "org.zeroturnaround.exec.ProcessExecutor.setMessageLogger(org.zeroturnaround.exec.MessageLogger)"], ["org.zeroturnaround.exec.ProcessResult", "org.zeroturnaround.exec.ProcessExecutor.execute()"], ["org.zeroturnaround.exec.ProcessResult", "org.zeroturnaround.exec.ProcessExecutor.executeNoTimeout()"], ["org.zeroturnaround.exec.StartedProcess", "org.zeroturnaround.exec.ProcessExecutor.start()"], ["org.zeroturnaround.exec.ProcessOutput", "org.zeroturnaround.exec.ProcessOutput(byte[])"], ["byte[]", "org.zeroturnaround.exec.ProcessOutput.getBytes()"], ["java.lang.String", "org.zeroturnaround.exec.ProcessOutput.getString()"], ["java.lang.String", "org.zeroturnaround.exec.ProcessOutput.getUTF8()"], ["java.lang.String", "org.zeroturnaround.exec.ProcessOutput.getString(java.lang.String)"], ["org.zeroturnaround.exec.ProcessResult", "org.zeroturnaround.exec.ProcessResult(int, org.zeroturnaround.exec.ProcessOutput)"], ["int", "org.zeroturnaround.exec.ProcessResult.getExitValue()"], ["int", "org.zeroturnaround.exec.ProcessResult.exitValue()"], ["boolean", "org.zeroturnaround.exec.ProcessResult.hasOutput()"], ["org.zeroturnaround.exec.ProcessOutput", "org.zeroturnaround.exec.ProcessResult.getOutput()"], ["byte[]", "org.zeroturnaround.exec.ProcessResult.output()"], ["java.lang.String", "org.zeroturnaround.exec.ProcessResult.outputString()"], ["java.lang.String", "org.zeroturnaround.exec.ProcessResult.outputUTF8()"], ["java.lang.String", "org.zeroturnaround.exec.ProcessResult.outputString(java.lang.String)"], ["org.zeroturnaround.exec.StartedProcess", "org.zeroturnaround.exec.StartedProcess(java.lang.Process, java.util.concurrent.Future<org.zeroturnaround.exec.ProcessResult>)"], ["java.lang.Process", "org.zeroturnaround.exec.StartedProcess.getProcess()"], ["java.lang.Process", "org.zeroturnaround.exec.StartedProcess.process()"], ["org.zeroturnaround.exec.stop.DestroyProcessStopper", "org.zeroturnaround.exec.stop.DestroyProcessStopper()"], ["void", "org.zeroturnaround.exec.stop.DestroyProcessStopper.stop(java.lang.Process)"], ["org.zeroturnaround.exec.stop.NopProcessStopper", "org.zeroturnaround.exec.stop.NopProcessStopper()"], ["void", "org.zeroturnaround.exec.stop.NopProcessStopper.stop(java.lang.Process)"], ["org.zeroturnaround.exec.stream.CallerLoggerUtil", "org.zeroturnaround.exec.stream.CallerLoggerUtil()"], ["java.lang.String", "org.zeroturnaround.exec.stream.CallerLoggerUtil.getName(java.lang.String)"], ["java.lang.String", "org.zeroturnaround.exec.stream.CallerLoggerUtil.getName(java.lang.String, int)"], ["org.zeroturnaround.exec.stream.InputStreamPumper", "org.zeroturnaround.exec.stream.InputStreamPumper(java.io.InputStream, java.io.OutputStream)"], ["void", "org.zeroturnaround.exec.stream.InputStreamPumper.run()"], ["void", "org.zeroturnaround.exec.stream.InputStreamPumper.stopProcessing()"], ["org.zeroturnaround.exec.stream.LogOutputStream", "org.zeroturnaround.exec.stream.LogOutputStream()"], ["void", "org.zeroturnaround.exec.stream.LogOutputStream.write(int)"], ["void", "org.zeroturnaround.exec.stream.LogOutputStream.flush()"], ["void", "org.zeroturnaround.exec.stream.LogOutputStream.close()"], ["void", "org.zeroturnaround.exec.stream.LogOutputStream.write(byte[], int, int)"], ["org.zeroturnaround.exec.stream.PumpStreamHandler", "org.zeroturnaround.exec.stream.PumpStreamHandler()"], ["org.zeroturnaround.exec.stream.PumpStreamHandler", "org.zeroturnaround.exec.stream.PumpStreamHandler(java.io.OutputStream)"], ["org.zeroturnaround.exec.stream.PumpStreamHandler", "org.zeroturnaround.exec.stream.PumpStreamHandler(java.io.OutputStream, java.io.OutputStream)"], ["org.zeroturnaround.exec.stream.PumpStreamHandler", "org.zeroturnaround.exec.stream.PumpStreamHandler(java.io.OutputStream, java.io.OutputStream, java.io.InputStream)"], ["void", "org.zeroturnaround.exec.stream.PumpStreamHandler.setProcessOutputStream(java.io.InputStream)"], ["void", "org.zeroturnaround.exec.stream.PumpStreamHandler.setProcessErrorStream(java.io.InputStream)"], ["void", "org.zeroturnaround.exec.stream.PumpStreamHandler.setProcessInputStream(java.io.OutputStream)"], ["void", "org.zeroturnaround.exec.stream.PumpStreamHandler.start()"], ["void", "org.zeroturnaround.exec.stream.PumpStreamHandler.stop()"], ["void", "org.zeroturnaround.exec.stream.PumpStreamHandler.flush()"], ["java.io.OutputStream", "org.zeroturnaround.exec.stream.PumpStreamHandler.getOut()"], ["java.io.OutputStream", "org.zeroturnaround.exec.stream.PumpStreamHandler.getErr()"], ["java.io.InputStream", "org.zeroturnaround.exec.stream.PumpStreamHandler.getInput()"], ["org.zeroturnaround.exec.stream.slf4j.Level[]", "org.zeroturnaround.exec.stream.slf4j.Level.values()"], ["org.zeroturnaround.exec.stream.slf4j.Level", "org.zeroturnaround.exec.stream.slf4j.Level.valueOf(java.lang.String)"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jDebugOutputStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jDebugOutputStream(org.slf4j.Logger)"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jErrorOutputStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jErrorOutputStream(org.slf4j.Logger)"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jInfoOutputStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jInfoOutputStream(org.slf4j.Logger)"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jOutputStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jOutputStream(org.slf4j.Logger)"], ["org.slf4j.Logger", "org.zeroturnaround.exec.stream.slf4j.Slf4jOutputStream.getLogger()"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jStream.of(org.slf4j.Logger)"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jStream.of(java.lang.Class<?>)"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jStream.of(java.lang.Class<?>, java.lang.String)"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jStream.of(java.lang.String)"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jStream.ofCaller()"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jOutputStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jStream.as(org.zeroturnaround.exec.stream.slf4j.Level)"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jOutputStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jStream.asTrace()"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jOutputStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jStream.asDebug()"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jOutputStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jStream.asInfo()"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jOutputStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jStream.asWarn()"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jOutputStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jStream.asError()"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jTraceOutputStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jTraceOutputStream(org.slf4j.Logger)"], ["org.zeroturnaround.exec.stream.slf4j.Slf4jWarnOutputStream", "org.zeroturnaround.exec.stream.slf4j.Slf4jWarnOutputStream(org.slf4j.Logger)"], ["org.zeroturnaround.exec.stream.StreamPumper", "org.zeroturnaround.exec.stream.StreamPumper(java.io.InputStream, java.io.OutputStream, boolean)"], ["org.zeroturnaround.exec.stream.StreamPumper", "org.zeroturnaround.exec.stream.StreamPumper(java.io.InputStream, java.io.OutputStream, boolean, int)"], ["org.zeroturnaround.exec.stream.StreamPumper", "org.zeroturnaround.exec.stream.StreamPumper(java.io.InputStream, java.io.OutputStream)"], ["void", "org.zeroturnaround.exec.stream.StreamPumper.run()"], ["synchronized", "org.zeroturnaround.exec.stream.StreamPumper.boolean isFinished()"], ["synchronized", "org.zeroturnaround.exec.stream.StreamPumper.void waitFor()"], ["org.zeroturnaround.exec.WaitForProcess", "org.zeroturnaround.exec.WaitForProcess(java.lang.Process, org.zeroturnaround.exec.ProcessAttributes, org.zeroturnaround.exec.stop.ProcessStopper, org.zeroturnaround.exec.close.ProcessCloser, java.io.ByteArrayOutputStream, org.zeroturnaround.exec.listener.ProcessListener, org.zeroturnaround.exec.MessageLogger)"], ["java.lang.Process", "org.zeroturnaround.exec.WaitForProcess.getProcess()"], ["org.zeroturnaround.exec.ProcessResult", "org.zeroturnaround.exec.WaitForProcess.call()"], ["void", "org.zeroturnaround.exec.WaitForProcess.addExceptionMessageSuffix(java.lang.StringBuilder)"], ["java.lang.StackTraceElement[]", "org.zeroturnaround.exec.WaitForProcess.getStackTrace()"], ["java.lang.String", "org.zeroturnaround.exec.WaitForProcess.toString()"], ["java.lang.Object", "org.zeroturnaround.exec.WaitForProcess.call()"]], "java-gitlab-api-4.0.0.jar": [["org.gitlab.api.GitlabAPIException", "org.gitlab.api.GitlabAPIException(java.lang.String, java.lang.Integer, java.lang.Throwable)"], ["int", "org.gitlab.api.GitlabAPIException.getResponseCode()"], ["org.gitlab.api.models.GitlabProjectHook", "org.gitlab.api.models.GitlabProjectHook()"], ["java.lang.String", "org.gitlab.api.models.GitlabProjectHook.getId()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProjectHook.getUrl()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setUrl(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabProjectHook.getProjectId()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setProjectId(java.lang.Integer)"], ["boolean", "org.gitlab.api.models.GitlabProjectHook.getPushEvents()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setPushEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabProjectHook.getIssueEvents()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setIssueEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabProjectHook.isMergeRequestsEvents()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setMergeRequestsEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabProjectHook.isTagPushEvents()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setTagPushEvents(boolean)"], ["java.util.Date", "org.gitlab.api.models.GitlabProjectHook.getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setCreatedAt(java.util.Date)"], ["boolean", "org.gitlab.api.models.GitlabProjectHook.isSslVerificationEnabled()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setSslVerificationEnabled(boolean)"], ["org.gitlab.api.models.GitlabMergeRequest", "org.gitlab.api.models.GitlabMergeRequest()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequest.getId()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setId(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequest.getMilestoneId()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setMilestoneId(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequest.getIid()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setIid(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getTargetBranch()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setTargetBranch(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getSourceBranch()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setSourceBranch(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequest.getProjectId()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setProjectId(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequest.getSourceProjectId()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setSourceProjectId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getTitle()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setTitle(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getDescription()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setDescription(java.lang.String)"], ["boolean", "org.gitlab.api.models.GitlabMergeRequest.isClosed()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setClosed(boolean)"], ["boolean", "org.gitlab.api.models.GitlabMergeRequest.isMerged()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setMerged(boolean)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabMergeRequest.getAuthor()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setAuthor(org.gitlab.api.models.GitlabUser)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabMergeRequest.getAssignee()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setAssignee(org.gitlab.api.models.GitlabUser)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getState()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setState(java.lang.String)"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.models.GitlabMergeRequest.getMilestone()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setMilestone(org.gitlab.api.models.GitlabMilestone)"], ["java.lang.String[]", "org.gitlab.api.models.GitlabMergeRequest.getLabels()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setLabels(java.lang.String[])"], ["int", "org.gitlab.api.models.GitlabMergeRequest.getUpvotes()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setUpvotes(int)"], ["int", "org.gitlab.api.models.GitlabMergeRequest.getDownvotes()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setDownvotes(int)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequest.getTargetProjectId()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setTargetProjectId(java.lang.Integer)"], ["java.util.Date", "org.gitlab.api.models.GitlabMergeRequest.getUpdatedAt()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setUpdatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabMergeRequest.getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setCreatedAt(java.util.Date)"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setChanges(java.util.List<org.gitlab.api.models.GitlabCommitDiff>)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getMergeCommitSHA()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setMergeCommitSHA(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getMergeStatus()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setMergeStatus(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getWebUrl()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setWebUrl(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getSha()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setSha(java.lang.String)"], ["org.gitlab.api.models.GitlabRelease", "org.gitlab.api.models.GitlabRelease()"], ["java.lang.String", "org.gitlab.api.models.GitlabRelease.getTagName()"], ["void", "org.gitlab.api.models.GitlabRelease.setTagName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRelease.getDescription()"], ["void", "org.gitlab.api.models.GitlabRelease.setDescription(java.lang.String)"], ["org.gitlab.api.models.GitlabLabel", "org.gitlab.api.models.GitlabLabel()"], ["java.lang.String", "org.gitlab.api.models.GitlabLabel.getName()"], ["void", "org.gitlab.api.models.GitlabLabel.setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabLabel.getColor()"], ["void", "org.gitlab.api.models.GitlabLabel.setColor(java.lang.String)"], ["org.gitlab.api.models.GitlabNamespace", "org.gitlab.api.models.GitlabNamespace()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabNamespace.getId()"], ["void", "org.gitlab.api.models.GitlabNamespace.setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabNamespace.getName()"], ["void", "org.gitlab.api.models.GitlabNamespace.setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabNamespace.getPath()"], ["void", "org.gitlab.api.models.GitlabNamespace.setPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabNamespace.getKind()"], ["void", "org.gitlab.api.models.GitlabNamespace.setKind(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabNamespace.getPlan()"], ["void", "org.gitlab.api.models.GitlabNamespace.setPlan(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabNamespace.getFullPath()"], ["void", "org.gitlab.api.models.GitlabNamespace.setFullPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabNamespace.getParentId()"], ["void", "org.gitlab.api.models.GitlabNamespace.setParentId(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabNamespace.getMembersCountWithDescendants()"], ["void", "org.gitlab.api.models.GitlabNamespace.setMembersCountWithDescendants(java.lang.Integer)"], ["boolean", "org.gitlab.api.models.GitlabNamespace.equals(java.lang.Object)"], ["int", "org.gitlab.api.models.GitlabNamespace.hashCode()"], ["org.gitlab.api.models.GitlabRunner", "org.gitlab.api.models.GitlabRunner()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabRunner.getId()"], ["void", "org.gitlab.api.models.GitlabRunner.setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabRunner.getDescription()"], ["void", "org.gitlab.api.models.GitlabRunner.setDescription(java.lang.String)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabRunner.getActive()"], ["void", "org.gitlab.api.models.GitlabRunner.setActive(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabRunner.getShared()"], ["void", "org.gitlab.api.models.GitlabRunner.setShared(java.lang.Boolean)"], ["java.lang.String", "org.gitlab.api.models.GitlabRunner.getName()"], ["void", "org.gitlab.api.models.GitlabRunner.setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRunner.getVersion()"], ["void", "org.gitlab.api.models.GitlabRunner.setVersion(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRunner.getRevision()"], ["void", "org.gitlab.api.models.GitlabRunner.setRevision(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabRunner.getContactedAt()"], ["void", "org.gitlab.api.models.GitlabRunner.setContactedAt(java.util.Date)"], ["void", "org.gitlab.api.models.GitlabRunner.setTagList(java.util.List<java.lang.String>)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabRunner.isRunUntagged()"], ["void", "org.gitlab.api.models.GitlabRunner.setRunUntagged(boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabRunner.isLocked()"], ["void", "org.gitlab.api.models.GitlabRunner.setLocked(boolean)"], ["java.lang.String", "org.gitlab.api.models.GitlabRunner.getPlatform()"], ["void", "org.gitlab.api.models.GitlabRunner.setPlatform(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRunner.getArchitecture()"], ["void", "org.gitlab.api.models.GitlabRunner.setArchitecture(java.lang.String)"], ["org.gitlab.api.models.GitlabNote", "org.gitlab.api.models.GitlabNote()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabNote.getId()"], ["void", "org.gitlab.api.models.GitlabNote.setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabNote.getBody()"], ["void", "org.gitlab.api.models.GitlabNote.setBody(java.lang.String)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabNote.getAuthor()"], ["void", "org.gitlab.api.models.GitlabNote.setAuthor(org.gitlab.api.models.GitlabUser)"], ["java.util.Date", "org.gitlab.api.models.GitlabNote.getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabNote.setCreatedAt(java.util.Date)"], ["java.lang.String", "org.gitlab.api.models.GitlabNote.getAttachment()"], ["void", "org.gitlab.api.models.GitlabNote.setAttachment(java.lang.String)"], ["boolean", "org.gitlab.api.models.GitlabNote.isSystem()"], ["void", "org.gitlab.api.models.GitlabNote.setSystem(boolean)"], ["boolean", "org.gitlab.api.models.GitlabNote.isUpvote()"], ["void", "org.gitlab.api.models.GitlabNote.setUpvote(boolean)"], ["boolean", "org.gitlab.api.models.GitlabNote.isDownvote()"], ["void", "org.gitlab.api.models.GitlabNote.setDownvote(boolean)"], ["org.gitlab.api.models.GitlabCommit", "org.gitlab.api.models.GitlabCommit()"], ["java.lang.String", "org.gitlab.api.models.GitlabCommit.getId()"], ["void", "org.gitlab.api.models.GitlabCommit.setId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommit.getShortId()"], ["void", "org.gitlab.api.models.GitlabCommit.setShortId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommit.getTitle()"], ["void", "org.gitlab.api.models.GitlabCommit.setTitle(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommit.getMessage()"], ["void", "org.gitlab.api.models.GitlabCommit.setMessage(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommit.getAuthorName()"], ["void", "org.gitlab.api.models.GitlabCommit.setAuthorName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommit.getAuthorEmail()"], ["void", "org.gitlab.api.models.GitlabCommit.setAuthorEmail(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabCommit.getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabCommit.setCreatedAt(java.util.Date)"], ["void", "org.gitlab.api.models.GitlabCommit.setParentIds(java.util.List<java.lang.String>)"], ["java.util.Date", "org.gitlab.api.models.GitlabCommit.getCommittedDate()"], ["void", "org.gitlab.api.models.GitlabCommit.setCommittedDate(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabCommit.getAuthoredDate()"], ["void", "org.gitlab.api.models.GitlabCommit.setAuthoredDate(java.util.Date)"], ["boolean", "org.gitlab.api.models.GitlabCommit.equals(java.lang.Object)"], ["int", "org.gitlab.api.models.GitlabCommit.hashCode()"], ["org.gitlab.api.models.GitlabSystemHook", "org.gitlab.api.models.GitlabSystemHook()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabSystemHook.getId()"], ["void", "org.gitlab.api.models.GitlabSystemHook.setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabSystemHook.getUrl()"], ["void", "org.gitlab.api.models.GitlabSystemHook.setUrl(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabSystemHook.getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabSystemHook.setCreatedAt(java.util.Date)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.models.GitlabProject()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabProject.getId()"], ["void", "org.gitlab.api.models.GitlabProject.setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getName()"], ["void", "org.gitlab.api.models.GitlabProject.setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getNameWithNamespace()"], ["void", "org.gitlab.api.models.GitlabProject.setNameWithNamespace(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getDescription()"], ["void", "org.gitlab.api.models.GitlabProject.setDescription(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getDefaultBranch()"], ["void", "org.gitlab.api.models.GitlabProject.setDefaultBranch(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getVisibility()"], ["void", "org.gitlab.api.models.GitlabProject.setVisibility(java.lang.String)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabProject.getOwner()"], ["void", "org.gitlab.api.models.GitlabProject.setOwner(org.gitlab.api.models.GitlabUser)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getPath()"], ["void", "org.gitlab.api.models.GitlabProject.setPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getPathWithNamespace()"], ["void", "org.gitlab.api.models.GitlabProject.setPathWithNamespace(java.lang.String)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isIssuesEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setIssuesEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isMergeRequestsEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setMergeRequestsEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isSnippetsEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setSnippetsEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isWallEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setWallEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isWikiEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setWikiEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isJobsEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setJobsEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isRequestAccessEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setRequestAccessEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isLfsEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setLfsEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isSharedRunnersEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setSharedRunnersEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.getOnlyAllowMergeIfPipelineSucceeds()"], ["void", "org.gitlab.api.models.GitlabProject.setOnlyAllowMergeIfPipelineSucceeds(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.getOnlyAllowMergeIfAllDiscussionsAreResolved()"], ["void", "org.gitlab.api.models.GitlabProject.setOnlyAllowMergeIfAllDiscussionsAreResolved(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isContainerRegistryEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setContainerRegistryEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.hasPublicJobs()"], ["void", "org.gitlab.api.models.GitlabProject.setPublicJobs(java.lang.Boolean)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getRunnersToken()"], ["void", "org.gitlab.api.models.GitlabProject.setRunnersToken(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabProject.getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabProject.setCreatedAt(java.util.Date)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getSshUrl()"], ["void", "org.gitlab.api.models.GitlabProject.setSshUrl(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getWebUrl()"], ["void", "org.gitlab.api.models.GitlabProject.setWebUrl(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getHttpUrl()"], ["void", "org.gitlab.api.models.GitlabProject.setHttpUrl(java.lang.String)"], ["org.gitlab.api.models.GitlabNamespace", "org.gitlab.api.models.GitlabProject.getNamespace()"], ["void", "org.gitlab.api.models.GitlabProject.setNamespace(org.gitlab.api.models.GitlabNamespace)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isPublic()"], ["void", "org.gitlab.api.models.GitlabProject.setPublic(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isArchived()"], ["void", "org.gitlab.api.models.GitlabProject.setArchived(java.lang.Boolean)"], ["java.util.Date", "org.gitlab.api.models.GitlabProject.getLastActivityAt()"], ["void", "org.gitlab.api.models.GitlabProject.setLastActivityAt(java.util.Date)"], ["org.gitlab.api.models.GitlabPermission", "org.gitlab.api.models.GitlabProject.getPermissions()"], ["void", "org.gitlab.api.models.GitlabProject.setPermissions(org.gitlab.api.models.GitlabPermission)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getAvatarUrl()"], ["void", "org.gitlab.api.models.GitlabProject.setAvatarUrl(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabProject.getCreatorId()"], ["void", "org.gitlab.api.models.GitlabProject.setCreatorId(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabProject.getStarCount()"], ["void", "org.gitlab.api.models.GitlabProject.setStarCount(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabProject.getForksCount()"], ["void", "org.gitlab.api.models.GitlabProject.setForksCount(java.lang.Integer)"], ["void", "org.gitlab.api.models.GitlabProject.setTagList(java.util.List<java.lang.String>)"], ["void", "org.gitlab.api.models.GitlabProject.setSharedWithGroups(java.util.List<org.gitlab.api.models.GitlabProjectSharedGroup>)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getRepositoryStorage()"], ["void", "org.gitlab.api.models.GitlabProject.setRepositoryStorage(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabProject.getApprovalsBeforeMerge()"], ["void", "org.gitlab.api.models.GitlabProject.setApprovalsBeforeMerge(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getImportUrl()"], ["void", "org.gitlab.api.models.GitlabProject.setImportUrl(java.lang.String)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.models.GitlabProject.getForkedFrom()"], ["void", "org.gitlab.api.models.GitlabProject.setForkedFrom(org.gitlab.api.models.GitlabProject)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isPrintingMergeRequestLinkEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setPrintingMergeRequestLinkEnabled(java.lang.Boolean)"], ["boolean", "org.gitlab.api.models.GitlabProject.equals(java.lang.Object)"], ["int", "org.gitlab.api.models.GitlabProject.hashCode()"], ["org.gitlab.api.models.GitlabBranch", "org.gitlab.api.models.GitlabBranch()"], ["java.lang.String", "org.gitlab.api.models.GitlabBranch.getName()"], ["void", "org.gitlab.api.models.GitlabBranch.setName(java.lang.String)"], ["org.gitlab.api.models.GitlabBranchCommit", "org.gitlab.api.models.GitlabBranch.getCommit()"], ["void", "org.gitlab.api.models.GitlabBranch.setCommit(org.gitlab.api.models.GitlabBranchCommit)"], ["boolean", "org.gitlab.api.models.GitlabBranch.isProtected()"], ["void", "org.gitlab.api.models.GitlabBranch.setProtected(boolean)"], ["org.gitlab.api.models.GitlabUserIdentity", "org.gitlab.api.models.GitlabUserIdentity()"], ["java.lang.String", "org.gitlab.api.models.GitlabUserIdentity.getProvider()"], ["void", "org.gitlab.api.models.GitlabUserIdentity.setProvider(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUserIdentity.getExternUid()"], ["void", "org.gitlab.api.models.GitlabUserIdentity.setExternUuid(java.lang.String)"], ["org.gitlab.api.models.GitlabIssue$Action[]", "org.gitlab.api.models.GitlabIssue$Action.values()"], ["org.gitlab.api.models.GitlabIssue$Action", "org.gitlab.api.models.GitlabIssue$Action.valueOf(java.lang.String)"], ["org.gitlab.api.models.GitlabRepositoryTree", "org.gitlab.api.models.GitlabRepositoryTree()"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryTree.getName()"], ["void", "org.gitlab.api.models.GitlabRepositoryTree.setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryTree.getType()"], ["void", "org.gitlab.api.models.GitlabRepositoryTree.setType(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryTree.getMode()"], ["void", "org.gitlab.api.models.GitlabRepositoryTree.setMode(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryTree.getId()"], ["void", "org.gitlab.api.models.GitlabRepositoryTree.setId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryTree.getPath()"], ["void", "org.gitlab.api.models.GitlabRepositoryTree.setPath(java.lang.String)"], ["org.gitlab.api.models.GitlabSimpleRepositoryFile", "org.gitlab.api.models.GitlabSimpleRepositoryFile()"], ["java.lang.String", "org.gitlab.api.models.GitlabSimpleRepositoryFile.getFileName()"], ["void", "org.gitlab.api.models.GitlabSimpleRepositoryFile.setFileName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabSimpleRepositoryFile.getBranchName()"], ["void", "org.gitlab.api.models.GitlabSimpleRepositoryFile.setBranchName(java.lang.String)"], ["org.gitlab.api.models.GitlabCommitStatus", "org.gitlab.api.models.GitlabCommitStatus()"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitStatus.getId()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitStatus.getSha()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setSha(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitStatus.getRef()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setRef(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitStatus.getStatus()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setStatus(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitStatus.getName()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitStatus.getDescription()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setDescription(java.lang.String)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabCommitStatus.getAuthor()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setAuthor(org.gitlab.api.models.GitlabUser)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitStatus.getTargetUrl()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setTargetUrl(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabCommitStatus.getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setCreatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabCommitStatus.getStartedAt()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setStartedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabCommitStatus.getFinishedAt()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setFinishedAt(java.util.Date)"], ["boolean", "org.gitlab.api.models.GitlabCommitStatus.equals(java.lang.Object)"], ["int", "org.gitlab.api.models.GitlabCommitStatus.hashCode()"], ["org.gitlab.api.models.GitlabAccessLevel[]", "org.gitlab.api.models.GitlabAccessLevel.values()"], ["org.gitlab.api.models.GitlabAccessLevel", "org.gitlab.api.models.GitlabAccessLevel.valueOf(java.lang.String)"], ["org.gitlab.api.models.GitlabAccessLevel", "org.gitlab.api.models.GitlabAccessLevel.fromAccessValue(int)"], ["org.gitlab.api.models.GitlabProjectAccessLevel", "org.gitlab.api.models.GitlabProjectAccessLevel()"], ["org.gitlab.api.models.GitlabAccessLevel", "org.gitlab.api.models.GitlabProjectAccessLevel.getAccessLevel()"], ["void", "org.gitlab.api.models.GitlabProjectAccessLevel.setAccessLevel(org.gitlab.api.models.GitlabAccessLevel)"], ["int", "org.gitlab.api.models.GitlabProjectAccessLevel.getNoficationLevel()"], ["void", "org.gitlab.api.models.GitlabProjectAccessLevel.setNotificationLevel(int)"], ["org.gitlab.api.models.GitlabRepositoryFile", "org.gitlab.api.models.GitlabRepositoryFile()"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getRef()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setRef(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getBlobId()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setBlobId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getCommitId()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setCommitId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getLastCommitId()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setLastCommitId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getFilePath()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setFilePath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getFileName()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setFileName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getEncoding()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setEncoding(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getContent()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setContent(java.lang.String)"], ["org.gitlab.api.models.GitlabIssue", "org.gitlab.api.models.GitlabIssue()"], ["int", "org.gitlab.api.models.GitlabIssue.getId()"], ["void", "org.gitlab.api.models.GitlabIssue.setId(int)"], ["int", "org.gitlab.api.models.GitlabIssue.getIid()"], ["void", "org.gitlab.api.models.GitlabIssue.setIid(int)"], ["int", "org.gitlab.api.models.GitlabIssue.getProjectId()"], ["void", "org.gitlab.api.models.GitlabIssue.setProjectId(int)"], ["java.lang.String", "org.gitlab.api.models.GitlabIssue.getTitle()"], ["void", "org.gitlab.api.models.GitlabIssue.setTitle(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabIssue.getDescription()"], ["void", "org.gitlab.api.models.GitlabIssue.setDescription(java.lang.String)"], ["java.lang.String[]", "org.gitlab.api.models.GitlabIssue.getLabels()"], ["void", "org.gitlab.api.models.GitlabIssue.setLabels(java.lang.String[])"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.models.GitlabIssue.getMilestone()"], ["void", "org.gitlab.api.models.GitlabIssue.setMilestone(org.gitlab.api.models.GitlabMilestone)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabIssue.getAssignee()"], ["void", "org.gitlab.api.models.GitlabIssue.setAssignee(org.gitlab.api.models.GitlabUser)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabIssue.getAuthor()"], ["void", "org.gitlab.api.models.GitlabIssue.setAuthor(org.gitlab.api.models.GitlabUser)"], ["java.lang.String", "org.gitlab.api.models.GitlabIssue.getState()"], ["void", "org.gitlab.api.models.GitlabIssue.setState(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabIssue.getUpdatedAt()"], ["void", "org.gitlab.api.models.GitlabIssue.setUpdatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabIssue.getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabIssue.setCreatedAt(java.util.Date)"], ["org.gitlab.api.models.GitlabSSHKey", "org.gitlab.api.models.GitlabSSHKey()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabSSHKey.getId()"], ["void", "org.gitlab.api.models.GitlabSSHKey.setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabSSHKey.getTitle()"], ["void", "org.gitlab.api.models.GitlabSSHKey.setTitle(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabSSHKey.getKey()"], ["void", "org.gitlab.api.models.GitlabSSHKey.setKey(java.lang.String)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabSSHKey.getUser()"], ["void", "org.gitlab.api.models.GitlabSSHKey.setUser(org.gitlab.api.models.GitlabUser)"], ["org.gitlab.api.models.GitlabTag", "org.gitlab.api.models.GitlabTag()"], ["org.gitlab.api.models.GitlabBranchCommit", "org.gitlab.api.models.GitlabTag.getCommit()"], ["void", "org.gitlab.api.models.GitlabTag.setCommit(org.gitlab.api.models.GitlabBranchCommit)"], ["org.gitlab.api.models.GitlabRelease", "org.gitlab.api.models.GitlabTag.getRelease()"], ["void", "org.gitlab.api.models.GitlabTag.setRelease(org.gitlab.api.models.GitlabRelease)"], ["java.lang.String", "org.gitlab.api.models.GitlabTag.getName()"], ["void", "org.gitlab.api.models.GitlabTag.setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabTag.getMessage()"], ["void", "org.gitlab.api.models.GitlabTag.setMessage(java.lang.String)"], ["org.gitlab.api.models.GitlabApprovedBy", "org.gitlab.api.models.GitlabApprovedBy()"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabApprovedBy.getUser()"], ["void", "org.gitlab.api.models.GitlabApprovedBy.setUser(org.gitlab.api.models.GitlabUser)"], ["org.gitlab.api.models.GitlabServiceEmailOnPush", "org.gitlab.api.models.GitlabServiceEmailOnPush()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabServiceEmailOnPush.getId()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabServiceEmailOnPush.getTitle()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setTitle(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabServiceEmailOnPush.getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setCreatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabServiceEmailOnPush.getUpdatedAt()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setUpdatedAt(java.util.Date)"], ["boolean", "org.gitlab.api.models.GitlabServiceEmailOnPush.isActive()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setActive(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceEmailOnPush.isPushEvents()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setPushEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceEmailOnPush.isIssuesEvents()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setIssuesEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceEmailOnPush.isMergeRequestsEvents()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setMergeRequestsEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceEmailOnPush.isTagPushEvents()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setTagPushEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceEmailOnPush.isNoteEvents()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setNoteEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceEmailOnPush.isBuildEvents()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setBuildEvents(boolean)"], ["org.gitlab.api.models.GitlabEmailonPushProperties", "org.gitlab.api.models.GitlabServiceEmailOnPush.getProperties()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setProperties(org.gitlab.api.models.GitlabEmailonPushProperties)"], ["org.gitlab.api.models.GitlabProjectSharedGroup", "org.gitlab.api.models.GitlabProjectSharedGroup()"], ["int", "org.gitlab.api.models.GitlabProjectSharedGroup.getGroupId()"], ["void", "org.gitlab.api.models.GitlabProjectSharedGroup.setGroupId(int)"], ["java.lang.String", "org.gitlab.api.models.GitlabProjectSharedGroup.getGroupName()"], ["void", "org.gitlab.api.models.GitlabProjectSharedGroup.setGroupName(java.lang.String)"], ["org.gitlab.api.models.GitlabAccessLevel", "org.gitlab.api.models.GitlabProjectSharedGroup.getAccessLevel()"], ["void", "org.gitlab.api.models.GitlabProjectSharedGroup.setAccessLevel(org.gitlab.api.models.GitlabAccessLevel)"], ["org.gitlab.api.models.GitlabSession", "org.gitlab.api.models.GitlabSession()"], ["java.lang.String", "org.gitlab.api.models.GitlabSession.getPrivateToken()"], ["void", "org.gitlab.api.models.GitlabSession.setPrivateToken(java.lang.String)"], ["org.gitlab.api.models.CommitComment", "org.gitlab.api.models.CommitComment()"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.CommitComment.getAuthor()"], ["void", "org.gitlab.api.models.CommitComment.setAuthor(org.gitlab.api.models.GitlabUser)"], ["java.lang.String", "org.gitlab.api.models.CommitComment.getNote()"], ["void", "org.gitlab.api.models.CommitComment.setNote(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CommitComment.getPath()"], ["void", "org.gitlab.api.models.CommitComment.setPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CommitComment.getLine()"], ["void", "org.gitlab.api.models.CommitComment.setLine(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CommitComment.getLineType()"], ["void", "org.gitlab.api.models.CommitComment.setLineType(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.CommitComment.getCreatedAt()"], ["void", "org.gitlab.api.models.CommitComment.setCreatedAt(java.util.Date)"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest(java.lang.String, java.lang.String, java.lang.String)"], ["org.gitlab.api.http.Query", "org.gitlab.api.models.CreateUserRequest.toQuery()"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getEmail()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setEmail(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getPassword()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setPassword(java.lang.String)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateUserRequest.getResetPassword()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setResetPassword(java.lang.Boolean)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getUsername()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setUsername(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getName()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getSkype()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setSkype(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getLinkedin()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setLinkedin(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getTwitter()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setTwitter(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getWebsiteUrl()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setWebsiteUrl(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getOrganization()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setOrganization(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.CreateUserRequest.getProjectsLimit()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setProjectsLimit(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getExternUid()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setExternUid(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getProvider()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setProvider(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getBio()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setBio(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getLocation()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setLocation(java.lang.String)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateUserRequest.getAdmin()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setAdmin(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateUserRequest.getCanCreateGroup()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setCanCreateGroup(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateUserRequest.getSkipConfirmation()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setSkipConfirmation(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateUserRequest.getExternal()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setExternal(java.lang.Boolean)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getAvatar()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setAvatar(java.lang.String)"], ["org.gitlab.api.models.GitlabCommitComparison", "org.gitlab.api.models.GitlabCommitComparison()"], ["org.gitlab.api.models.GitlabCommit", "org.gitlab.api.models.GitlabCommitComparison.getCommit()"], ["void", "org.gitlab.api.models.GitlabCommitComparison.setCommit(org.gitlab.api.models.GitlabCommit)"], ["void", "org.gitlab.api.models.GitlabCommitComparison.setCommits(java.util.List<org.gitlab.api.models.GitlabCommit>)"], ["void", "org.gitlab.api.models.GitlabCommitComparison.setDiffs(java.util.List<org.gitlab.api.models.GitlabCommitDiff>)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabCommitComparison.getCompareSameRef()"], ["void", "org.gitlab.api.models.GitlabCommitComparison.setCompareSameRef(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabCommitComparison.getCompareTimeout()"], ["void", "org.gitlab.api.models.GitlabCommitComparison.setCompareTimeout(java.lang.Boolean)"], ["org.gitlab.api.models.GitlabEmailonPushProperties", "org.gitlab.api.models.GitlabEmailonPushProperties()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabEmailonPushProperties.getDisableDiffs()"], ["void", "org.gitlab.api.models.GitlabEmailonPushProperties.setDisableDiffs(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabEmailonPushProperties.getRecipients()"], ["void", "org.gitlab.api.models.GitlabEmailonPushProperties.setRecipients(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabEmailonPushProperties.getSendFromCommitterEmail()"], ["void", "org.gitlab.api.models.GitlabEmailonPushProperties.setSendFromCommitterEmail(java.lang.Integer)"], ["org.gitlab.api.models.GitlabCommitDiff", "org.gitlab.api.models.GitlabCommitDiff()"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitDiff.getDiff()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setDiff(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitDiff.getNewPath()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setNewPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitDiff.getOldPath()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setOldPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitDiff.getAMode()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setAMode(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitDiff.getBMode()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setBMode(java.lang.String)"], ["boolean", "org.gitlab.api.models.GitlabCommitDiff.getNewFile()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setNewFile(boolean)"], ["boolean", "org.gitlab.api.models.GitlabCommitDiff.getRenamedFile()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setRenamedFile(boolean)"], ["boolean", "org.gitlab.api.models.GitlabCommitDiff.getDeletedFile()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setDeletedFile(boolean)"], ["org.gitlab.api.models.GitlabAward", "org.gitlab.api.models.GitlabAward()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabAward.getId()"], ["void", "org.gitlab.api.models.GitlabAward.setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabAward.getName()"], ["void", "org.gitlab.api.models.GitlabAward.setBody(java.lang.String)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabAward.getUser()"], ["void", "org.gitlab.api.models.GitlabAward.setUser(org.gitlab.api.models.GitlabUser)"], ["java.util.Date", "org.gitlab.api.models.GitlabAward.getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabAward.setCreatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabAward.getUpdatedAt()"], ["void", "org.gitlab.api.models.GitlabAward.setUpdatedAt(java.util.Date)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabAward.getAwardableId()"], ["void", "org.gitlab.api.models.GitlabAward.setAwardableId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabAward.getAwardableType()"], ["void", "org.gitlab.api.models.GitlabAward.setAwardableType(java.lang.String)"], ["org.gitlab.api.models.GitlabJob", "org.gitlab.api.models.GitlabJob()"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabJob.getUser()"], ["void", "org.gitlab.api.models.GitlabJob.setUser(org.gitlab.api.models.GitlabUser)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabJob.getTag()"], ["void", "org.gitlab.api.models.GitlabJob.setTag(java.lang.Boolean)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getStatus()"], ["void", "org.gitlab.api.models.GitlabJob.setStatus(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getStartedAt()"], ["void", "org.gitlab.api.models.GitlabJob.setStartedAt(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getStage()"], ["void", "org.gitlab.api.models.GitlabJob.setStage(java.lang.String)"], ["org.gitlab.api.models.GitlabRunner", "org.gitlab.api.models.GitlabJob.getRunner()"], ["void", "org.gitlab.api.models.GitlabJob.setRunner(org.gitlab.api.models.GitlabRunner)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getRef()"], ["void", "org.gitlab.api.models.GitlabJob.setRef(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getName()"], ["void", "org.gitlab.api.models.GitlabJob.setName(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabJob.getId()"], ["void", "org.gitlab.api.models.GitlabJob.setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getFinishedAt()"], ["void", "org.gitlab.api.models.GitlabJob.setFinishedAt(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getDownloadUrl()"], ["void", "org.gitlab.api.models.GitlabJob.setDownloadUrl(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabJob.setCreatedAt(java.lang.String)"], ["java.lang.Float", "org.gitlab.api.models.GitlabJob.getCoverage()"], ["void", "org.gitlab.api.models.GitlabJob.setCoverage(java.lang.Float)"], ["org.gitlab.api.models.GitlabCommit", "org.gitlab.api.models.GitlabJob.getCommit()"], ["void", "org.gitlab.api.models.GitlabJob.setCommit(org.gitlab.api.models.GitlabCommit)"], ["org.gitlab.api.models.GitlabGroupMember", "org.gitlab.api.models.GitlabGroupMember()"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.models.GitlabGroup()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabGroup.getId()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabGroup.getParentId()"], ["void", "org.gitlab.api.models.GitlabGroup.setId(java.lang.Integer)"], ["void", "org.gitlab.api.models.GitlabGroup.setParentId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabGroup.getName()"], ["void", "org.gitlab.api.models.GitlabGroup.setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabGroup.getPath()"], ["void", "org.gitlab.api.models.GitlabGroup.setPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabGroup.getLdapCn()"], ["void", "org.gitlab.api.models.GitlabGroup.setLdapCn(java.lang.String)"], ["org.gitlab.api.models.GitlabAccessLevel", "org.gitlab.api.models.GitlabGroup.getLdapAccess()"], ["void", "org.gitlab.api.models.GitlabGroup.setLdapAccess(org.gitlab.api.models.GitlabAccessLevel)"], ["void", "org.gitlab.api.models.GitlabGroup.setSharedProjects(java.util.List<org.gitlab.api.models.GitlabProject>)"], ["java.lang.String", "org.gitlab.api.models.GitlabGroup.getWebUrl()"], ["void", "org.gitlab.api.models.GitlabGroup.setWebUrl(java.lang.String)"], ["org.gitlab.api.models.GitlabIssueTimeStats", "org.gitlab.api.models.GitlabIssueTimeStats()"], ["java.lang.String", "org.gitlab.api.models.GitlabIssueTimeStats.getURL()"], ["long", "org.gitlab.api.models.GitlabIssueTimeStats.getTimeEstimate()"], ["long", "org.gitlab.api.models.GitlabIssueTimeStats.getTotalTimeSpent()"], ["java.lang.String", "org.gitlab.api.models.GitlabIssueTimeStats.getHumanTimeEstimate()"], ["java.lang.String", "org.gitlab.api.models.GitlabIssueTimeStats.getHumanTotalTimeSpent()"], ["org.gitlab.api.models.GitlabServiceJira", "org.gitlab.api.models.GitlabServiceJira()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabServiceJira.getId()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabServiceJira.getTitle()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setTitle(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabServiceJira.getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setCreatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabServiceJira.getUpdatedAt()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setUpdatedAt(java.util.Date)"], ["boolean", "org.gitlab.api.models.GitlabServiceJira.isActive()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setActive(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceJira.isPushEvents()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setPushEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceJira.isIssuesEvents()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setIssuesEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceJira.isMergeRequestsEvents()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setMergeRequestsEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceJira.isTagPushEvents()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setTagPushEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceJira.isNoteEvents()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setNoteEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceJira.isBuildEvents()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setBuildEvents(boolean)"], ["org.gitlab.api.models.GitlabJiraProperties", "org.gitlab.api.models.GitlabServiceJira.getProperties()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setProperties(org.gitlab.api.models.GitlabJiraProperties)"], ["org.gitlab.api.models.GitlabAbstractMember", "org.gitlab.api.models.GitlabAbstractMember()"], ["org.gitlab.api.models.GitlabAccessLevel", "org.gitlab.api.models.GitlabAbstractMember.getAccessLevel()"], ["void", "org.gitlab.api.models.GitlabAbstractMember.setAccessLevel(org.gitlab.api.models.GitlabAccessLevel)"], ["org.gitlab.api.models.GitlabUpload", "org.gitlab.api.models.GitlabUpload()"], ["java.lang.String", "org.gitlab.api.models.GitlabUpload.getAlt()"], ["void", "org.gitlab.api.models.GitlabUpload.setAlt(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUpload.getMarkdown()"], ["void", "org.gitlab.api.models.GitlabUpload.setMarkdown(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUpload.getUrl()"], ["void", "org.gitlab.api.models.GitlabUpload.setUrl(java.lang.String)"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.models.GitlabMilestone()"], ["int", "org.gitlab.api.models.GitlabMilestone.getId()"], ["void", "org.gitlab.api.models.GitlabMilestone.setId(int)"], ["int", "org.gitlab.api.models.GitlabMilestone.getIid()"], ["void", "org.gitlab.api.models.GitlabMilestone.setIid(int)"], ["int", "org.gitlab.api.models.GitlabMilestone.getProjectId()"], ["void", "org.gitlab.api.models.GitlabMilestone.setProjectId(int)"], ["int", "org.gitlab.api.models.GitlabMilestone.getGroupId()"], ["void", "org.gitlab.api.models.GitlabMilestone.setGroupId(int)"], ["java.lang.String", "org.gitlab.api.models.GitlabMilestone.getTitle()"], ["void", "org.gitlab.api.models.GitlabMilestone.setTitle(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMilestone.getDescription()"], ["void", "org.gitlab.api.models.GitlabMilestone.setDescription(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabMilestone.getDueDate()"], ["void", "org.gitlab.api.models.GitlabMilestone.setDueDate(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabMilestone.getStartDate()"], ["void", "org.gitlab.api.models.GitlabMilestone.setStartDate(java.util.Date)"], ["java.lang.String", "org.gitlab.api.models.GitlabMilestone.getState()"], ["void", "org.gitlab.api.models.GitlabMilestone.setState(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabMilestone.getUpdatedDate()"], ["void", "org.gitlab.api.models.GitlabMilestone.setUpdatedDate(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabMilestone.getCreatedDate()"], ["void", "org.gitlab.api.models.GitlabMilestone.setCreatedDate(java.util.Date)"], ["org.gitlab.api.models.GitlabBuildVariable", "org.gitlab.api.models.GitlabBuildVariable()"], ["org.gitlab.api.models.GitlabBuildVariable", "org.gitlab.api.models.GitlabBuildVariable(java.lang.String, java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabBuildVariable.getKey()"], ["void", "org.gitlab.api.models.GitlabBuildVariable.setKey(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabBuildVariable.getValue()"], ["void", "org.gitlab.api.models.GitlabBuildVariable.setValue(java.lang.String)"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest(java.lang.String)"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest(java.lang.String, java.lang.String)"], ["org.gitlab.api.http.Query", "org.gitlab.api.models.CreateGroupRequest.toQuery()"], ["java.lang.String", "org.gitlab.api.models.CreateGroupRequest.getName()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateGroupRequest.getPath()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateGroupRequest.getLdapCn()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setLdapCn(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateGroupRequest.getDescription()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setDescription(java.lang.String)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateGroupRequest.getMembershipLock()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setMembershipLock(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateGroupRequest.getShareWithGroupLock()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setShareWithGroupLock(java.lang.Boolean)"], ["org.gitlab.api.models.GitlabVisibility", "org.gitlab.api.models.CreateGroupRequest.getVisibility()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setVisibility(org.gitlab.api.models.GitlabVisibility)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateGroupRequest.getLfsEnabled()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setLfsEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateGroupRequest.getRequestAccessEnabled()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setRequestAccessEnabled(java.lang.Boolean)"], ["java.lang.Integer", "org.gitlab.api.models.CreateGroupRequest.getParentId()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setParentId(java.lang.Integer)"], ["org.gitlab.api.models.GitlabProjectMember", "org.gitlab.api.models.GitlabProjectMember()"], ["org.gitlab.api.models.GitlabVersion", "org.gitlab.api.models.GitlabVersion()"], ["java.lang.String", "org.gitlab.api.models.GitlabVersion.getVersion()"], ["java.lang.String", "org.gitlab.api.models.GitlabVersion.getRevision()"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabUser()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabUser.getId()"], ["void", "org.gitlab.api.models.GitlabUser.setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getUsername()"], ["void", "org.gitlab.api.models.GitlabUser.setUsername(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getEmail()"], ["void", "org.gitlab.api.models.GitlabUser.setEmail(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getName()"], ["void", "org.gitlab.api.models.GitlabUser.setName(java.lang.String)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabUser.isBlocked()"], ["void", "org.gitlab.api.models.GitlabUser.setBlocked(java.lang.Boolean)"], ["java.util.Date", "org.gitlab.api.models.GitlabUser.getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabUser.setCreatedAt(java.util.Date)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getBio()"], ["void", "org.gitlab.api.models.GitlabUser.setBio(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getSkype()"], ["void", "org.gitlab.api.models.GitlabUser.setSkype(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getLinkedin()"], ["void", "org.gitlab.api.models.GitlabUser.setLinkedin(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getTwitter()"], ["void", "org.gitlab.api.models.GitlabUser.setTwitter(java.lang.String)"], ["boolean", "org.gitlab.api.models.GitlabUser.isDarkScheme()"], ["void", "org.gitlab.api.models.GitlabUser.setDarkScheme(boolean)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabUser.getThemeId()"], ["void", "org.gitlab.api.models.GitlabUser.setThemeId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getExternUid()"], ["void", "org.gitlab.api.models.GitlabUser.setExternUid(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getProvider()"], ["void", "org.gitlab.api.models.GitlabUser.setProvider(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getState()"], ["void", "org.gitlab.api.models.GitlabUser.setState(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getExternProviderName()"], ["void", "org.gitlab.api.models.GitlabUser.setExternProviderName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getWebsiteUrl()"], ["void", "org.gitlab.api.models.GitlabUser.setWebsiteUrl(java.lang.String)"], ["boolean", "org.gitlab.api.models.GitlabUser.isAdmin()"], ["void", "org.gitlab.api.models.GitlabUser.setAdmin(boolean)"], ["boolean", "org.gitlab.api.models.GitlabUser.isCanCreateGroup()"], ["void", "org.gitlab.api.models.GitlabUser.setCanCreateGroup(boolean)"], ["boolean", "org.gitlab.api.models.GitlabUser.isCanCreateProject()"], ["void", "org.gitlab.api.models.GitlabUser.setCanCreateProject(boolean)"], ["boolean", "org.gitlab.api.models.GitlabUser.isCanCreateTeam()"], ["void", "org.gitlab.api.models.GitlabUser.setCanCreateTeam(boolean)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getAvatarUrl()"], ["void", "org.gitlab.api.models.GitlabUser.setAvatarUrl(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabUser.getColorSchemeId()"], ["void", "org.gitlab.api.models.GitlabUser.setColorSchemeId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getPrivateToken()"], ["void", "org.gitlab.api.models.GitlabUser.setPrivateToken(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabUser.getLastSignInAt()"], ["void", "org.gitlab.api.models.GitlabUser.setLastSignInAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabUser.getCurrentSignInAt()"], ["void", "org.gitlab.api.models.GitlabUser.setCurrentSignInAt(java.util.Date)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabUser.getProjectsLimit()"], ["void", "org.gitlab.api.models.GitlabUser.setProjectsLimit(java.lang.Integer)"], ["void", "org.gitlab.api.models.GitlabUser.setIdentities(java.util.List<org.gitlab.api.models.GitlabUserIdentity>)"], ["java.util.Date", "org.gitlab.api.models.GitlabUser.getLastActivityOn()"], ["void", "org.gitlab.api.models.GitlabUser.setLastActivityOn(java.util.Date)"], ["org.gitlab.api.models.GitlabMergeRequestApprovals", "org.gitlab.api.models.GitlabMergeRequestApprovals()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequestApprovals.getId()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setId(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequestApprovals.getIid()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setIid(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequestApprovals.getProjectId()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setProjectId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequestApprovals.getTitle()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setTitle(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequestApprovals.getDescription()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setDescription(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequestApprovals.getState()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setState(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabMergeRequestApprovals.getUpdatedAt()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setUpdatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabMergeRequestApprovals.getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setCreatedAt(java.util.Date)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequestApprovals.getMergeStatus()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setMergeStatus(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequestApprovals.getApprovalsRequired()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setApprovalsRequired(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequestApprovals.getApprovalsLeft()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setApprovalsLeft(java.lang.Integer)"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setApprovedBy(java.util.List<org.gitlab.api.models.GitlabApprovedBy>)"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setSuggestedApprovers(java.util.List<org.gitlab.api.models.GitlabUser>)"], ["org.gitlab.api.models.GitlabPermission", "org.gitlab.api.models.GitlabPermission()"], ["org.gitlab.api.models.GitlabProjectAccessLevel", "org.gitlab.api.models.GitlabPermission.getProjectAccess()"], ["org.gitlab.api.models.GitlabProjectAccessLevel", "org.gitlab.api.models.GitlabPermission.getProjectGroupAccess()"], ["org.gitlab.api.models.GitlabBranchCommit", "org.gitlab.api.models.GitlabBranchCommit()"], ["java.lang.String", "org.gitlab.api.models.GitlabBranchCommit.getId()"], ["void", "org.gitlab.api.models.GitlabBranchCommit.setId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabBranchCommit.getTree()"], ["void", "org.gitlab.api.models.GitlabBranchCommit.setTree(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabBranchCommit.getMessage()"], ["void", "org.gitlab.api.models.GitlabBranchCommit.setMessage(java.lang.String)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabBranchCommit.getAuthor()"], ["void", "org.gitlab.api.models.GitlabBranchCommit.setAuthor(org.gitlab.api.models.GitlabUser)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabBranchCommit.getCommitter()"], ["void", "org.gitlab.api.models.GitlabBranchCommit.setCommitter(org.gitlab.api.models.GitlabUser)"], ["java.util.Date", "org.gitlab.api.models.GitlabBranchCommit.getAuthoredDate()"], ["void", "org.gitlab.api.models.GitlabBranchCommit.setAuthoredDate(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabBranchCommit.getCommittedDate()"], ["void", "org.gitlab.api.models.GitlabBranchCommit.setCommittedDate(java.util.Date)"], ["org.gitlab.api.models.GitlabVisibility[]", "org.gitlab.api.models.GitlabVisibility.values()"], ["org.gitlab.api.models.GitlabVisibility", "org.gitlab.api.models.GitlabVisibility.valueOf(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabVisibility.toString()"], ["org.gitlab.api.models.GitlabTrigger", "org.gitlab.api.models.GitlabTrigger()"], ["java.lang.String", "org.gitlab.api.models.GitlabTrigger.getToken()"], ["void", "org.gitlab.api.models.GitlabTrigger.setToken(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabTrigger.getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabTrigger.setCreatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabTrigger.getUpdatedAt()"], ["void", "org.gitlab.api.models.GitlabTrigger.setUpdatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabTrigger.getDeletedAt()"], ["void", "org.gitlab.api.models.GitlabTrigger.setDeletedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabTrigger.getLastUsed()"], ["void", "org.gitlab.api.models.GitlabTrigger.setLastUsed(java.util.Date)"], ["org.gitlab.api.models.GitlabJiraProperties", "org.gitlab.api.models.GitlabJiraProperties()"], ["java.lang.String", "org.gitlab.api.models.GitlabJiraProperties.getUrl()"], ["void", "org.gitlab.api.models.GitlabJiraProperties.setUrl(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJiraProperties.getProjectKey()"], ["void", "org.gitlab.api.models.GitlabJiraProperties.setProjectKey(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJiraProperties.getUsername()"], ["void", "org.gitlab.api.models.GitlabJiraProperties.setUsername(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJiraProperties.getPassword()"], ["void", "org.gitlab.api.models.GitlabJiraProperties.setPassword(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabJiraProperties.getIssueTransitionId()"], ["void", "org.gitlab.api.models.GitlabJiraProperties.setIssueTransitionId(java.lang.Integer)"], ["org.gitlab.api.Pagination", "org.gitlab.api.Pagination()"], ["void", "org.gitlab.api.Pagination.setPage(int)"], ["void", "org.gitlab.api.Pagination.setPerPage(int)"], ["org.gitlab.api.Pagination", "org.gitlab.api.Pagination.withPage(int)"], ["org.gitlab.api.Pagination", "org.gitlab.api.Pagination.withPerPage(int)"], ["org.gitlab.api.http.Query", "org.gitlab.api.Pagination.asQuery()"], ["java.lang.String", "org.gitlab.api.Pagination.toString()"], ["org.gitlab.api.models.GitlabSession", "org.gitlab.api.GitlabAPI.connect(java.lang.String, java.lang.String, java.lang.String)"], ["org.gitlab.api.GitlabAPI", "org.gitlab.api.GitlabAPI.connect(java.lang.String, java.lang.String)"], ["org.gitlab.api.GitlabAPI", "org.gitlab.api.GitlabAPI.connect(java.lang.String, java.lang.String, org.gitlab.api.TokenType)"], ["org.gitlab.api.GitlabAPI", "org.gitlab.api.GitlabAPI.connect(java.lang.String, java.lang.String, org.gitlab.api.TokenType, org.gitlab.api.AuthMethod)"], ["org.gitlab.api.GitlabAPI", "org.gitlab.api.GitlabAPI.ignoreCertificateErrors(boolean)"], ["org.gitlab.api.GitlabAPI", "org.gitlab.api.GitlabAPI.proxy(java.net.Proxy)"], ["int", "org.gitlab.api.GitlabAPI.getRequestTimeout()"], ["org.gitlab.api.GitlabAPI", "org.gitlab.api.GitlabAPI.setRequestTimeout(int)"], ["org.gitlab.api.http.GitlabHTTPRequestor", "org.gitlab.api.GitlabAPI.retrieve()"], ["org.gitlab.api.http.GitlabHTTPRequestor", "org.gitlab.api.GitlabAPI.dispatch()"], ["boolean", "org.gitlab.api.GitlabAPI.isIgnoreCertificateErrors()"], ["java.net.Proxy", "org.gitlab.api.GitlabAPI.getProxy()"], ["java.net.URL", "org.gitlab.api.GitlabAPI.getAPIUrl(java.lang.String)"], ["java.net.URL", "org.gitlab.api.GitlabAPI.getUrl(java.lang.String)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.GitlabAPI.getUser()"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.GitlabAPI.getUser(java.lang.Integer)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.GitlabAPI.getUserViaSudo(java.lang.String)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.GitlabAPI.createUser(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.GitlabAPI.createUser(org.gitlab.api.models.CreateUserRequest)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.GitlabAPI.updateUser(java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean)"], ["void", "org.gitlab.api.GitlabAPI.blockUser(java.lang.Integer)"], ["void", "org.gitlab.api.GitlabAPI.unblockUser(java.lang.Integer)"], ["org.gitlab.api.models.GitlabSSHKey", "org.gitlab.api.GitlabAPI.createSSHKey(java.lang.Integer, java.lang.String, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.deleteSSHKey(java.lang.Integer, java.lang.Integer)"], ["org.gitlab.api.models.GitlabSSHKey", "org.gitlab.api.GitlabAPI.getSSHKey(java.lang.Integer)"], ["void", "org.gitlab.api.GitlabAPI.deleteUser(java.lang.Integer)"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.getGroup(java.lang.Integer)"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.getGroup(java.lang.String)"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.createGroup(java.lang.String)"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.createGroup(java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.createGroupViaSudo(java.lang.String, java.lang.String, org.gitlab.api.models.GitlabUser)"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.createGroup(java.lang.String, java.lang.String, java.lang.String, org.gitlab.api.models.GitlabAccessLevel)"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.createGroup(org.gitlab.api.models.CreateGroupRequest, org.gitlab.api.models.GitlabUser)"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.createGroup(java.lang.String, java.lang.String, java.lang.String, org.gitlab.api.models.GitlabAccessLevel, org.gitlab.api.models.GitlabUser)"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.createGroup(java.lang.String, java.lang.String, java.lang.String, org.gitlab.api.models.GitlabAccessLevel, org.gitlab.api.models.GitlabUser, java.lang.Integer)"], ["org.gitlab.api.models.GitlabGroupMember", "org.gitlab.api.GitlabAPI.addGroupMember(org.gitlab.api.models.GitlabGroup, org.gitlab.api.models.GitlabUser, org.gitlab.api.models.GitlabAccessLevel)"], ["org.gitlab.api.models.GitlabGroupMember", "org.gitlab.api.GitlabAPI.addGroupMember(java.lang.Integer, java.lang.Integer, org.gitlab.api.models.GitlabAccessLevel)"], ["void", "org.gitlab.api.GitlabAPI.deleteGroupMember(org.gitlab.api.models.GitlabGroup, org.gitlab.api.models.GitlabUser)"], ["void", "org.gitlab.api.GitlabAPI.deleteGroupMember(java.lang.Integer, java.lang.Integer)"], ["void", "org.gitlab.api.GitlabAPI.deleteGroup(java.lang.Integer)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.getProject(java.io.Serializable)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.getProject(java.lang.String, java.lang.String)"], ["java.lang.String", "org.gitlab.api.GitlabAPI.getProjectJson(java.io.Serializable)"], ["java.lang.String", "org.gitlab.api.GitlabAPI.getProjectJson(java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabUpload", "org.gitlab.api.GitlabAPI.uploadFile(org.gitlab.api.models.GitlabProject, java.io.File)"], ["org.gitlab.api.models.GitlabJob", "org.gitlab.api.GitlabAPI.getProjectJob(java.lang.Integer, java.lang.Integer)"], ["byte[]", "org.gitlab.api.GitlabAPI.getJobArtifact(org.gitlab.api.models.GitlabProject, org.gitlab.api.models.GitlabJob)"], ["byte[]", "org.gitlab.api.GitlabAPI.getJobArtifact(java.lang.Integer, java.lang.Integer)"], ["byte[]", "org.gitlab.api.GitlabAPI.getJobTrace(org.gitlab.api.models.GitlabProject, org.gitlab.api.models.GitlabJob)"], ["byte[]", "org.gitlab.api.GitlabAPI.getJobTrace(java.lang.Integer, java.lang.Integer)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createProject(org.gitlab.api.models.GitlabProject)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createProject(java.lang.String)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createProjectForGroup(java.lang.String, org.gitlab.api.models.GitlabGroup)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createProjectForGroup(java.lang.String, org.gitlab.api.models.GitlabGroup, java.lang.String)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createProjectForGroup(java.lang.String, org.gitlab.api.models.GitlabGroup, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createProject(java.lang.String, java.lang.Integer, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createUserProject(java.lang.Integer, java.lang.String)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createUserProject(java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createFork(java.lang.String, java.lang.Integer)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createFork(java.lang.String, org.gitlab.api.models.GitlabProject)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.updateProject(java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.deleteProject(java.io.Serializable)"], ["org.gitlab.api.models.GitlabMergeRequestApprovals", "org.gitlab.api.GitlabAPI.getMergeRequestApprovals(org.gitlab.api.models.GitlabMergeRequest)"], ["org.gitlab.api.models.GitlabCommit", "org.gitlab.api.GitlabAPI.cherryPick(java.io.Serializable, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabCommit", "org.gitlab.api.GitlabAPI.cherryPick(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabMergeRequest", "org.gitlab.api.GitlabAPI.getMergeRequestByIid(java.io.Serializable, java.lang.Integer)"], ["org.gitlab.api.models.GitlabMergeRequest", "org.gitlab.api.GitlabAPI.getMergeRequestChanges(java.io.Serializable, java.lang.Integer)"], ["org.gitlab.api.models.GitlabMergeRequest", "org.gitlab.api.GitlabAPI.getMergeRequest(org.gitlab.api.models.GitlabProject, java.lang.Integer)"], ["org.gitlab.api.models.GitlabMergeRequest", "org.gitlab.api.GitlabAPI.createMergeRequest(java.io.Serializable, java.lang.String, java.lang.String, java.lang.Integer, java.lang.String)"], ["org.gitlab.api.models.GitlabMergeRequest", "org.gitlab.api.GitlabAPI.updateMergeRequest(java.io.Serializable, java.lang.Integer, java.lang.String, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabMergeRequest", "org.gitlab.api.GitlabAPI.acceptMergeRequest(org.gitlab.api.models.GitlabProject, java.lang.Integer, java.lang.String)"], ["org.gitlab.api.models.GitlabNote", "org.gitlab.api.GitlabAPI.getNote(org.gitlab.api.models.GitlabMergeRequest, java.lang.Integer)"], ["org.gitlab.api.models.GitlabCommit", "org.gitlab.api.GitlabAPI.getCommit(java.io.Serializable, java.lang.String)"], ["org.gitlab.api.models.GitlabCommitComparison", "org.gitlab.api.GitlabAPI.compareCommits(java.io.Serializable, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabCommitComparison", "org.gitlab.api.GitlabAPI.compareCommits(java.io.Serializable, java.lang.String, java.lang.String, org.gitlab.api.Pagination)"], ["org.gitlab.api.models.GitlabCommitStatus", "org.gitlab.api.GitlabAPI.createCommitStatus(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["byte[]", "org.gitlab.api.GitlabAPI.getRawFileContent(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String)"], ["byte[]", "org.gitlab.api.GitlabAPI.getRawFileContent(java.lang.Integer, java.lang.String, java.lang.String)"], ["byte[]", "org.gitlab.api.GitlabAPI.getRawBlobContent(org.gitlab.api.models.GitlabProject, java.lang.String)"], ["byte[]", "org.gitlab.api.GitlabAPI.getFileArchive(org.gitlab.api.models.GitlabProject)"], ["org.gitlab.api.models.GitlabRepositoryFile", "org.gitlab.api.GitlabAPI.getRepositoryFile(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabSimpleRepositoryFile", "org.gitlab.api.GitlabAPI.createRepositoryFile(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabSimpleRepositoryFile", "org.gitlab.api.GitlabAPI.updateRepositoryFile(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.deleteRepositoryFile(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabNote", "org.gitlab.api.GitlabAPI.updateNote(org.gitlab.api.models.GitlabMergeRequest, java.lang.Integer, java.lang.String)"], ["org.gitlab.api.models.GitlabNote", "org.gitlab.api.GitlabAPI.createNote(org.gitlab.api.models.GitlabMergeRequest, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.deleteNote(org.gitlab.api.models.GitlabMergeRequest, org.gitlab.api.models.GitlabNote)"], ["void", "org.gitlab.api.GitlabAPI.createBranch(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.createBranch(java.io.Serializable, java.lang.String, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.deleteBranch(java.io.Serializable, java.lang.String)"], ["org.gitlab.api.models.GitlabBranch", "org.gitlab.api.GitlabAPI.getBranch(java.io.Serializable, java.lang.String)"], ["org.gitlab.api.models.GitlabBranch", "org.gitlab.api.GitlabAPI.getBranch(org.gitlab.api.models.GitlabProject, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.protectBranch(org.gitlab.api.models.GitlabProject, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.protectBranchWithDeveloperOptions(org.gitlab.api.models.GitlabProject, java.lang.String, boolean, boolean)"], ["void", "org.gitlab.api.GitlabAPI.unprotectBranch(org.gitlab.api.models.GitlabProject, java.lang.String)"], ["org.gitlab.api.models.GitlabProjectHook", "org.gitlab.api.GitlabAPI.getProjectHook(org.gitlab.api.models.GitlabProject, java.lang.String)"], ["org.gitlab.api.models.GitlabProjectHook", "org.gitlab.api.GitlabAPI.addProjectHook(org.gitlab.api.models.GitlabProject, java.lang.String)"], ["org.gitlab.api.models.GitlabProjectHook", "org.gitlab.api.GitlabAPI.addProjectHook(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabProjectHook", "org.gitlab.api.GitlabAPI.addProjectHook(java.io.Serializable, java.lang.String, boolean, boolean, boolean, boolean, boolean)"], ["org.gitlab.api.models.GitlabProjectHook", "org.gitlab.api.GitlabAPI.editProjectHook(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.deleteProjectHook(org.gitlab.api.models.GitlabProjectHook)"], ["void", "org.gitlab.api.GitlabAPI.deleteProjectHook(org.gitlab.api.models.GitlabProject, java.lang.String)"], ["org.gitlab.api.models.GitlabIssue", "org.gitlab.api.GitlabAPI.getIssue(java.io.Serializable, java.lang.Integer)"], ["org.gitlab.api.models.GitlabIssueTimeStats", "org.gitlab.api.GitlabAPI.getIssueTimeStats(java.io.Serializable, java.lang.Integer)"], ["org.gitlab.api.models.GitlabIssue", "org.gitlab.api.GitlabAPI.createIssue(int, int, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabIssue", "org.gitlab.api.GitlabAPI.moveIssue(java.lang.Integer, java.lang.Integer, java.lang.Integer)"], ["org.gitlab.api.models.GitlabIssue", "org.gitlab.api.GitlabAPI.editIssue(int, int, int, int, java.lang.String, java.lang.String, java.lang.String, org.gitlab.api.models.GitlabIssue$Action)"], ["org.gitlab.api.models.GitlabNote", "org.gitlab.api.GitlabAPI.getNote(org.gitlab.api.models.GitlabIssue, java.lang.Integer)"], ["org.gitlab.api.models.GitlabNote", "org.gitlab.api.GitlabAPI.createNote(java.io.Serializable, java.lang.Integer, java.lang.String)"], ["org.gitlab.api.models.GitlabNote", "org.gitlab.api.GitlabAPI.createNote(org.gitlab.api.models.GitlabIssue, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.deleteNote(java.io.Serializable, java.lang.Integer, org.gitlab.api.models.GitlabNote)"], ["void", "org.gitlab.api.GitlabAPI.deleteNote(org.gitlab.api.models.GitlabIssue, org.gitlab.api.models.GitlabNote)"], ["org.gitlab.api.models.GitlabLabel", "org.gitlab.api.GitlabAPI.createLabel(java.io.Serializable, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabLabel", "org.gitlab.api.GitlabAPI.createLabel(java.io.Serializable, org.gitlab.api.models.GitlabLabel)"], ["void", "org.gitlab.api.GitlabAPI.deleteLabel(java.io.Serializable, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.deleteLabel(java.io.Serializable, org.gitlab.api.models.GitlabLabel)"], ["org.gitlab.api.models.GitlabLabel", "org.gitlab.api.GitlabAPI.updateLabel(java.io.Serializable, java.lang.String, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.GitlabAPI.createMilestone(java.io.Serializable, java.lang.String, java.lang.String, java.util.Date, java.util.Date)"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.GitlabAPI.createMilestone(java.io.Serializable, org.gitlab.api.models.GitlabMilestone)"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.GitlabAPI.updateMilestone(java.io.Serializable, int, java.lang.String, java.lang.String, java.util.Date, java.util.Date, java.lang.String)"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.GitlabAPI.updateMilestone(java.io.Serializable, org.gitlab.api.models.GitlabMilestone, java.lang.String)"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.GitlabAPI.updateMilestone(org.gitlab.api.models.GitlabMilestone, java.lang.String)"], ["org.gitlab.api.models.GitlabProjectMember", "org.gitlab.api.GitlabAPI.addProjectMember(org.gitlab.api.models.GitlabProject, org.gitlab.api.models.GitlabUser, org.gitlab.api.models.GitlabAccessLevel)"], ["org.gitlab.api.models.GitlabProjectMember", "org.gitlab.api.GitlabAPI.addProjectMember(java.lang.Integer, java.lang.Integer, org.gitlab.api.models.GitlabAccessLevel)"], ["void", "org.gitlab.api.GitlabAPI.deleteProjectMember(org.gitlab.api.models.GitlabProject, org.gitlab.api.models.GitlabUser)"], ["void", "org.gitlab.api.GitlabAPI.deleteProjectMember(java.lang.Integer, java.lang.Integer)"], ["void", "org.gitlab.api.GitlabAPI.transfer(java.lang.Integer, java.lang.Integer)"], ["org.gitlab.api.models.GitlabSSHKey", "org.gitlab.api.GitlabAPI.createDeployKey(java.lang.Integer, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabSSHKey", "org.gitlab.api.GitlabAPI.createPushDeployKey(java.lang.Integer, java.lang.String, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.deleteDeployKey(java.lang.Integer, java.lang.Integer)"], ["org.gitlab.api.models.GitlabSession", "org.gitlab.api.GitlabAPI.getCurrentSession()"], ["org.gitlab.api.models.GitlabSystemHook", "org.gitlab.api.GitlabAPI.addSystemHook(java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.testSystemHook(java.lang.Integer)"], ["org.gitlab.api.models.GitlabSystemHook", "org.gitlab.api.GitlabAPI.deleteSystemHook(java.lang.Integer)"], ["org.gitlab.api.models.CommitComment", "org.gitlab.api.GitlabAPI.createCommitComment(java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabTag", "org.gitlab.api.GitlabAPI.addTag(java.io.Serializable, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabTag", "org.gitlab.api.GitlabAPI.addTag(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.deleteTag(java.io.Serializable, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.deleteTag(org.gitlab.api.models.GitlabProject, java.lang.String)"], ["org.gitlab.api.models.GitlabAward", "org.gitlab.api.GitlabAPI.getAward(org.gitlab.api.models.GitlabMergeRequest, java.lang.Integer)"], ["org.gitlab.api.models.GitlabAward", "org.gitlab.api.GitlabAPI.createAward(org.gitlab.api.models.GitlabMergeRequest, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.deleteAward(org.gitlab.api.models.GitlabMergeRequest, org.gitlab.api.models.GitlabAward)"], ["org.gitlab.api.models.GitlabAward", "org.gitlab.api.GitlabAPI.getAward(org.gitlab.api.models.GitlabIssue, java.lang.Integer)"], ["org.gitlab.api.models.GitlabAward", "org.gitlab.api.GitlabAPI.createAward(org.gitlab.api.models.GitlabIssue, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.deleteAward(org.gitlab.api.models.GitlabIssue, org.gitlab.api.models.GitlabAward)"], ["org.gitlab.api.models.GitlabAward", "org.gitlab.api.GitlabAPI.getAward(org.gitlab.api.models.GitlabIssue, java.lang.Integer, java.lang.Integer)"], ["org.gitlab.api.models.GitlabAward", "org.gitlab.api.GitlabAPI.createAward(org.gitlab.api.models.GitlabIssue, java.lang.Integer, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.deleteAward(org.gitlab.api.models.GitlabIssue, java.lang.Integer, org.gitlab.api.models.GitlabAward)"], ["org.gitlab.api.models.GitlabBuildVariable", "org.gitlab.api.GitlabAPI.getBuildVariable(java.lang.Integer, java.lang.String)"], ["org.gitlab.api.models.GitlabBuildVariable", "org.gitlab.api.GitlabAPI.getBuildVariable(org.gitlab.api.models.GitlabProject, java.lang.String)"], ["org.gitlab.api.models.GitlabBuildVariable", "org.gitlab.api.GitlabAPI.createBuildVariable(java.lang.Integer, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabBuildVariable", "org.gitlab.api.GitlabAPI.createBuildVariable(java.lang.Integer, org.gitlab.api.models.GitlabBuildVariable)"], ["void", "org.gitlab.api.GitlabAPI.deleteBuildVariable(java.lang.Integer, java.lang.String)"], ["void", "org.gitlab.api.GitlabAPI.deleteBuildVariable(java.lang.Integer, org.gitlab.api.models.GitlabBuildVariable)"], ["org.gitlab.api.models.GitlabBuildVariable", "org.gitlab.api.GitlabAPI.updateBuildVariable(java.lang.Integer, java.lang.String, java.lang.String)"], ["org.gitlab.api.models.GitlabServiceEmailOnPush", "org.gitlab.api.GitlabAPI.getEmailsOnPush(java.lang.Integer)"], ["boolean", "org.gitlab.api.GitlabAPI.updateEmailsOnPush(java.lang.Integer, java.lang.String)"], ["org.gitlab.api.models.GitlabServiceJira", "org.gitlab.api.GitlabAPI.getJiraService(java.lang.Integer)"], ["boolean", "org.gitlab.api.GitlabAPI.deleteJiraService(java.lang.Integer)"], ["boolean", "org.gitlab.api.GitlabAPI.createOrEditJiraService(java.lang.Integer, org.gitlab.api.models.GitlabJiraProperties)"], ["void", "org.gitlab.api.GitlabAPI.shareProjectWithGroup(org.gitlab.api.models.GitlabAccessLevel, java.lang.String, org.gitlab.api.models.GitlabGroup, org.gitlab.api.models.GitlabProject)"], ["void", "org.gitlab.api.GitlabAPI.deleteSharedProjectGroupLink(org.gitlab.api.models.GitlabGroup, org.gitlab.api.models.GitlabProject)"], ["void", "org.gitlab.api.GitlabAPI.deleteSharedProjectGroupLink(int, int)"], ["void", "org.gitlab.api.GitlabAPI.setUserAgent(java.lang.String)"], ["java.lang.String", "org.gitlab.api.GitlabAPI.getUserAgent()"], ["org.gitlab.api.models.GitlabVersion", "org.gitlab.api.GitlabAPI.getVersion()"], ["org.gitlab.api.http.Query", "org.gitlab.api.http.Query()"], ["org.gitlab.api.http.Query", "org.gitlab.api.http.Query.append(java.lang.String, java.lang.String)"], ["org.gitlab.api.http.Query", "org.gitlab.api.http.Query.appendIf(java.lang.String, java.lang.String)"], ["org.gitlab.api.http.Query", "org.gitlab.api.http.Query.appendIf(java.lang.String, java.lang.Integer)"], ["org.gitlab.api.http.Query", "org.gitlab.api.http.Query.appendIf(java.lang.String, java.lang.Boolean)"], ["org.gitlab.api.http.Query", "org.gitlab.api.http.Query.appendIf(java.lang.String, org.gitlab.api.models.GitlabAccessLevel)"], ["boolean", "org.gitlab.api.http.Query.mergeWith(org.gitlab.api.http.Query)"], ["java.lang.String", "org.gitlab.api.http.Query.toString()"], ["org.gitlab.api.http.Query$Tuple", "org.gitlab.api.http.Query$Tuple(T1, T2)"], ["org.gitlab.api.http.GitlabHTTPRequestor", "org.gitlab.api.http.GitlabHTTPRequestor(org.gitlab.api.GitlabAPI)"], ["org.gitlab.api.http.GitlabHTTPRequestor", "org.gitlab.api.http.GitlabHTTPRequestor.authenticate(java.lang.String, org.gitlab.api.TokenType, org.gitlab.api.AuthMethod)"], ["org.gitlab.api.http.GitlabHTTPRequestor", "org.gitlab.api.http.GitlabHTTPRequestor.method(java.lang.String)"], ["org.gitlab.api.http.GitlabHTTPRequestor", "org.gitlab.api.http.GitlabHTTPRequestor.with(java.lang.String, java.lang.Object)"], ["org.gitlab.api.http.GitlabHTTPRequestor", "org.gitlab.api.http.GitlabHTTPRequestor.withAttachment(java.lang.String, java.io.File)"], ["<T> T", "org.gitlab.api.http.GitlabHTTPRequestor.to(java.lang.String, T)"], ["<T> T", "org.gitlab.api.http.GitlabHTTPRequestor.to(java.lang.String, java.lang.Class<T>)"], ["<T> T", "org.gitlab.api.http.GitlabHTTPRequestor.to(java.lang.String, java.lang.Class<T>, T)"], ["<T> java.util.List<T>", "org.gitlab.api.http.GitlabHTTPRequestor.getAll(java.lang.String, java.lang.Class<T[]>)"], ["<T> java.util.Iterator<T>", "org.gitlab.api.http.GitlabHTTPRequestor.asIterator(java.lang.String, java.lang.Class<T>)"], ["java.security.cert.X509Certificate[]", "org.gitlab.api.http.GitlabHTTPRequestor$2.getAcceptedIssuers()"], ["void", "org.gitlab.api.http.GitlabHTTPRequestor$2.checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)"], ["void", "org.gitlab.api.http.GitlabHTTPRequestor$2.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)"], ["org.gitlab.api.http.GitlabHTTPRequestor$METHOD[]", "org.gitlab.api.http.GitlabHTTPRequestor$METHOD.values()"], ["org.gitlab.api.http.GitlabHTTPRequestor$METHOD", "org.gitlab.api.http.GitlabHTTPRequestor$METHOD.valueOf(java.lang.String)"], ["java.lang.String", "org.gitlab.api.http.GitlabHTTPRequestor$METHOD.prettyValues()"], ["boolean", "org.gitlab.api.http.GitlabHTTPRequestor$1.hasNext()"], ["T", "org.gitlab.api.http.GitlabHTTPRequestor$1.next()"], ["void", "org.gitlab.api.http.GitlabHTTPRequestor$1.remove()"], ["boolean", "org.gitlab.api.http.GitlabHTTPRequestor$3.verify(java.lang.String, javax.net.ssl.SSLSession)"], ["org.gitlab.api.AuthMethod[]", "org.gitlab.api.AuthMethod.values()"], ["org.gitlab.api.AuthMethod", "org.gitlab.api.AuthMethod.valueOf(java.lang.String)"], ["org.gitlab.api.TokenType[]", "org.gitlab.api.TokenType.values()"], ["org.gitlab.api.TokenType", "org.gitlab.api.TokenType.valueOf(java.lang.String)"], ["java.lang.String", "org.gitlab.api.TokenType.getTokenParamName()"], ["java.lang.String", "org.gitlab.api.TokenType.getTokenHeaderName()"], ["java.lang.String", "org.gitlab.api.TokenType.getTokenHeaderFormat()"]], "metrics-core-2.2.0.jar": [["com.yammer.metrics.core.Clock$CpuTimeClock", "com.yammer.metrics.core.Clock$CpuTimeClock()"], ["long", "com.yammer.metrics.core.Clock$CpuTimeClock.tick()"], ["com.yammer.metrics.core.Clock$UserTimeClock", "com.yammer.metrics.core.Clock$UserTimeClock()"], ["long", "com.yammer.metrics.core.Clock$UserTimeClock.tick()"], ["com.yammer.metrics.core.Clock", "com.yammer.metrics.core.Clock()"], ["long", "com.yammer.metrics.core.Clock.time()"], ["com.yammer.metrics.core.Clock", "com.yammer.metrics.core.Clock.defaultClock()"], ["void", "com.yammer.metrics.core.Counter.inc()"], ["void", "com.yammer.metrics.core.Counter.inc(long)"], ["void", "com.yammer.metrics.core.Counter.dec()"], ["void", "com.yammer.metrics.core.Counter.dec(long)"], ["long", "com.yammer.metrics.core.Counter.count()"], ["void", "com.yammer.metrics.core.Counter.clear()"], ["<T> void", "com.yammer.metrics.core.Counter.processWith(com.yammer.metrics.core.MetricProcessor<T>, com.yammer.metrics.core.MetricName, T)"], ["com.yammer.metrics.core.Gauge", "com.yammer.metrics.core.Gauge()"], ["<U> void", "com.yammer.metrics.core.Gauge.processWith(com.yammer.metrics.core.MetricProcessor<U>, com.yammer.metrics.core.MetricName, U)"], ["com.yammer.metrics.core.HealthCheck$Result", "com.yammer.metrics.core.HealthCheck$Result.healthy()"], ["com.yammer.metrics.core.HealthCheck$Result", "com.yammer.metrics.core.HealthCheck$Result.healthy(java.lang.String)"], ["com.yammer.metrics.core.HealthCheck$Result", "com.yammer.metrics.core.HealthCheck$Result.healthy(java.lang.String, java.lang.Object...)"], ["com.yammer.metrics.core.HealthCheck$Result", "com.yammer.metrics.core.HealthCheck$Result.unhealthy(java.lang.String)"], ["com.yammer.metrics.core.HealthCheck$Result", "com.yammer.metrics.core.HealthCheck$Result.unhealthy(java.lang.String, java.lang.Object...)"], ["com.yammer.metrics.core.HealthCheck$Result", "com.yammer.metrics.core.HealthCheck$Result.unhealthy(java.lang.Throwable)"], ["boolean", "com.yammer.metrics.core.HealthCheck$Result.isHealthy()"], ["java.lang.String", "com.yammer.metrics.core.HealthCheck$Result.getMessage()"], ["java.lang.Throwable", "com.yammer.metrics.core.HealthCheck$Result.getError()"], ["boolean", "com.yammer.metrics.core.HealthCheck$Result.equals(java.lang.Object)"], ["int", "com.yammer.metrics.core.HealthCheck$Result.hashCode()"], ["java.lang.String", "com.yammer.metrics.core.HealthCheck$Result.toString()"], ["java.lang.String", "com.yammer.metrics.core.HealthCheck.getName()"], ["com.yammer.metrics.core.HealthCheck$Result", "com.yammer.metrics.core.HealthCheck.execute()"], ["com.yammer.metrics.core.HealthCheckRegistry", "com.yammer.metrics.core.HealthCheckRegistry()"], ["void", "com.yammer.metrics.core.HealthCheckRegistry.register(com.yammer.metrics.core.HealthCheck)"], ["void", "com.yammer.metrics.core.HealthCheckRegistry.unregister(java.lang.String)"], ["void", "com.yammer.metrics.core.HealthCheckRegistry.unregister(com.yammer.metrics.core.HealthCheck)"], ["java.util.SortedMap<java.lang.String, com.yammer.metrics.core.HealthCheck$Result>", "com.yammer.metrics.core.HealthCheckRegistry.runHealthChecks()"], ["com.yammer.metrics.stats.Sample", "com.yammer.metrics.core.Histogram$SampleType$1.newSample()"], ["com.yammer.metrics.stats.Sample", "com.yammer.metrics.core.Histogram$SampleType$2.newSample()"], ["com.yammer.metrics.core.Histogram$SampleType[]", "com.yammer.metrics.core.Histogram$SampleType.values()"], ["com.yammer.metrics.core.Histogram$SampleType", "com.yammer.metrics.core.Histogram$SampleType.valueOf(java.lang.String)"], ["void", "com.yammer.metrics.core.Histogram.clear()"], ["void", "com.yammer.metrics.core.Histogram.update(int)"], ["void", "com.yammer.metrics.core.Histogram.update(long)"], ["long", "com.yammer.metrics.core.Histogram.count()"], ["double", "com.yammer.metrics.core.Histogram.max()"], ["double", "com.yammer.metrics.core.Histogram.min()"], ["double", "com.yammer.metrics.core.Histogram.mean()"], ["double", "com.yammer.metrics.core.Histogram.stdDev()"], ["double", "com.yammer.metrics.core.Histogram.sum()"], ["com.yammer.metrics.stats.Snapshot", "com.yammer.metrics.core.Histogram.getSnapshot()"], ["<T> void", "com.yammer.metrics.core.Histogram.processWith(com.yammer.metrics.core.MetricProcessor<T>, com.yammer.metrics.core.MetricName, T)"], ["void", "com.yammer.metrics.core.Meter$1.run()"], ["java.util.concurrent.TimeUnit", "com.yammer.metrics.core.Meter.rateUnit()"], ["java.lang.String", "com.yammer.metrics.core.Meter.eventType()"], ["void", "com.yammer.metrics.core.Meter.mark()"], ["void", "com.yammer.metrics.core.Meter.mark(long)"], ["long", "com.yammer.metrics.core.Meter.count()"], ["double", "com.yammer.metrics.core.Meter.fifteenMinuteRate()"], ["double", "com.yammer.metrics.core.Meter.fiveMinuteRate()"], ["double", "com.yammer.metrics.core.Meter.meanRate()"], ["double", "com.yammer.metrics.core.Meter.oneMinuteRate()"], ["void", "com.yammer.metrics.core.Meter.stop()"], ["<T> void", "com.yammer.metrics.core.Meter.processWith(com.yammer.metrics.core.MetricProcessor<T>, com.yammer.metrics.core.MetricName, T)"], ["com.yammer.metrics.core.MetricName", "com.yammer.metrics.core.MetricName(java.lang.Class<?>, java.lang.String)"], ["com.yammer.metrics.core.MetricName", "com.yammer.metrics.core.MetricName(java.lang.String, java.lang.String, java.lang.String)"], ["com.yammer.metrics.core.MetricName", "com.yammer.metrics.core.MetricName(java.lang.Class<?>, java.lang.String, java.lang.String)"], ["com.yammer.metrics.core.MetricName", "com.yammer.metrics.core.MetricName(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["com.yammer.metrics.core.MetricName", "com.yammer.metrics.core.MetricName(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "com.yammer.metrics.core.MetricName.getGroup()"], ["java.lang.String", "com.yammer.metrics.core.MetricName.getType()"], ["java.lang.String", "com.yammer.metrics.core.MetricName.getName()"], ["java.lang.String", "com.yammer.metrics.core.MetricName.getScope()"], ["boolean", "com.yammer.metrics.core.MetricName.hasScope()"], ["java.lang.String", "com.yammer.metrics.core.MetricName.getMBeanName()"], ["boolean", "com.yammer.metrics.core.MetricName.equals(java.lang.Object)"], ["int", "com.yammer.metrics.core.MetricName.hashCode()"], ["java.lang.String", "com.yammer.metrics.core.MetricName.toString()"], ["int", "com.yammer.metrics.core.MetricName.compareTo(com.yammer.metrics.core.MetricName)"], ["java.lang.String", "com.yammer.metrics.core.MetricName.chooseGroup(java.lang.String, java.lang.Class<?>)"], ["java.lang.String", "com.yammer.metrics.core.MetricName.chooseType(java.lang.String, java.lang.Class<?>)"], ["java.lang.String", "com.yammer.metrics.core.MetricName.chooseName(java.lang.String, java.lang.reflect.Method)"], ["int", "com.yammer.metrics.core.MetricName.compareTo(java.lang.Object)"], ["boolean", "com.yammer.metrics.core.MetricPredicate$1.matches(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Metric)"], ["com.yammer.metrics.core.MetricsRegistry", "com.yammer.metrics.core.MetricsRegistry()"], ["com.yammer.metrics.core.MetricsRegistry", "com.yammer.metrics.core.MetricsRegistry(com.yammer.metrics.core.Clock)"], ["<T> com.yammer.metrics.core.Gauge<T>", "com.yammer.metrics.core.MetricsRegistry.newGauge(java.lang.Class<?>, java.lang.String, com.yammer.metrics.core.Gauge<T>)"], ["<T> com.yammer.metrics.core.Gauge<T>", "com.yammer.metrics.core.MetricsRegistry.newGauge(java.lang.Class<?>, java.lang.String, java.lang.String, com.yammer.metrics.core.Gauge<T>)"], ["<T> com.yammer.metrics.core.Gauge<T>", "com.yammer.metrics.core.MetricsRegistry.newGauge(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Gauge<T>)"], ["com.yammer.metrics.core.Counter", "com.yammer.metrics.core.MetricsRegistry.newCounter(java.lang.Class<?>, java.lang.String)"], ["com.yammer.metrics.core.Counter", "com.yammer.metrics.core.MetricsRegistry.newCounter(java.lang.Class<?>, java.lang.String, java.lang.String)"], ["com.yammer.metrics.core.Counter", "com.yammer.metrics.core.MetricsRegistry.newCounter(com.yammer.metrics.core.MetricName)"], ["com.yammer.metrics.core.Histogram", "com.yammer.metrics.core.MetricsRegistry.newHistogram(java.lang.Class<?>, java.lang.String, boolean)"], ["com.yammer.metrics.core.Histogram", "com.yammer.metrics.core.MetricsRegistry.newHistogram(java.lang.Class<?>, java.lang.String, java.lang.String, boolean)"], ["com.yammer.metrics.core.Histogram", "com.yammer.metrics.core.MetricsRegistry.newHistogram(java.lang.Class<?>, java.lang.String)"], ["com.yammer.metrics.core.Histogram", "com.yammer.metrics.core.MetricsRegistry.newHistogram(java.lang.Class<?>, java.lang.String, java.lang.String)"], ["com.yammer.metrics.core.Histogram", "com.yammer.metrics.core.MetricsRegistry.newHistogram(com.yammer.metrics.core.MetricName, boolean)"], ["com.yammer.metrics.core.Meter", "com.yammer.metrics.core.MetricsRegistry.newMeter(java.lang.Class<?>, java.lang.String, java.lang.String, java.util.concurrent.TimeUnit)"], ["com.yammer.metrics.core.Meter", "com.yammer.metrics.core.MetricsRegistry.newMeter(java.lang.Class<?>, java.lang.String, java.lang.String, java.lang.String, java.util.concurrent.TimeUnit)"], ["com.yammer.metrics.core.Meter", "com.yammer.metrics.core.MetricsRegistry.newMeter(com.yammer.metrics.core.MetricName, java.lang.String, java.util.concurrent.TimeUnit)"], ["com.yammer.metrics.core.Timer", "com.yammer.metrics.core.MetricsRegistry.newTimer(java.lang.Class<?>, java.lang.String)"], ["com.yammer.metrics.core.Timer", "com.yammer.metrics.core.MetricsRegistry.newTimer(java.lang.Class<?>, java.lang.String, java.util.concurrent.TimeUnit, java.util.concurrent.TimeUnit)"], ["com.yammer.metrics.core.Timer", "com.yammer.metrics.core.MetricsRegistry.newTimer(java.lang.Class<?>, java.lang.String, java.lang.String)"], ["com.yammer.metrics.core.Timer", "com.yammer.metrics.core.MetricsRegistry.newTimer(java.lang.Class<?>, java.lang.String, java.lang.String, java.util.concurrent.TimeUnit, java.util.concurrent.TimeUnit)"], ["com.yammer.metrics.core.Timer", "com.yammer.metrics.core.MetricsRegistry.newTimer(com.yammer.metrics.core.MetricName, java.util.concurrent.TimeUnit, java.util.concurrent.TimeUnit)"], ["java.util.Map<com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Metric>", "com.yammer.metrics.core.MetricsRegistry.allMetrics()"], ["java.util.SortedMap<java.lang.String, java.util.SortedMap<com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Metric>>", "com.yammer.metrics.core.MetricsRegistry.groupedMetrics()"], ["java.util.SortedMap<java.lang.String, java.util.SortedMap<com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Metric>>", "com.yammer.metrics.core.MetricsRegistry.groupedMetrics(com.yammer.metrics.core.MetricPredicate)"], ["void", "com.yammer.metrics.core.MetricsRegistry.shutdown()"], ["java.util.concurrent.ScheduledExecutorService", "com.yammer.metrics.core.MetricsRegistry.newScheduledThreadPool(int, java.lang.String)"], ["void", "com.yammer.metrics.core.MetricsRegistry.removeMetric(java.lang.Class<?>, java.lang.String)"], ["void", "com.yammer.metrics.core.MetricsRegistry.removeMetric(java.lang.Class<?>, java.lang.String, java.lang.String)"], ["void", "com.yammer.metrics.core.MetricsRegistry.removeMetric(com.yammer.metrics.core.MetricName)"], ["void", "com.yammer.metrics.core.MetricsRegistry.addListener(com.yammer.metrics.core.MetricsRegistryListener)"], ["void", "com.yammer.metrics.core.MetricsRegistry.removeListener(com.yammer.metrics.core.MetricsRegistryListener)"], ["java.lang.Thread", "com.yammer.metrics.core.ThreadPools$NamedThreadFactory.newThread(java.lang.Runnable)"], ["java.util.concurrent.TimeUnit", "com.yammer.metrics.core.Timer.durationUnit()"], ["java.util.concurrent.TimeUnit", "com.yammer.metrics.core.Timer.rateUnit()"], ["void", "com.yammer.metrics.core.Timer.clear()"], ["void", "com.yammer.metrics.core.Timer.update(long, java.util.concurrent.TimeUnit)"], ["<T> T", "com.yammer.metrics.core.Timer.time(java.util.concurrent.Callable<T>)"], ["com.yammer.metrics.core.TimerContext", "com.yammer.metrics.core.Timer.time()"], ["long", "com.yammer.metrics.core.Timer.count()"], ["double", "com.yammer.metrics.core.Timer.fifteenMinuteRate()"], ["double", "com.yammer.metrics.core.Timer.fiveMinuteRate()"], ["double", "com.yammer.metrics.core.Timer.meanRate()"], ["double", "com.yammer.metrics.core.Timer.oneMinuteRate()"], ["double", "com.yammer.metrics.core.Timer.max()"], ["double", "com.yammer.metrics.core.Timer.min()"], ["double", "com.yammer.metrics.core.Timer.mean()"], ["double", "com.yammer.metrics.core.Timer.stdDev()"], ["double", "com.yammer.metrics.core.Timer.sum()"], ["com.yammer.metrics.stats.Snapshot", "com.yammer.metrics.core.Timer.getSnapshot()"], ["java.lang.String", "com.yammer.metrics.core.Timer.eventType()"], ["void", "com.yammer.metrics.core.Timer.stop()"], ["<T> void", "com.yammer.metrics.core.Timer.processWith(com.yammer.metrics.core.MetricProcessor<T>, com.yammer.metrics.core.MetricName, T)"], ["void", "com.yammer.metrics.core.TimerContext.stop()"], ["long", "com.yammer.metrics.core.VirtualMachineMetrics$BufferPoolStats.getCount()"], ["long", "com.yammer.metrics.core.VirtualMachineMetrics$BufferPoolStats.getMemoryUsed()"], ["long", "com.yammer.metrics.core.VirtualMachineMetrics$BufferPoolStats.getTotalCapacity()"], ["long", "com.yammer.metrics.core.VirtualMachineMetrics$GarbageCollectorStats.getRuns()"], ["long", "com.yammer.metrics.core.VirtualMachineMetrics$GarbageCollectorStats.getTime(java.util.concurrent.TimeUnit)"], ["com.yammer.metrics.core.VirtualMachineMetrics", "com.yammer.metrics.core.VirtualMachineMetrics.getInstance()"], ["double", "com.yammer.metrics.core.VirtualMachineMetrics.totalInit()"], ["double", "com.yammer.metrics.core.VirtualMachineMetrics.totalUsed()"], ["double", "com.yammer.metrics.core.VirtualMachineMetrics.totalMax()"], ["double", "com.yammer.metrics.core.VirtualMachineMetrics.totalCommitted()"], ["double", "com.yammer.metrics.core.VirtualMachineMetrics.heapInit()"], ["double", "com.yammer.metrics.core.VirtualMachineMetrics.heapUsed()"], ["double", "com.yammer.metrics.core.VirtualMachineMetrics.heapMax()"], ["double", "com.yammer.metrics.core.VirtualMachineMetrics.heapCommitted()"], ["double", "com.yammer.metrics.core.VirtualMachineMetrics.heapUsage()"], ["double", "com.yammer.metrics.core.VirtualMachineMetrics.nonHeapUsage()"], ["java.util.Map<java.lang.String, java.lang.Double>", "com.yammer.metrics.core.VirtualMachineMetrics.memoryPoolUsage()"], ["double", "com.yammer.metrics.core.VirtualMachineMetrics.fileDescriptorUsage()"], ["java.lang.String", "com.yammer.metrics.core.VirtualMachineMetrics.version()"], ["java.lang.String", "com.yammer.metrics.core.VirtualMachineMetrics.name()"], ["long", "com.yammer.metrics.core.VirtualMachineMetrics.uptime()"], ["int", "com.yammer.metrics.core.VirtualMachineMetrics.threadCount()"], ["int", "com.yammer.metrics.core.VirtualMachineMetrics.daemonThreadCount()"], ["java.util.Map<java.lang.String, com.yammer.metrics.core.VirtualMachineMetrics$GarbageCollectorStats>", "com.yammer.metrics.core.VirtualMachineMetrics.garbageCollectors()"], ["java.util.Map<java.lang.Thread$State, java.lang.Double>", "com.yammer.metrics.core.VirtualMachineMetrics.threadStatePercentages()"], ["void", "com.yammer.metrics.core.VirtualMachineMetrics.threadDump(java.io.OutputStream)"], ["java.util.Map<java.lang.String, com.yammer.metrics.core.VirtualMachineMetrics$BufferPoolStats>", "com.yammer.metrics.core.VirtualMachineMetrics.getBufferPoolStats()"], ["void", "com.yammer.metrics.HealthChecks.register(com.yammer.metrics.core.HealthCheck)"], ["java.util.Map<java.lang.String, com.yammer.metrics.core.HealthCheck$Result>", "com.yammer.metrics.HealthChecks.runHealthChecks()"], ["com.yammer.metrics.core.HealthCheckRegistry", "com.yammer.metrics.HealthChecks.defaultRegistry()"], ["void", "com.yammer.metrics.Metrics$1.run()"], ["<T> com.yammer.metrics.core.Gauge<T>", "com.yammer.metrics.Metrics.newGauge(java.lang.Class<?>, java.lang.String, com.yammer.metrics.core.Gauge<T>)"], ["<T> com.yammer.metrics.core.Gauge<T>", "com.yammer.metrics.Metrics.newGauge(java.lang.Class<?>, java.lang.String, java.lang.String, com.yammer.metrics.core.Gauge<T>)"], ["<T> com.yammer.metrics.core.Gauge<T>", "com.yammer.metrics.Metrics.newGauge(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Gauge<T>)"], ["com.yammer.metrics.core.Counter", "com.yammer.metrics.Metrics.newCounter(java.lang.Class<?>, java.lang.String)"], ["com.yammer.metrics.core.Counter", "com.yammer.metrics.Metrics.newCounter(java.lang.Class<?>, java.lang.String, java.lang.String)"], ["com.yammer.metrics.core.Counter", "com.yammer.metrics.Metrics.newCounter(com.yammer.metrics.core.MetricName)"], ["com.yammer.metrics.core.Histogram", "com.yammer.metrics.Metrics.newHistogram(java.lang.Class<?>, java.lang.String, boolean)"], ["com.yammer.metrics.core.Histogram", "com.yammer.metrics.Metrics.newHistogram(java.lang.Class<?>, java.lang.String, java.lang.String, boolean)"], ["com.yammer.metrics.core.Histogram", "com.yammer.metrics.Metrics.newHistogram(com.yammer.metrics.core.MetricName, boolean)"], ["com.yammer.metrics.core.Histogram", "com.yammer.metrics.Metrics.newHistogram(java.lang.Class<?>, java.lang.String)"], ["com.yammer.metrics.core.Histogram", "com.yammer.metrics.Metrics.newHistogram(java.lang.Class<?>, java.lang.String, java.lang.String)"], ["com.yammer.metrics.core.Histogram", "com.yammer.metrics.Metrics.newHistogram(com.yammer.metrics.core.MetricName)"], ["com.yammer.metrics.core.Meter", "com.yammer.metrics.Metrics.newMeter(java.lang.Class<?>, java.lang.String, java.lang.String, java.util.concurrent.TimeUnit)"], ["com.yammer.metrics.core.Meter", "com.yammer.metrics.Metrics.newMeter(java.lang.Class<?>, java.lang.String, java.lang.String, java.lang.String, java.util.concurrent.TimeUnit)"], ["com.yammer.metrics.core.Meter", "com.yammer.metrics.Metrics.newMeter(com.yammer.metrics.core.MetricName, java.lang.String, java.util.concurrent.TimeUnit)"], ["com.yammer.metrics.core.Timer", "com.yammer.metrics.Metrics.newTimer(java.lang.Class<?>, java.lang.String, java.util.concurrent.TimeUnit, java.util.concurrent.TimeUnit)"], ["com.yammer.metrics.core.Timer", "com.yammer.metrics.Metrics.newTimer(java.lang.Class<?>, java.lang.String)"], ["com.yammer.metrics.core.Timer", "com.yammer.metrics.Metrics.newTimer(java.lang.Class<?>, java.lang.String, java.lang.String, java.util.concurrent.TimeUnit, java.util.concurrent.TimeUnit)"], ["com.yammer.metrics.core.Timer", "com.yammer.metrics.Metrics.newTimer(java.lang.Class<?>, java.lang.String, java.lang.String)"], ["com.yammer.metrics.core.Timer", "com.yammer.metrics.Metrics.newTimer(com.yammer.metrics.core.MetricName, java.util.concurrent.TimeUnit, java.util.concurrent.TimeUnit)"], ["com.yammer.metrics.core.MetricsRegistry", "com.yammer.metrics.Metrics.defaultRegistry()"], ["void", "com.yammer.metrics.Metrics.shutdown()"], ["void", "com.yammer.metrics.reporting.AbstractPollingReporter.start(long, java.util.concurrent.TimeUnit)"], ["void", "com.yammer.metrics.reporting.AbstractPollingReporter.shutdown(long, java.util.concurrent.TimeUnit)"], ["void", "com.yammer.metrics.reporting.AbstractPollingReporter.shutdown()"], ["void", "com.yammer.metrics.reporting.AbstractReporter.shutdown()"], ["void", "com.yammer.metrics.reporting.ConsoleReporter.enable(long, java.util.concurrent.TimeUnit)"], ["void", "com.yammer.metrics.reporting.ConsoleReporter.enable(com.yammer.metrics.core.MetricsRegistry, long, java.util.concurrent.TimeUnit)"], ["com.yammer.metrics.reporting.ConsoleReporter", "com.yammer.metrics.reporting.ConsoleReporter(java.io.PrintStream)"], ["com.yammer.metrics.reporting.ConsoleReporter", "com.yammer.metrics.reporting.ConsoleReporter(com.yammer.metrics.core.MetricsRegistry, java.io.PrintStream, com.yammer.metrics.core.MetricPredicate)"], ["com.yammer.metrics.reporting.ConsoleReporter", "com.yammer.metrics.reporting.ConsoleReporter(com.yammer.metrics.core.MetricsRegistry, java.io.PrintStream, com.yammer.metrics.core.MetricPredicate, com.yammer.metrics.core.Clock, java.util.TimeZone)"], ["com.yammer.metrics.reporting.ConsoleReporter", "com.yammer.metrics.reporting.ConsoleReporter(com.yammer.metrics.core.MetricsRegistry, java.io.PrintStream, com.yammer.metrics.core.MetricPredicate, com.yammer.metrics.core.Clock, java.util.TimeZone, java.util.Locale)"], ["void", "com.yammer.metrics.reporting.ConsoleReporter.run()"], ["void", "com.yammer.metrics.reporting.ConsoleReporter.processGauge(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Gauge<?>, java.io.PrintStream)"], ["void", "com.yammer.metrics.reporting.ConsoleReporter.processCounter(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Counter, java.io.PrintStream)"], ["void", "com.yammer.metrics.reporting.ConsoleReporter.processMeter(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Metered, java.io.PrintStream)"], ["void", "com.yammer.metrics.reporting.ConsoleReporter.processHistogram(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Histogram, java.io.PrintStream)"], ["void", "com.yammer.metrics.reporting.ConsoleReporter.processTimer(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Timer, java.io.PrintStream)"], ["void", "com.yammer.metrics.reporting.ConsoleReporter.processGauge(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Gauge, java.lang.Object)"], ["void", "com.yammer.metrics.reporting.ConsoleReporter.processTimer(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Timer, java.lang.Object)"], ["void", "com.yammer.metrics.reporting.ConsoleReporter.processHistogram(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Histogram, java.lang.Object)"], ["void", "com.yammer.metrics.reporting.ConsoleReporter.processCounter(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Counter, java.lang.Object)"], ["void", "com.yammer.metrics.reporting.ConsoleReporter.processMeter(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Metered, java.lang.Object)"], ["java.io.PrintStream", "com.yammer.metrics.reporting.CsvReporter$1.getStream(java.lang.String)"], ["void", "com.yammer.metrics.reporting.CsvReporter.enable(java.io.File, long, java.util.concurrent.TimeUnit)"], ["void", "com.yammer.metrics.reporting.CsvReporter.enable(com.yammer.metrics.core.MetricsRegistry, java.io.File, long, java.util.concurrent.TimeUnit)"], ["com.yammer.metrics.reporting.CsvReporter", "com.yammer.metrics.reporting.CsvReporter(com.yammer.metrics.core.MetricsRegistry, java.io.File)"], ["com.yammer.metrics.reporting.CsvReporter", "com.yammer.metrics.reporting.CsvReporter(com.yammer.metrics.core.MetricsRegistry, com.yammer.metrics.core.MetricPredicate, java.io.File)"], ["com.yammer.metrics.reporting.CsvReporter", "com.yammer.metrics.reporting.CsvReporter(com.yammer.metrics.core.MetricsRegistry, com.yammer.metrics.core.MetricPredicate, java.io.File, com.yammer.metrics.core.Clock)"], ["void", "com.yammer.metrics.reporting.CsvReporter.run()"], ["void", "com.yammer.metrics.reporting.CsvReporter.processMeter(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Metered, com.yammer.metrics.reporting.CsvReporter$Context)"], ["void", "com.yammer.metrics.reporting.CsvReporter.processCounter(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Counter, com.yammer.metrics.reporting.CsvReporter$Context)"], ["void", "com.yammer.metrics.reporting.CsvReporter.processHistogram(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Histogram, com.yammer.metrics.reporting.CsvReporter$Context)"], ["void", "com.yammer.metrics.reporting.CsvReporter.processTimer(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Timer, com.yammer.metrics.reporting.CsvReporter$Context)"], ["void", "com.yammer.metrics.reporting.CsvReporter.processGauge(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Gauge<?>, com.yammer.metrics.reporting.CsvReporter$Context)"], ["void", "com.yammer.metrics.reporting.CsvReporter.start(long, java.util.concurrent.TimeUnit)"], ["void", "com.yammer.metrics.reporting.CsvReporter.shutdown()"], ["void", "com.yammer.metrics.reporting.CsvReporter.processGauge(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Gauge, java.lang.Object)"], ["void", "com.yammer.metrics.reporting.CsvReporter.processTimer(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Timer, java.lang.Object)"], ["void", "com.yammer.metrics.reporting.CsvReporter.processHistogram(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Histogram, java.lang.Object)"], ["void", "com.yammer.metrics.reporting.CsvReporter.processCounter(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Counter, java.lang.Object)"], ["void", "com.yammer.metrics.reporting.CsvReporter.processMeter(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Metered, java.lang.Object)"], ["javax.management.ObjectName", "com.yammer.metrics.reporting.JmxReporter$AbstractBean.objectName()"], ["com.yammer.metrics.reporting.JmxReporter$Context", "com.yammer.metrics.reporting.JmxReporter$Context(com.yammer.metrics.core.MetricName, javax.management.ObjectName)"], ["long", "com.yammer.metrics.reporting.JmxReporter$Counter.getCount()"], ["java.lang.Object", "com.yammer.metrics.reporting.JmxReporter$Gauge.getValue()"], ["javax.management.ObjectName", "com.yammer.metrics.reporting.JmxReporter$Histogram.objectName()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Histogram.get50thPercentile()"], ["long", "com.yammer.metrics.reporting.JmxReporter$Histogram.getCount()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Histogram.getMin()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Histogram.getMax()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Histogram.getMean()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Histogram.getStdDev()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Histogram.get75thPercentile()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Histogram.get95thPercentile()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Histogram.get98thPercentile()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Histogram.get99thPercentile()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Histogram.get999thPercentile()"], ["double[]", "com.yammer.metrics.reporting.JmxReporter$Histogram.values()"], ["long", "com.yammer.metrics.reporting.JmxReporter$Meter.getCount()"], ["java.lang.String", "com.yammer.metrics.reporting.JmxReporter$Meter.getEventType()"], ["java.util.concurrent.TimeUnit", "com.yammer.metrics.reporting.JmxReporter$Meter.getRateUnit()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Meter.getMeanRate()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Meter.getOneMinuteRate()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Meter.getFiveMinuteRate()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Meter.getFifteenMinuteRate()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Timer.get50thPercentile()"], ["java.util.concurrent.TimeUnit", "com.yammer.metrics.reporting.JmxReporter$Timer.getLatencyUnit()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Timer.getMin()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Timer.getMax()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Timer.getMean()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Timer.getStdDev()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Timer.get75thPercentile()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Timer.get95thPercentile()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Timer.get98thPercentile()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Timer.get99thPercentile()"], ["double", "com.yammer.metrics.reporting.JmxReporter$Timer.get999thPercentile()"], ["double[]", "com.yammer.metrics.reporting.JmxReporter$Timer.values()"], ["void", "com.yammer.metrics.reporting.JmxReporter.startDefault(com.yammer.metrics.core.MetricsRegistry)"], ["com.yammer.metrics.reporting.JmxReporter", "com.yammer.metrics.reporting.JmxReporter.getDefault()"], ["void", "com.yammer.metrics.reporting.JmxReporter.shutdownDefault()"], ["com.yammer.metrics.reporting.JmxReporter", "com.yammer.metrics.reporting.JmxReporter(com.yammer.metrics.core.MetricsRegistry)"], ["void", "com.yammer.metrics.reporting.JmxReporter.onMetricAdded(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Metric)"], ["void", "com.yammer.metrics.reporting.JmxReporter.onMetricRemoved(com.yammer.metrics.core.MetricName)"], ["void", "com.yammer.metrics.reporting.JmxReporter.processMeter(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Metered, com.yammer.metrics.reporting.JmxReporter$Context)"], ["void", "com.yammer.metrics.reporting.JmxReporter.processCounter(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Counter, com.yammer.metrics.reporting.JmxReporter$Context)"], ["void", "com.yammer.metrics.reporting.JmxReporter.processHistogram(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Histogram, com.yammer.metrics.reporting.JmxReporter$Context)"], ["void", "com.yammer.metrics.reporting.JmxReporter.processTimer(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Timer, com.yammer.metrics.reporting.JmxReporter$Context)"], ["void", "com.yammer.metrics.reporting.JmxReporter.processGauge(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Gauge<?>, com.yammer.metrics.reporting.JmxReporter$Context)"], ["void", "com.yammer.metrics.reporting.JmxReporter.shutdown()"], ["void", "com.yammer.metrics.reporting.JmxReporter.start()"], ["void", "com.yammer.metrics.reporting.JmxReporter.processGauge(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Gauge, java.lang.Object)"], ["void", "com.yammer.metrics.reporting.JmxReporter.processTimer(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Timer, java.lang.Object)"], ["void", "com.yammer.metrics.reporting.JmxReporter.processHistogram(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Histogram, java.lang.Object)"], ["void", "com.yammer.metrics.reporting.JmxReporter.processCounter(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Counter, java.lang.Object)"], ["void", "com.yammer.metrics.reporting.JmxReporter.processMeter(com.yammer.metrics.core.MetricName, com.yammer.metrics.core.Metered, java.lang.Object)"], ["com.yammer.metrics.stats.EWMA", "com.yammer.metrics.stats.EWMA.oneMinuteEWMA()"], ["com.yammer.metrics.stats.EWMA", "com.yammer.metrics.stats.EWMA.fiveMinuteEWMA()"], ["com.yammer.metrics.stats.EWMA", "com.yammer.metrics.stats.EWMA.fifteenMinuteEWMA()"], ["com.yammer.metrics.stats.EWMA", "com.yammer.metrics.stats.EWMA(double, long, java.util.concurrent.TimeUnit)"], ["void", "com.yammer.metrics.stats.EWMA.update(long)"], ["void", "com.yammer.metrics.stats.EWMA.tick()"], ["double", "com.yammer.metrics.stats.EWMA.rate(java.util.concurrent.TimeUnit)"], ["com.yammer.metrics.stats.ExponentiallyDecayingSample", "com.yammer.metrics.stats.ExponentiallyDecayingSample(int, double)"], ["com.yammer.metrics.stats.ExponentiallyDecayingSample", "com.yammer.metrics.stats.ExponentiallyDecayingSample(int, double, com.yammer.metrics.core.Clock)"], ["void", "com.yammer.metrics.stats.ExponentiallyDecayingSample.clear()"], ["int", "com.yammer.metrics.stats.ExponentiallyDecayingSample.size()"], ["void", "com.yammer.metrics.stats.ExponentiallyDecayingSample.update(long)"], ["void", "com.yammer.metrics.stats.ExponentiallyDecayingSample.update(long, long)"], ["com.yammer.metrics.stats.Snapshot", "com.yammer.metrics.stats.ExponentiallyDecayingSample.getSnapshot()"], ["com.yammer.metrics.stats.Snapshot", "com.yammer.metrics.stats.Snapshot(java.util.Collection<java.lang.Long>)"], ["com.yammer.metrics.stats.Snapshot", "com.yammer.metrics.stats.Snapshot(double[])"], ["double", "com.yammer.metrics.stats.Snapshot.getValue(double)"], ["int", "com.yammer.metrics.stats.Snapshot.size()"], ["double", "com.yammer.metrics.stats.Snapshot.getMedian()"], ["double", "com.yammer.metrics.stats.Snapshot.get75thPercentile()"], ["double", "com.yammer.metrics.stats.Snapshot.get95thPercentile()"], ["double", "com.yammer.metrics.stats.Snapshot.get98thPercentile()"], ["double", "com.yammer.metrics.stats.Snapshot.get99thPercentile()"], ["double", "com.yammer.metrics.stats.Snapshot.get999thPercentile()"], ["double[]", "com.yammer.metrics.stats.Snapshot.getValues()"], ["void", "com.yammer.metrics.stats.Snapshot.dump(java.io.File)"], ["com.yammer.metrics.stats.ThreadLocalRandom", "com.yammer.metrics.stats.ThreadLocalRandom.current()"], ["void", "com.yammer.metrics.stats.ThreadLocalRandom.setSeed(long)"], ["int", "com.yammer.metrics.stats.ThreadLocalRandom.nextInt(int, int)"], ["long", "com.yammer.metrics.stats.ThreadLocalRandom.nextLong(long)"], ["long", "com.yammer.metrics.stats.ThreadLocalRandom.nextLong(long, long)"], ["double", "com.yammer.metrics.stats.ThreadLocalRandom.nextDouble(double)"], ["double", "com.yammer.metrics.stats.ThreadLocalRandom.nextDouble(double, double)"], ["com.yammer.metrics.stats.UniformSample", "com.yammer.metrics.stats.UniformSample(int)"], ["void", "com.yammer.metrics.stats.UniformSample.clear()"], ["int", "com.yammer.metrics.stats.UniformSample.size()"], ["void", "com.yammer.metrics.stats.UniformSample.update(long)"], ["com.yammer.metrics.stats.Snapshot", "com.yammer.metrics.stats.UniformSample.getSnapshot()"], ["com.yammer.metrics.util.DeadlockHealthCheck", "com.yammer.metrics.util.DeadlockHealthCheck(com.yammer.metrics.core.VirtualMachineMetrics)"], ["com.yammer.metrics.util.DeadlockHealthCheck", "com.yammer.metrics.util.DeadlockHealthCheck()"], ["com.yammer.metrics.util.DeathRattleExceptionHandler", "com.yammer.metrics.util.DeathRattleExceptionHandler(com.yammer.metrics.core.Counter)"], ["void", "com.yammer.metrics.util.DeathRattleExceptionHandler.uncaughtException(java.lang.Thread, java.lang.Throwable)"], ["com.yammer.metrics.util.JmxGauge", "com.yammer.metrics.util.JmxGauge(java.lang.String, java.lang.String)"], ["com.yammer.metrics.util.JmxGauge", "com.yammer.metrics.util.JmxGauge(javax.management.ObjectName, java.lang.String)"], ["java.lang.Object", "com.yammer.metrics.util.JmxGauge.value()"], ["com.yammer.metrics.util.PercentGauge", "com.yammer.metrics.util.PercentGauge()"], ["java.lang.Double", "com.yammer.metrics.util.PercentGauge.value()"], ["java.lang.Object", "com.yammer.metrics.util.PercentGauge.value()"], ["com.yammer.metrics.util.RatioGauge", "com.yammer.metrics.util.RatioGauge()"], ["java.lang.Double", "com.yammer.metrics.util.RatioGauge.value()"], ["java.lang.Object", "com.yammer.metrics.util.RatioGauge.value()"], ["com.yammer.metrics.util.ToggleGauge", "com.yammer.metrics.util.ToggleGauge()"], ["java.lang.Integer", "com.yammer.metrics.util.ToggleGauge.value()"], ["java.lang.Object", "com.yammer.metrics.util.ToggleGauge.value()"]], "protoparser-4.0.0.jar": [["java.lang.String", "com.squareup.protoparser.AutoValue_EnumConstantElement.name()"], ["int", "com.squareup.protoparser.AutoValue_EnumConstantElement.tag()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_EnumConstantElement.documentation()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_EnumConstantElement.toString()"], ["boolean", "com.squareup.protoparser.AutoValue_EnumConstantElement.equals(java.lang.Object)"], ["int", "com.squareup.protoparser.AutoValue_EnumConstantElement.hashCode()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_EnumElement.name()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_EnumElement.qualifiedName()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_EnumElement.documentation()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_EnumElement.toString()"], ["boolean", "com.squareup.protoparser.AutoValue_EnumElement.equals(java.lang.Object)"], ["int", "com.squareup.protoparser.AutoValue_EnumElement.hashCode()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_ExtendElement.name()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_ExtendElement.qualifiedName()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_ExtendElement.documentation()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_ExtendElement.toString()"], ["boolean", "com.squareup.protoparser.AutoValue_ExtendElement.equals(java.lang.Object)"], ["int", "com.squareup.protoparser.AutoValue_ExtendElement.hashCode()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_ExtensionsElement.documentation()"], ["int", "com.squareup.protoparser.AutoValue_ExtensionsElement.start()"], ["int", "com.squareup.protoparser.AutoValue_ExtensionsElement.end()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_ExtensionsElement.toString()"], ["boolean", "com.squareup.protoparser.AutoValue_ExtensionsElement.equals(java.lang.Object)"], ["int", "com.squareup.protoparser.AutoValue_ExtensionsElement.hashCode()"], ["com.squareup.protoparser.FieldElement$Label", "com.squareup.protoparser.AutoValue_FieldElement.label()"], ["com.squareup.protoparser.DataType", "com.squareup.protoparser.AutoValue_FieldElement.type()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_FieldElement.name()"], ["int", "com.squareup.protoparser.AutoValue_FieldElement.tag()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_FieldElement.documentation()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_FieldElement.toString()"], ["boolean", "com.squareup.protoparser.AutoValue_FieldElement.equals(java.lang.Object)"], ["int", "com.squareup.protoparser.AutoValue_FieldElement.hashCode()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_MessageElement.name()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_MessageElement.qualifiedName()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_MessageElement.documentation()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_MessageElement.toString()"], ["boolean", "com.squareup.protoparser.AutoValue_MessageElement.equals(java.lang.Object)"], ["int", "com.squareup.protoparser.AutoValue_MessageElement.hashCode()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_OneOfElement.name()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_OneOfElement.documentation()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_OneOfElement.toString()"], ["boolean", "com.squareup.protoparser.AutoValue_OneOfElement.equals(java.lang.Object)"], ["int", "com.squareup.protoparser.AutoValue_OneOfElement.hashCode()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_OptionElement.name()"], ["com.squareup.protoparser.OptionElement$Kind", "com.squareup.protoparser.AutoValue_OptionElement.kind()"], ["java.lang.Object", "com.squareup.protoparser.AutoValue_OptionElement.value()"], ["boolean", "com.squareup.protoparser.AutoValue_OptionElement.isParenthesized()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_OptionElement.toString()"], ["boolean", "com.squareup.protoparser.AutoValue_OptionElement.equals(java.lang.Object)"], ["int", "com.squareup.protoparser.AutoValue_OptionElement.hashCode()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_ProtoFile.filePath()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_ProtoFile.packageName()"], ["com.squareup.protoparser.ProtoFile$Syntax", "com.squareup.protoparser.AutoValue_ProtoFile.syntax()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_ProtoFile.toString()"], ["boolean", "com.squareup.protoparser.AutoValue_ProtoFile.equals(java.lang.Object)"], ["int", "com.squareup.protoparser.AutoValue_ProtoFile.hashCode()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_ProtoParser_OptionKindAndValue.toString()"], ["boolean", "com.squareup.protoparser.AutoValue_ProtoParser_OptionKindAndValue.equals(java.lang.Object)"], ["int", "com.squareup.protoparser.AutoValue_ProtoParser_OptionKindAndValue.hashCode()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_RpcElement.name()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_RpcElement.documentation()"], ["com.squareup.protoparser.DataType$NamedType", "com.squareup.protoparser.AutoValue_RpcElement.requestType()"], ["com.squareup.protoparser.DataType$NamedType", "com.squareup.protoparser.AutoValue_RpcElement.responseType()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_RpcElement.toString()"], ["boolean", "com.squareup.protoparser.AutoValue_RpcElement.equals(java.lang.Object)"], ["int", "com.squareup.protoparser.AutoValue_RpcElement.hashCode()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_ServiceElement.name()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_ServiceElement.qualifiedName()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_ServiceElement.documentation()"], ["java.lang.String", "com.squareup.protoparser.AutoValue_ServiceElement.toString()"], ["boolean", "com.squareup.protoparser.AutoValue_ServiceElement.equals(java.lang.Object)"], ["int", "com.squareup.protoparser.AutoValue_ServiceElement.hashCode()"], ["com.squareup.protoparser.DataType$Kind[]", "com.squareup.protoparser.DataType$Kind.values()"], ["com.squareup.protoparser.DataType$Kind", "com.squareup.protoparser.DataType$Kind.valueOf(java.lang.String)"], ["com.squareup.protoparser.DataType$MapType", "com.squareup.protoparser.DataType$MapType.create(com.squareup.protoparser.DataType, com.squareup.protoparser.DataType)"], ["com.squareup.protoparser.DataType$Kind", "com.squareup.protoparser.DataType$MapType.kind()"], ["com.squareup.protoparser.DataType", "com.squareup.protoparser.DataType$MapType.keyType()"], ["com.squareup.protoparser.DataType", "com.squareup.protoparser.DataType$MapType.valueType()"], ["java.lang.String", "com.squareup.protoparser.DataType$MapType.toString()"], ["boolean", "com.squareup.protoparser.DataType$MapType.equals(java.lang.Object)"], ["int", "com.squareup.protoparser.DataType$MapType.hashCode()"], ["com.squareup.protoparser.DataType$NamedType", "com.squareup.protoparser.DataType$NamedType.create(java.lang.String)"], ["java.lang.String", "com.squareup.protoparser.DataType$NamedType.name()"], ["com.squareup.protoparser.DataType$Kind", "com.squareup.protoparser.DataType$NamedType.kind()"], ["java.lang.String", "com.squareup.protoparser.DataType$NamedType.toString()"], ["boolean", "com.squareup.protoparser.DataType$NamedType.equals(java.lang.Object)"], ["int", "com.squareup.protoparser.DataType$NamedType.hashCode()"], ["com.squareup.protoparser.DataType$ScalarType[]", "com.squareup.protoparser.DataType$ScalarType.values()"], ["com.squareup.protoparser.DataType$ScalarType", "com.squareup.protoparser.DataType$ScalarType.valueOf(java.lang.String)"], ["com.squareup.protoparser.DataType$Kind", "com.squareup.protoparser.DataType$ScalarType.kind()"], ["java.lang.String", "com.squareup.protoparser.DataType$ScalarType.toString()"], ["com.squareup.protoparser.EnumConstantElement$Builder", "com.squareup.protoparser.EnumConstantElement$Builder.name(java.lang.String)"], ["com.squareup.protoparser.EnumConstantElement$Builder", "com.squareup.protoparser.EnumConstantElement$Builder.tag(int)"], ["com.squareup.protoparser.EnumConstantElement$Builder", "com.squareup.protoparser.EnumConstantElement$Builder.documentation(java.lang.String)"], ["com.squareup.protoparser.EnumConstantElement$Builder", "com.squareup.protoparser.EnumConstantElement$Builder.addOption(com.squareup.protoparser.OptionElement)"], ["com.squareup.protoparser.EnumConstantElement", "com.squareup.protoparser.EnumConstantElement$Builder.build()"], ["com.squareup.protoparser.EnumConstantElement$Builder", "com.squareup.protoparser.EnumConstantElement.builder()"], ["java.lang.String", "com.squareup.protoparser.EnumConstantElement.toSchema()"], ["com.squareup.protoparser.EnumElement$Builder", "com.squareup.protoparser.EnumElement$Builder.name(java.lang.String)"], ["com.squareup.protoparser.EnumElement$Builder", "com.squareup.protoparser.EnumElement$Builder.qualifiedName(java.lang.String)"], ["com.squareup.protoparser.EnumElement$Builder", "com.squareup.protoparser.EnumElement$Builder.documentation(java.lang.String)"], ["com.squareup.protoparser.EnumElement$Builder", "com.squareup.protoparser.EnumElement$Builder.addConstant(com.squareup.protoparser.EnumConstantElement)"], ["com.squareup.protoparser.EnumElement$Builder", "com.squareup.protoparser.EnumElement$Builder.addConstants(java.util.Collection<com.squareup.protoparser.EnumConstantElement>)"], ["com.squareup.protoparser.EnumElement$Builder", "com.squareup.protoparser.EnumElement$Builder.addOption(com.squareup.protoparser.OptionElement)"], ["com.squareup.protoparser.EnumElement$Builder", "com.squareup.protoparser.EnumElement$Builder.addOptions(java.util.Collection<com.squareup.protoparser.OptionElement>)"], ["com.squareup.protoparser.EnumElement", "com.squareup.protoparser.EnumElement$Builder.build()"], ["com.squareup.protoparser.EnumElement$Builder", "com.squareup.protoparser.EnumElement.builder()"], ["java.lang.String", "com.squareup.protoparser.EnumElement.toSchema()"], ["com.squareup.protoparser.ExtendElement$Builder", "com.squareup.protoparser.ExtendElement$Builder.name(java.lang.String)"], ["com.squareup.protoparser.ExtendElement$Builder", "com.squareup.protoparser.ExtendElement$Builder.qualifiedName(java.lang.String)"], ["com.squareup.protoparser.ExtendElement$Builder", "com.squareup.protoparser.ExtendElement$Builder.documentation(java.lang.String)"], ["com.squareup.protoparser.ExtendElement$Builder", "com.squareup.protoparser.ExtendElement$Builder.addField(com.squareup.protoparser.FieldElement)"], ["com.squareup.protoparser.ExtendElement$Builder", "com.squareup.protoparser.ExtendElement$Builder.addFields(java.util.Collection<com.squareup.protoparser.FieldElement>)"], ["com.squareup.protoparser.ExtendElement", "com.squareup.protoparser.ExtendElement$Builder.build()"], ["com.squareup.protoparser.ExtendElement$Builder", "com.squareup.protoparser.ExtendElement.builder()"], ["java.lang.String", "com.squareup.protoparser.ExtendElement.toSchema()"], ["com.squareup.protoparser.ExtensionsElement", "com.squareup.protoparser.ExtensionsElement.create(int, int)"], ["com.squareup.protoparser.ExtensionsElement", "com.squareup.protoparser.ExtensionsElement.create(int, int, java.lang.String)"], ["java.lang.String", "com.squareup.protoparser.ExtensionsElement.toSchema()"], ["com.squareup.protoparser.FieldElement$Builder", "com.squareup.protoparser.FieldElement$Builder.label(com.squareup.protoparser.FieldElement$Label)"], ["com.squareup.protoparser.FieldElement$Builder", "com.squareup.protoparser.FieldElement$Builder.type(com.squareup.protoparser.DataType)"], ["com.squareup.protoparser.FieldElement$Builder", "com.squareup.protoparser.FieldElement$Builder.name(java.lang.String)"], ["com.squareup.protoparser.FieldElement$Builder", "com.squareup.protoparser.FieldElement$Builder.tag(int)"], ["com.squareup.protoparser.FieldElement$Builder", "com.squareup.protoparser.FieldElement$Builder.documentation(java.lang.String)"], ["com.squareup.protoparser.FieldElement$Builder", "com.squareup.protoparser.FieldElement$Builder.addOption(com.squareup.protoparser.OptionElement)"], ["com.squareup.protoparser.FieldElement$Builder", "com.squareup.protoparser.FieldElement$Builder.addOptions(java.util.Collection<com.squareup.protoparser.OptionElement>)"], ["com.squareup.protoparser.FieldElement", "com.squareup.protoparser.FieldElement$Builder.build()"], ["com.squareup.protoparser.FieldElement$Label[]", "com.squareup.protoparser.FieldElement$Label.values()"], ["com.squareup.protoparser.FieldElement$Label", "com.squareup.protoparser.FieldElement$Label.valueOf(java.lang.String)"], ["com.squareup.protoparser.FieldElement$Builder", "com.squareup.protoparser.FieldElement.builder()"], ["boolean", "com.squareup.protoparser.FieldElement.isDeprecated()"], ["boolean", "com.squareup.protoparser.FieldElement.isPacked()"], ["com.squareup.protoparser.OptionElement", "com.squareup.protoparser.FieldElement.getDefault()"], ["java.lang.String", "com.squareup.protoparser.FieldElement.toSchema()"], ["com.squareup.protoparser.MessageElement$Builder", "com.squareup.protoparser.MessageElement$Builder.name(java.lang.String)"], ["com.squareup.protoparser.MessageElement$Builder", "com.squareup.protoparser.MessageElement$Builder.qualifiedName(java.lang.String)"], ["com.squareup.protoparser.MessageElement$Builder", "com.squareup.protoparser.MessageElement$Builder.documentation(java.lang.String)"], ["com.squareup.protoparser.MessageElement$Builder", "com.squareup.protoparser.MessageElement$Builder.addField(com.squareup.protoparser.FieldElement)"], ["com.squareup.protoparser.MessageElement$Builder", "com.squareup.protoparser.MessageElement$Builder.addFields(java.util.Collection<com.squareup.protoparser.FieldElement>)"], ["com.squareup.protoparser.MessageElement$Builder", "com.squareup.protoparser.MessageElement$Builder.addOneOf(com.squareup.protoparser.OneOfElement)"], ["com.squareup.protoparser.MessageElement$Builder", "com.squareup.protoparser.MessageElement$Builder.addOneOfs(java.util.Collection<com.squareup.protoparser.OneOfElement>)"], ["com.squareup.protoparser.MessageElement$Builder", "com.squareup.protoparser.MessageElement$Builder.addType(com.squareup.protoparser.TypeElement)"], ["com.squareup.protoparser.MessageElement$Builder", "com.squareup.protoparser.MessageElement$Builder.addTypes(java.util.Collection<com.squareup.protoparser.TypeElement>)"], ["com.squareup.protoparser.MessageElement$Builder", "com.squareup.protoparser.MessageElement$Builder.addExtensions(com.squareup.protoparser.ExtensionsElement)"], ["com.squareup.protoparser.MessageElement$Builder", "com.squareup.protoparser.MessageElement$Builder.addExtensions(java.util.Collection<com.squareup.protoparser.ExtensionsElement>)"], ["com.squareup.protoparser.MessageElement$Builder", "com.squareup.protoparser.MessageElement$Builder.addOption(com.squareup.protoparser.OptionElement)"], ["com.squareup.protoparser.MessageElement$Builder", "com.squareup.protoparser.MessageElement$Builder.addOptions(java.util.Collection<com.squareup.protoparser.OptionElement>)"], ["com.squareup.protoparser.MessageElement", "com.squareup.protoparser.MessageElement$Builder.build()"], ["com.squareup.protoparser.MessageElement$Builder", "com.squareup.protoparser.MessageElement.builder()"], ["java.lang.String", "com.squareup.protoparser.MessageElement.toSchema()"], ["com.squareup.protoparser.OneOfElement$Builder", "com.squareup.protoparser.OneOfElement$Builder.name(java.lang.String)"], ["com.squareup.protoparser.OneOfElement$Builder", "com.squareup.protoparser.OneOfElement$Builder.documentation(java.lang.String)"], ["com.squareup.protoparser.OneOfElement$Builder", "com.squareup.protoparser.OneOfElement$Builder.addField(com.squareup.protoparser.FieldElement)"], ["com.squareup.protoparser.OneOfElement$Builder", "com.squareup.protoparser.OneOfElement$Builder.addFields(java.util.Collection<com.squareup.protoparser.FieldElement>)"], ["com.squareup.protoparser.OneOfElement", "com.squareup.protoparser.OneOfElement$Builder.build()"], ["com.squareup.protoparser.OneOfElement$Builder", "com.squareup.protoparser.OneOfElement.builder()"], ["java.lang.String", "com.squareup.protoparser.OneOfElement.toSchema()"], ["com.squareup.protoparser.OptionElement$Kind[]", "com.squareup.protoparser.OptionElement$Kind.values()"], ["com.squareup.protoparser.OptionElement$Kind", "com.squareup.protoparser.OptionElement$Kind.valueOf(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.squareup.protoparser.OptionElement.optionsAsMap(java.util.List<com.squareup.protoparser.OptionElement>)"], ["com.squareup.protoparser.OptionElement", "com.squareup.protoparser.OptionElement.findByName(java.util.List<com.squareup.protoparser.OptionElement>, java.lang.String)"], ["com.squareup.protoparser.OptionElement", "com.squareup.protoparser.OptionElement.create(java.lang.String, com.squareup.protoparser.OptionElement$Kind, java.lang.Object)"], ["com.squareup.protoparser.OptionElement", "com.squareup.protoparser.OptionElement.create(java.lang.String, com.squareup.protoparser.OptionElement$Kind, java.lang.Object, boolean)"], ["java.lang.String", "com.squareup.protoparser.OptionElement.toSchema()"], ["java.lang.String", "com.squareup.protoparser.OptionElement.toSchemaDeclaration()"], ["com.squareup.protoparser.ProtoFile$Builder", "com.squareup.protoparser.ProtoFile$Builder.packageName(java.lang.String)"], ["com.squareup.protoparser.ProtoFile$Builder", "com.squareup.protoparser.ProtoFile$Builder.syntax(com.squareup.protoparser.ProtoFile$Syntax)"], ["com.squareup.protoparser.ProtoFile$Builder", "com.squareup.protoparser.ProtoFile$Builder.addDependency(java.lang.String)"], ["com.squareup.protoparser.ProtoFile$Builder", "com.squareup.protoparser.ProtoFile$Builder.addDependencies(java.util.Collection<java.lang.String>)"], ["com.squareup.protoparser.ProtoFile$Builder", "com.squareup.protoparser.ProtoFile$Builder.addPublicDependency(java.lang.String)"], ["com.squareup.protoparser.ProtoFile$Builder", "com.squareup.protoparser.ProtoFile$Builder.addPublicDependencies(java.util.Collection<java.lang.String>)"], ["com.squareup.protoparser.ProtoFile$Builder", "com.squareup.protoparser.ProtoFile$Builder.addType(com.squareup.protoparser.TypeElement)"], ["com.squareup.protoparser.ProtoFile$Builder", "com.squareup.protoparser.ProtoFile$Builder.addTypes(java.util.Collection<com.squareup.protoparser.TypeElement>)"], ["com.squareup.protoparser.ProtoFile$Builder", "com.squareup.protoparser.ProtoFile$Builder.addService(com.squareup.protoparser.ServiceElement)"], ["com.squareup.protoparser.ProtoFile$Builder", "com.squareup.protoparser.ProtoFile$Builder.addServices(java.util.Collection<com.squareup.protoparser.ServiceElement>)"], ["com.squareup.protoparser.ProtoFile$Builder", "com.squareup.protoparser.ProtoFile$Builder.addExtendDeclaration(com.squareup.protoparser.ExtendElement)"], ["com.squareup.protoparser.ProtoFile$Builder", "com.squareup.protoparser.ProtoFile$Builder.addExtendDeclarations(java.util.Collection<com.squareup.protoparser.ExtendElement>)"], ["com.squareup.protoparser.ProtoFile$Builder", "com.squareup.protoparser.ProtoFile$Builder.addOption(com.squareup.protoparser.OptionElement)"], ["com.squareup.protoparser.ProtoFile$Builder", "com.squareup.protoparser.ProtoFile$Builder.addOptions(java.util.Collection<com.squareup.protoparser.OptionElement>)"], ["com.squareup.protoparser.ProtoFile", "com.squareup.protoparser.ProtoFile$Builder.build()"], ["com.squareup.protoparser.ProtoFile$Syntax[]", "com.squareup.protoparser.ProtoFile$Syntax.values()"], ["com.squareup.protoparser.ProtoFile$Syntax", "com.squareup.protoparser.ProtoFile$Syntax.valueOf(java.lang.String)"], ["com.squareup.protoparser.ProtoFile$Builder", "com.squareup.protoparser.ProtoFile.builder(java.lang.String)"], ["java.lang.String", "com.squareup.protoparser.ProtoFile.toSchema()"], ["com.squareup.protoparser.ProtoParser$Context[]", "com.squareup.protoparser.ProtoParser$Context.values()"], ["com.squareup.protoparser.ProtoParser$Context", "com.squareup.protoparser.ProtoParser$Context.valueOf(java.lang.String)"], ["boolean", "com.squareup.protoparser.ProtoParser$Context.permitsPackage()"], ["boolean", "com.squareup.protoparser.ProtoParser$Context.permitsSyntax()"], ["boolean", "com.squareup.protoparser.ProtoParser$Context.permitsImport()"], ["boolean", "com.squareup.protoparser.ProtoParser$Context.permitsField()"], ["boolean", "com.squareup.protoparser.ProtoParser$Context.permitsExtensions()"], ["boolean", "com.squareup.protoparser.ProtoParser$Context.permitsRpc()"], ["boolean", "com.squareup.protoparser.ProtoParser$Context.permitsOneOf()"], ["com.squareup.protoparser.ProtoFile", "com.squareup.protoparser.ProtoParser.parseUtf8(java.io.File)"], ["com.squareup.protoparser.ProtoFile", "com.squareup.protoparser.ProtoParser.parseUtf8(java.nio.file.Path)"], ["com.squareup.protoparser.ProtoFile", "com.squareup.protoparser.ProtoParser.parseUtf8(java.lang.String, java.io.InputStream)"], ["com.squareup.protoparser.ProtoFile", "com.squareup.protoparser.ProtoParser.parse(java.lang.String, java.io.Reader)"], ["com.squareup.protoparser.ProtoFile", "com.squareup.protoparser.ProtoParser.parse(java.lang.String, java.lang.String)"], ["com.squareup.protoparser.RpcElement$Builder", "com.squareup.protoparser.RpcElement$Builder.name(java.lang.String)"], ["com.squareup.protoparser.RpcElement$Builder", "com.squareup.protoparser.RpcElement$Builder.documentation(java.lang.String)"], ["com.squareup.protoparser.RpcElement$Builder", "com.squareup.protoparser.RpcElement$Builder.requestType(com.squareup.protoparser.DataType$NamedType)"], ["com.squareup.protoparser.RpcElement$Builder", "com.squareup.protoparser.RpcElement$Builder.responseType(com.squareup.protoparser.DataType$NamedType)"], ["com.squareup.protoparser.RpcElement$Builder", "com.squareup.protoparser.RpcElement$Builder.addOption(com.squareup.protoparser.OptionElement)"], ["com.squareup.protoparser.RpcElement$Builder", "com.squareup.protoparser.RpcElement$Builder.addOptions(java.util.Collection<com.squareup.protoparser.OptionElement>)"], ["com.squareup.protoparser.RpcElement", "com.squareup.protoparser.RpcElement$Builder.build()"], ["com.squareup.protoparser.RpcElement$Builder", "com.squareup.protoparser.RpcElement.builder()"], ["java.lang.String", "com.squareup.protoparser.RpcElement.toSchema()"], ["com.squareup.protoparser.ServiceElement$Builder", "com.squareup.protoparser.ServiceElement$Builder.name(java.lang.String)"], ["com.squareup.protoparser.ServiceElement$Builder", "com.squareup.protoparser.ServiceElement$Builder.qualifiedName(java.lang.String)"], ["com.squareup.protoparser.ServiceElement$Builder", "com.squareup.protoparser.ServiceElement$Builder.documentation(java.lang.String)"], ["com.squareup.protoparser.ServiceElement$Builder", "com.squareup.protoparser.ServiceElement$Builder.addRpc(com.squareup.protoparser.RpcElement)"], ["com.squareup.protoparser.ServiceElement$Builder", "com.squareup.protoparser.ServiceElement$Builder.addRpcs(java.util.Collection<com.squareup.protoparser.RpcElement>)"], ["com.squareup.protoparser.ServiceElement$Builder", "com.squareup.protoparser.ServiceElement$Builder.addOption(com.squareup.protoparser.OptionElement)"], ["com.squareup.protoparser.ServiceElement$Builder", "com.squareup.protoparser.ServiceElement$Builder.addOptions(java.util.Collection<com.squareup.protoparser.OptionElement>)"], ["com.squareup.protoparser.ServiceElement", "com.squareup.protoparser.ServiceElement$Builder.build()"], ["com.squareup.protoparser.ServiceElement$Builder", "com.squareup.protoparser.ServiceElement.builder()"], ["java.lang.String", "com.squareup.protoparser.ServiceElement.toSchema()"]], "jedis-2.2.1.jar": [["redis.clients.util.MurmurHash", "redis.clients.util.MurmurHash()"], ["int", "redis.clients.util.MurmurHash.hash(byte[], int)"], ["int", "redis.clients.util.MurmurHash.hash(byte[], int, int, int)"], ["int", "redis.clients.util.MurmurHash.hash(java.nio.ByteBuffer, int)"], ["long", "redis.clients.util.MurmurHash.hash64A(byte[], int)"], ["long", "redis.clients.util.MurmurHash.hash64A(byte[], int, int, int)"], ["long", "redis.clients.util.MurmurHash.hash64A(java.nio.ByteBuffer, int)"], ["long", "redis.clients.util.MurmurHash.hash(byte[])"], ["long", "redis.clients.util.MurmurHash.hash(java.lang.String)"], ["long", "redis.clients.util.Slowlog.getId()"], ["long", "redis.clients.util.Slowlog.getTimeStamp()"], ["long", "redis.clients.util.Slowlog.getExecutionTime()"], ["redis.clients.util.JedisByteHashMap$JedisByteEntry", "redis.clients.util.JedisByteHashMap$JedisByteEntry(byte[], byte[])"], ["byte[]", "redis.clients.util.JedisByteHashMap$JedisByteEntry.getKey()"], ["byte[]", "redis.clients.util.JedisByteHashMap$JedisByteEntry.getValue()"], ["byte[]", "redis.clients.util.JedisByteHashMap$JedisByteEntry.setValue(byte[])"], ["java.lang.Object", "redis.clients.util.JedisByteHashMap$JedisByteEntry.setValue(java.lang.Object)"], ["java.lang.Object", "redis.clients.util.JedisByteHashMap$JedisByteEntry.getValue()"], ["java.lang.Object", "redis.clients.util.JedisByteHashMap$JedisByteEntry.getKey()"], ["redis.clients.util.Pool", "redis.clients.util.Pool()"], ["redis.clients.util.Pool", "redis.clients.util.Pool(org.apache.commons.pool.impl.GenericObjectPool$Config, org.apache.commons.pool.PoolableObjectFactory)"], ["void", "redis.clients.util.Pool.initPool(org.apache.commons.pool.impl.GenericObjectPool$Config, org.apache.commons.pool.PoolableObjectFactory)"], ["T", "redis.clients.util.Pool.getResource()"], ["void", "redis.clients.util.Pool.returnResourceObject(java.lang.Object)"], ["void", "redis.clients.util.Pool.returnBrokenResource(T)"], ["void", "redis.clients.util.Pool.returnResource(T)"], ["void", "redis.clients.util.Pool.destroy()"], ["redis.clients.util.ShardInfo", "redis.clients.util.ShardInfo()"], ["redis.clients.util.ShardInfo", "redis.clients.util.ShardInfo(int)"], ["int", "redis.clients.util.ShardInfo.getWeight()"], ["long", "redis.clients.util.Hashing$1.hash(java.lang.String)"], ["long", "redis.clients.util.Hashing$1.hash(byte[])"], ["redis.clients.util.Sharded", "redis.clients.util.Sharded(java.util.List<S>)"], ["redis.clients.util.Sharded", "redis.clients.util.Sharded(java.util.List<S>, redis.clients.util.Hashing)"], ["redis.clients.util.Sharded", "redis.clients.util.Sharded(java.util.List<S>, java.util.regex.Pattern)"], ["redis.clients.util.Sharded", "redis.clients.util.Sharded(java.util.List<S>, redis.clients.util.Hashing, java.util.regex.Pattern)"], ["R", "redis.clients.util.Sharded.getShard(byte[])"], ["R", "redis.clients.util.Sharded.getShard(java.lang.String)"], ["S", "redis.clients.util.Sharded.getShardInfo(byte[])"], ["S", "redis.clients.util.Sharded.getShardInfo(java.lang.String)"], ["java.lang.String", "redis.clients.util.Sharded.getKeyTag(java.lang.String)"], ["redis.clients.util.SafeEncoder", "redis.clients.util.SafeEncoder()"], ["byte[][]", "redis.clients.util.SafeEncoder.encodeMany(java.lang.String...)"], ["byte[]", "redis.clients.util.SafeEncoder.encode(java.lang.String)"], ["java.lang.String", "redis.clients.util.SafeEncoder.encode(byte[])"], ["redis.clients.util.JedisByteHashMap$ByteArrayWrapper", "redis.clients.util.JedisByteHashMap$ByteArrayWrapper(byte[])"], ["boolean", "redis.clients.util.JedisByteHashMap$ByteArrayWrapper.equals(java.lang.Object)"], ["int", "redis.clients.util.JedisByteHashMap$ByteArrayWrapper.hashCode()"], ["redis.clients.util.JedisByteHashMap", "redis.clients.util.JedisByteHashMap()"], ["void", "redis.clients.util.JedisByteHashMap.clear()"], ["boolean", "redis.clients.util.JedisByteHashMap.containsKey(java.lang.Object)"], ["boolean", "redis.clients.util.JedisByteHashMap.containsValue(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<byte[], byte[]>>", "redis.clients.util.JedisByteHashMap.entrySet()"], ["byte[]", "redis.clients.util.JedisByteHashMap.get(java.lang.Object)"], ["boolean", "redis.clients.util.JedisByteHashMap.isEmpty()"], ["byte[]", "redis.clients.util.JedisByteHashMap.put(byte[], byte[])"], ["void", "redis.clients.util.JedisByteHashMap.putAll(java.util.Map<? extends byte[], ? extends byte[]>)"], ["byte[]", "redis.clients.util.JedisByteHashMap.remove(java.lang.Object)"], ["int", "redis.clients.util.JedisByteHashMap.size()"], ["java.lang.Object", "redis.clients.util.JedisByteHashMap.remove(java.lang.Object)"], ["java.lang.Object", "redis.clients.util.JedisByteHashMap.put(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "redis.clients.util.JedisByteHashMap.get(java.lang.Object)"], ["redis.clients.util.RedisOutputStream", "redis.clients.util.RedisOutputStream(java.io.OutputStream)"], ["redis.clients.util.RedisOutputStream", "redis.clients.util.RedisOutputStream(java.io.OutputStream, int)"], ["void", "redis.clients.util.RedisOutputStream.write(byte)"], ["void", "redis.clients.util.RedisOutputStream.write(byte[])"], ["void", "redis.clients.util.RedisOutputStream.write(byte[], int, int)"], ["void", "redis.clients.util.RedisOutputStream.writeAsciiCrLf(java.lang.String)"], ["boolean", "redis.clients.util.RedisOutputStream.isSurrogate(char)"], ["int", "redis.clients.util.RedisOutputStream.utf8Length(java.lang.String)"], ["void", "redis.clients.util.RedisOutputStream.writeCrLf()"], ["void", "redis.clients.util.RedisOutputStream.writeUtf8CrLf(java.lang.String)"], ["void", "redis.clients.util.RedisOutputStream.writeIntCrLf(int)"], ["void", "redis.clients.util.RedisOutputStream.flush()"], ["redis.clients.util.RedisInputStream", "redis.clients.util.RedisInputStream(java.io.InputStream, int)"], ["redis.clients.util.RedisInputStream", "redis.clients.util.RedisInputStream(java.io.InputStream)"], ["byte", "redis.clients.util.RedisInputStream.readByte()"], ["java.lang.String", "redis.clients.util.RedisInputStream.readLine()"], ["int", "redis.clients.util.RedisInputStream.read(byte[], int, int)"], ["redis.clients.jedis.JedisFactory", "redis.clients.jedis.JedisFactory(java.lang.String, int, int, java.lang.String, int)"], ["java.lang.Object", "redis.clients.jedis.JedisFactory.makeObject()"], ["void", "redis.clients.jedis.JedisFactory.activateObject(java.lang.Object)"], ["void", "redis.clients.jedis.JedisFactory.destroyObject(java.lang.Object)"], ["boolean", "redis.clients.jedis.JedisFactory.validateObject(java.lang.Object)"], ["redis.clients.jedis.ShardedJedisPipeline", "redis.clients.jedis.ShardedJedisPipeline()"], ["void", "redis.clients.jedis.ShardedJedisPipeline.setShardedJedis(redis.clients.jedis.BinaryShardedJedis)"], ["void", "redis.clients.jedis.ShardedJedisPipeline.sync()"], ["void", "redis.clients.jedis.ShardedJedisPipeline.execute()"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.evalsha(java.lang.String, int, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.evalsha(java.lang.String, java.util.List, java.util.List)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.evalsha(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.eval(java.lang.String, int, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.eval(java.lang.String, java.util.List, java.util.List)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.eval(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hincrByFloat(byte[], byte[], double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hincrByFloat(java.lang.String, java.lang.String, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.set(byte[], byte[], byte[], byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.set(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.set(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.set(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.psetex(byte[], int, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.psetex(java.lang.String, int, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.incrByFloat(byte[], double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.incrByFloat(java.lang.String, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.restore(byte[], int, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.restore(java.lang.String, int, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.pttl(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.pttl(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.pexpireAt(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.pexpireAt(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.pexpire(byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.pexpire(java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.objectIdletime(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.objectIdletime(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.objectEncoding(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.objectEncoding(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.objectRefcount(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.objectRefcount(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.migrate(byte[], int, byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.migrate(java.lang.String, int, java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.dump(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.dump(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.bitcount(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.bitcount(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.bitcount(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.bitcount(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zscore(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zscore(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrank(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrank(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeWithScores(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeWithScores(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrange(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrange(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zremrangeByScore(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zremrangeByScore(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zremrangeByScore(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zremrangeByScore(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zremrangeByRank(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zremrangeByRank(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrem(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrem(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrank(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrank(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeWithScores(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeWithScores(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScoreWithScores(byte[], byte[], byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScoreWithScores(byte[], double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScoreWithScores(java.lang.String, double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScoreWithScores(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScoreWithScores(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScoreWithScores(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScore(byte[], byte[], byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScore(byte[], double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScore(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScore(java.lang.String, double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScore(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScore(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScore(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrevrangeByScore(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScoreWithScores(byte[], byte[], byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScoreWithScores(byte[], double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScoreWithScores(java.lang.String, double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScoreWithScores(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScoreWithScores(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScoreWithScores(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScore(byte[], byte[], byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScore(byte[], double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScore(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScore(java.lang.String, double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScore(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScore(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScore(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrangeByScore(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrange(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zrange(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zincrby(byte[], double, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zincrby(java.lang.String, double, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zcount(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zcount(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zcount(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zcard(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zcard(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zadd(byte[], double, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zadd(java.lang.String, java.util.Map)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.zadd(java.lang.String, double, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.type(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.type(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.ttl(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.ttl(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.substr(byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.substr(java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.strlen(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.strlen(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.srem(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.srem(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.srandmember(byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.srandmember(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.srandmember(java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.srandmember(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.spop(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.spop(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.sort(byte[], redis.clients.jedis.SortingParams)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.sort(java.lang.String, redis.clients.jedis.SortingParams)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.sort(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.sort(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.smembers(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.smembers(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.sismember(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.sismember(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.setrange(byte[], long, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.setrange(java.lang.String, long, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.setnx(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.setnx(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.setex(byte[], int, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.setex(java.lang.String, int, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.setbit(byte[], long, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.setbit(java.lang.String, long, boolean)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.set(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.set(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.scard(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.scard(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.sadd(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.sadd(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.rpushx(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.rpushx(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.rpush(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.rpush(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.rpop(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.rpop(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.persist(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.persist(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.move(byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.move(java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.ltrim(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.ltrim(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.lset(byte[], long, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.lset(java.lang.String, long, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.lrem(byte[], long, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.lrem(java.lang.String, long, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.lrange(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.lrange(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.lpushx(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.lpushx(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.lpush(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.lpush(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.lpop(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.lpop(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.llen(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.llen(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.linsert(byte[], redis.clients.jedis.BinaryClient$LIST_POSITION, byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.linsert(java.lang.String, redis.clients.jedis.BinaryClient$LIST_POSITION, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.lindex(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.lindex(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.incrBy(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.incrBy(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.incr(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.incr(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hvals(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hvals(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hsetnx(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hsetnx(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hset(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hset(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hmset(byte[], java.util.Map)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hmset(java.lang.String, java.util.Map)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hmget(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hmget(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hlen(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hlen(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hkeys(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hkeys(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hincrBy(byte[], byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hincrBy(java.lang.String, java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hgetAll(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hgetAll(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hget(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hget(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hexists(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hexists(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hdel(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.hdel(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.getrange(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.getSet(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.getSet(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.getrange(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.getbit(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.getbit(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.get(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.get(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.expireAt(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.expireAt(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.expire(byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.expire(java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.exists(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.exists(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.echo(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.echo(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.del(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.del(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.decrBy(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.decrBy(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.decr(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.decr(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.brpop(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.blpop(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.brpop(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.blpop(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.append(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.ShardedJedisPipeline.append(java.lang.String, java.lang.String)"], ["redis.clients.jedis.BinaryJedis", "redis.clients.jedis.BinaryJedis(java.lang.String)"], ["redis.clients.jedis.BinaryJedis", "redis.clients.jedis.BinaryJedis(java.lang.String, int)"], ["redis.clients.jedis.BinaryJedis", "redis.clients.jedis.BinaryJedis(java.lang.String, int, int)"], ["redis.clients.jedis.BinaryJedis", "redis.clients.jedis.BinaryJedis(redis.clients.jedis.JedisShardInfo)"], ["redis.clients.jedis.BinaryJedis", "redis.clients.jedis.BinaryJedis(java.net.URI)"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.ping()"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.set(byte[], byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.set(byte[], byte[], byte[], byte[], long)"], ["byte[]", "redis.clients.jedis.BinaryJedis.get(byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.quit()"], ["java.lang.Boolean", "redis.clients.jedis.BinaryJedis.exists(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.del(byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.del(byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.type(byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.flushDB()"], ["byte[]", "redis.clients.jedis.BinaryJedis.randomBinaryKey()"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.rename(byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.renamenx(byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.dbSize()"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.expire(byte[], int)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.expireAt(byte[], long)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.ttl(byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.select(int)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.move(byte[], int)"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.flushAll()"], ["byte[]", "redis.clients.jedis.BinaryJedis.getSet(byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.setnx(byte[], byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.setex(byte[], int, byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.mset(byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.msetnx(byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.decrBy(byte[], long)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.decr(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.incrBy(byte[], long)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.incr(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.append(byte[], byte[])"], ["byte[]", "redis.clients.jedis.BinaryJedis.substr(byte[], int, int)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.hset(byte[], byte[], byte[])"], ["byte[]", "redis.clients.jedis.BinaryJedis.hget(byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.hsetnx(byte[], byte[], byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.hmset(byte[], java.util.Map<byte[], byte[]>)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.hincrBy(byte[], byte[], long)"], ["java.lang.Boolean", "redis.clients.jedis.BinaryJedis.hexists(byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.hdel(byte[], byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.hlen(byte[])"], ["java.util.Map<byte[], byte[]>", "redis.clients.jedis.BinaryJedis.hgetAll(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.rpush(byte[], byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.lpush(byte[], byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.llen(byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.ltrim(byte[], long, long)"], ["byte[]", "redis.clients.jedis.BinaryJedis.lindex(byte[], long)"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.lset(byte[], long, byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.lrem(byte[], long, byte[])"], ["byte[]", "redis.clients.jedis.BinaryJedis.lpop(byte[])"], ["byte[]", "redis.clients.jedis.BinaryJedis.rpop(byte[])"], ["byte[]", "redis.clients.jedis.BinaryJedis.rpoplpush(byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.sadd(byte[], byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.srem(byte[], byte[]...)"], ["byte[]", "redis.clients.jedis.BinaryJedis.spop(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.smove(byte[], byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.scard(byte[])"], ["java.lang.Boolean", "redis.clients.jedis.BinaryJedis.sismember(byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.sinterstore(byte[], byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.sunionstore(byte[], byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.sdiffstore(byte[], byte[]...)"], ["byte[]", "redis.clients.jedis.BinaryJedis.srandmember(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.zadd(byte[], double, byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.zadd(byte[], java.util.Map<java.lang.Double, byte[]>)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.zrem(byte[], byte[]...)"], ["java.lang.Double", "redis.clients.jedis.BinaryJedis.zincrby(byte[], double, byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.zrank(byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.zrevrank(byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.zcard(byte[])"], ["java.lang.Double", "redis.clients.jedis.BinaryJedis.zscore(byte[], byte[])"], ["redis.clients.jedis.Transaction", "redis.clients.jedis.BinaryJedis.multi()"], ["void", "redis.clients.jedis.BinaryJedis.connect()"], ["void", "redis.clients.jedis.BinaryJedis.disconnect()"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.watch(byte[]...)"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.unwatch()"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.sort(byte[], redis.clients.jedis.SortingParams, byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.sort(byte[], byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.auth(java.lang.String)"], ["redis.clients.jedis.Pipeline", "redis.clients.jedis.BinaryJedis.pipelined()"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.zcount(byte[], double, double)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.zcount(byte[], byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.zremrangeByRank(byte[], long, long)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.zremrangeByScore(byte[], double, double)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.zremrangeByScore(byte[], byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.zunionstore(byte[], byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.zunionstore(byte[], redis.clients.jedis.ZParams, byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.zinterstore(byte[], byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.zinterstore(byte[], redis.clients.jedis.ZParams, byte[]...)"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.save()"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.bgsave()"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.bgrewriteaof()"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.lastsave()"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.shutdown()"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.info()"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.info(java.lang.String)"], ["void", "redis.clients.jedis.BinaryJedis.monitor(redis.clients.jedis.JedisMonitor)"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.slaveof(java.lang.String, int)"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.slaveofNoOne()"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.configResetStat()"], ["byte[]", "redis.clients.jedis.BinaryJedis.configSet(byte[], byte[])"], ["boolean", "redis.clients.jedis.BinaryJedis.isConnected()"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.strlen(byte[])"], ["void", "redis.clients.jedis.BinaryJedis.sync()"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.lpushx(byte[], byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.persist(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.rpushx(byte[], byte[]...)"], ["byte[]", "redis.clients.jedis.BinaryJedis.echo(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.linsert(byte[], redis.clients.jedis.BinaryClient$LIST_POSITION, byte[], byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.debug(redis.clients.jedis.DebugParams)"], ["redis.clients.jedis.Client", "redis.clients.jedis.BinaryJedis.getClient()"], ["byte[]", "redis.clients.jedis.BinaryJedis.brpoplpush(byte[], byte[], int)"], ["java.lang.Boolean", "redis.clients.jedis.BinaryJedis.setbit(byte[], long, boolean)"], ["java.lang.Boolean", "redis.clients.jedis.BinaryJedis.setbit(byte[], long, byte[])"], ["java.lang.Boolean", "redis.clients.jedis.BinaryJedis.getbit(byte[], long)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.setrange(byte[], long, byte[])"], ["byte[]", "redis.clients.jedis.BinaryJedis.getrange(byte[], long, long)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.publish(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryJedis.subscribe(redis.clients.jedis.BinaryJedisPubSub, byte[]...)"], ["void", "redis.clients.jedis.BinaryJedis.psubscribe(redis.clients.jedis.BinaryJedisPubSub, byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.getDB()"], ["java.lang.Object", "redis.clients.jedis.BinaryJedis.eval(byte[], java.util.List<byte[]>, java.util.List<byte[]>)"], ["java.lang.Object", "redis.clients.jedis.BinaryJedis.eval(byte[], byte[], byte[]...)"], ["java.lang.Object", "redis.clients.jedis.BinaryJedis.eval(byte[], int, byte[]...)"], ["java.lang.Object", "redis.clients.jedis.BinaryJedis.eval(byte[])"], ["java.lang.Object", "redis.clients.jedis.BinaryJedis.evalsha(byte[])"], ["java.lang.Object", "redis.clients.jedis.BinaryJedis.evalsha(byte[], java.util.List<byte[]>, java.util.List<byte[]>)"], ["java.lang.Object", "redis.clients.jedis.BinaryJedis.evalsha(byte[], int, byte[]...)"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.scriptFlush()"], ["byte[]", "redis.clients.jedis.BinaryJedis.scriptLoad(byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.scriptKill()"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.slowlogReset()"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.slowlogLen()"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.objectRefcount(byte[])"], ["byte[]", "redis.clients.jedis.BinaryJedis.objectEncoding(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.objectIdletime(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.bitcount(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.bitcount(byte[], long, long)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.bitop(redis.clients.jedis.BitOP, byte[], byte[]...)"], ["byte[]", "redis.clients.jedis.BinaryJedis.dump(byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.restore(byte[], int, byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.pexpire(byte[], int)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.pexpireAt(byte[], long)"], ["java.lang.Long", "redis.clients.jedis.BinaryJedis.pttl(byte[])"], ["java.lang.Double", "redis.clients.jedis.BinaryJedis.incrByFloat(byte[], double)"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.psetex(byte[], int, byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.set(byte[], byte[], byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.set(byte[], byte[], byte[], byte[], int)"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.clientKill(byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.clientGetname()"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.clientList()"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.clientSetname(byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryJedis.migrate(byte[], int, byte[], int, int)"], ["java.lang.Double", "redis.clients.jedis.BinaryJedis.hincrByFloat(byte[], byte[], double)"], ["java.util.Collection", "redis.clients.jedis.BinaryJedis.hvals(byte[])"], ["java.lang.String", "redis.clients.jedis.BuilderFactory$10.toString()"], ["java.lang.Object", "redis.clients.jedis.BuilderFactory$10.build(java.lang.Object)"], ["redis.clients.jedis.Response<java.util.Map<java.lang.String, java.lang.String>>", "redis.clients.jedis.PipelineBase.hgetAll(java.lang.String)"], ["redis.clients.jedis.Response<java.util.Map<byte[], byte[]>>", "redis.clients.jedis.PipelineBase.hgetAll(byte[])"], ["redis.clients.jedis.ShardedJedis", "redis.clients.jedis.ShardedJedis(java.util.List<redis.clients.jedis.JedisShardInfo>)"], ["redis.clients.jedis.ShardedJedis", "redis.clients.jedis.ShardedJedis(java.util.List<redis.clients.jedis.JedisShardInfo>, redis.clients.util.Hashing)"], ["redis.clients.jedis.ShardedJedis", "redis.clients.jedis.ShardedJedis(java.util.List<redis.clients.jedis.JedisShardInfo>, java.util.regex.Pattern)"], ["redis.clients.jedis.ShardedJedis", "redis.clients.jedis.ShardedJedis(java.util.List<redis.clients.jedis.JedisShardInfo>, redis.clients.util.Hashing, java.util.regex.Pattern)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.set(java.lang.String, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.get(java.lang.String)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.echo(java.lang.String)"], ["java.lang.Boolean", "redis.clients.jedis.ShardedJedis.exists(java.lang.String)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.type(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.expire(java.lang.String, int)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.expireAt(java.lang.String, long)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.ttl(java.lang.String)"], ["java.lang.Boolean", "redis.clients.jedis.ShardedJedis.setbit(java.lang.String, long, boolean)"], ["java.lang.Boolean", "redis.clients.jedis.ShardedJedis.setbit(java.lang.String, long, java.lang.String)"], ["java.lang.Boolean", "redis.clients.jedis.ShardedJedis.getbit(java.lang.String, long)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.setrange(java.lang.String, long, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.getrange(java.lang.String, long, long)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.getSet(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.setnx(java.lang.String, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.setex(java.lang.String, int, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.decrBy(java.lang.String, long)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.decr(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.incrBy(java.lang.String, long)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.incr(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.append(java.lang.String, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.substr(java.lang.String, int, int)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.hset(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.hget(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.hsetnx(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.hmset(java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.hincrBy(java.lang.String, java.lang.String, long)"], ["java.lang.Boolean", "redis.clients.jedis.ShardedJedis.hexists(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.del(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.hdel(java.lang.String, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.hlen(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "redis.clients.jedis.ShardedJedis.hgetAll(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.rpush(java.lang.String, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.lpush(java.lang.String, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.lpushx(java.lang.String, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.strlen(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.move(java.lang.String, int)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.rpushx(java.lang.String, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.persist(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.llen(java.lang.String)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.ltrim(java.lang.String, long, long)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.lindex(java.lang.String, long)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.lset(java.lang.String, long, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.lrem(java.lang.String, long, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.lpop(java.lang.String)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.rpop(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.sadd(java.lang.String, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.srem(java.lang.String, java.lang.String...)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.spop(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.scard(java.lang.String)"], ["java.lang.Boolean", "redis.clients.jedis.ShardedJedis.sismember(java.lang.String, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.ShardedJedis.srandmember(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.zadd(java.lang.String, double, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.zadd(java.lang.String, java.util.Map<java.lang.Double, java.lang.String>)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.zrem(java.lang.String, java.lang.String...)"], ["java.lang.Double", "redis.clients.jedis.ShardedJedis.zincrby(java.lang.String, double, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.zrank(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.zrevrank(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.zcard(java.lang.String)"], ["java.lang.Double", "redis.clients.jedis.ShardedJedis.zscore(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.zcount(java.lang.String, double, double)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.zcount(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.zremrangeByRank(java.lang.String, long, long)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.zremrangeByScore(java.lang.String, double, double)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.zremrangeByScore(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.linsert(java.lang.String, redis.clients.jedis.BinaryClient$LIST_POSITION, java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.bitcount(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.ShardedJedis.bitcount(java.lang.String, long, long)"], ["java.lang.String", "redis.clients.jedis.BuilderFactory$12.toString()"], ["java.lang.Object", "redis.clients.jedis.BuilderFactory$12.build(java.lang.Object)"], ["redis.clients.jedis.ZParams", "redis.clients.jedis.ZParams()"], ["redis.clients.jedis.ZParams", "redis.clients.jedis.ZParams.weights(int...)"], ["redis.clients.jedis.ZParams", "redis.clients.jedis.ZParams.aggregate(redis.clients.jedis.ZParams$Aggregate)"], ["java.lang.String", "redis.clients.jedis.BuilderFactory$9.toString()"], ["java.lang.Object", "redis.clients.jedis.BuilderFactory$9.build(java.lang.Object)"], ["redis.clients.jedis.Transaction", "redis.clients.jedis.Transaction(redis.clients.jedis.Client)"], ["java.lang.String", "redis.clients.jedis.Transaction.discard()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.bitop(redis.clients.jedis.BitOP, java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.bitop(redis.clients.jedis.BitOP, byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.select(int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.ping()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.shutdown()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.dbSize()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.info()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.flushAll()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.flushDB()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.randomKeyBinary()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.randomKey()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.publish(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.publish(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.lastsave()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.save()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.configResetStat()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.brpoplpush(byte[], byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.brpoplpush(java.lang.String, java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.configSet(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.configGet(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.bgsave()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.bgrewriteaof()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zunionstore(byte[], redis.clients.jedis.ZParams, byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zunionstore(java.lang.String, redis.clients.jedis.ZParams, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zunionstore(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zunionstore(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zinterstore(byte[], redis.clients.jedis.ZParams, byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zinterstore(java.lang.String, redis.clients.jedis.ZParams, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zinterstore(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zinterstore(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.watch(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.watch(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sunionstore(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sunionstore(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sunion(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sunion(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sort(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sort(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sort(byte[], redis.clients.jedis.SortingParams, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sort(java.lang.String, redis.clients.jedis.SortingParams, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.smove(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.smove(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sinterstore(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sinterstore(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sinter(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sinter(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sdiffstore(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sdiffstore(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sdiff(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sdiff(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.rpoplpush(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.rpoplpush(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.renamenx(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.renamenx(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.rename(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.rename(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.msetnx(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.msetnx(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.mset(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.mset(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.mget(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.mget(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.keys(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.keys(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.del(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.del(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.blpop(int, byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.blpop(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.brpopMap(int, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.brpop(int, byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.brpop(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.blpopMap(int, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.blpop(int, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.blpop(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.brpop(int, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.brpop(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.evalsha(java.lang.String, int, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.evalsha(java.lang.String, java.util.List, java.util.List)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.evalsha(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.eval(java.lang.String, int, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.eval(java.lang.String, java.util.List, java.util.List)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.eval(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hincrByFloat(byte[], byte[], double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hincrByFloat(java.lang.String, java.lang.String, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.set(byte[], byte[], byte[], byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.set(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.set(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.set(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.psetex(byte[], int, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.psetex(java.lang.String, int, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.incrByFloat(byte[], double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.incrByFloat(java.lang.String, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.restore(byte[], int, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.restore(java.lang.String, int, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.pttl(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.pttl(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.pexpireAt(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.pexpireAt(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.pexpire(byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.pexpire(java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.objectIdletime(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.objectIdletime(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.objectEncoding(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.objectEncoding(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.objectRefcount(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.objectRefcount(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.migrate(byte[], int, byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.migrate(java.lang.String, int, java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.dump(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.dump(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.bitcount(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.bitcount(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.bitcount(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.bitcount(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zscore(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zscore(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrank(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrank(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeWithScores(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeWithScores(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrange(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrange(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zremrangeByScore(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zremrangeByScore(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zremrangeByScore(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zremrangeByScore(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zremrangeByRank(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zremrangeByRank(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrem(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrem(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrank(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrank(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeWithScores(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeWithScores(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScoreWithScores(byte[], byte[], byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScoreWithScores(byte[], double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScoreWithScores(java.lang.String, double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScoreWithScores(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScoreWithScores(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScoreWithScores(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScore(byte[], byte[], byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScore(byte[], double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScore(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScore(java.lang.String, double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScore(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScore(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScore(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrevrangeByScore(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScoreWithScores(byte[], byte[], byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScoreWithScores(byte[], double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScoreWithScores(java.lang.String, double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScoreWithScores(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScoreWithScores(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScoreWithScores(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScore(byte[], byte[], byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScore(byte[], double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScore(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScore(java.lang.String, double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScore(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScore(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScore(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrangeByScore(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrange(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zrange(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zincrby(byte[], double, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zincrby(java.lang.String, double, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zcount(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zcount(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zcount(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zcard(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zcard(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zadd(byte[], double, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zadd(java.lang.String, java.util.Map)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.zadd(java.lang.String, double, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.type(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.type(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.ttl(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.ttl(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.substr(byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.substr(java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.strlen(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.strlen(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.srem(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.srem(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.srandmember(byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.srandmember(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.srandmember(java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.srandmember(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.spop(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.spop(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sort(byte[], redis.clients.jedis.SortingParams)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sort(java.lang.String, redis.clients.jedis.SortingParams)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sort(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sort(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.smembers(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.smembers(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sismember(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sismember(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.setrange(byte[], long, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.setrange(java.lang.String, long, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.setnx(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.setnx(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.setex(byte[], int, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.setex(java.lang.String, int, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.setbit(byte[], long, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.setbit(java.lang.String, long, boolean)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.set(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.set(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.scard(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.scard(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sadd(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.sadd(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.rpushx(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.rpushx(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.rpush(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.rpush(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.rpop(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.rpop(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.persist(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.persist(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.move(byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.move(java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.ltrim(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.ltrim(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.lset(byte[], long, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.lset(java.lang.String, long, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.lrem(byte[], long, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.lrem(java.lang.String, long, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.lrange(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.lrange(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.lpushx(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.lpushx(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.lpush(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.lpush(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.lpop(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.lpop(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.llen(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.llen(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.linsert(byte[], redis.clients.jedis.BinaryClient$LIST_POSITION, byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.linsert(java.lang.String, redis.clients.jedis.BinaryClient$LIST_POSITION, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.lindex(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.lindex(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.incrBy(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.incrBy(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.incr(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.incr(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hvals(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hvals(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hsetnx(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hsetnx(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hset(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hset(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hmset(byte[], java.util.Map)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hmset(java.lang.String, java.util.Map)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hmget(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hmget(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hlen(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hlen(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hkeys(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hkeys(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hincrBy(byte[], byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hincrBy(java.lang.String, java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hgetAll(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hgetAll(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hget(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hget(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hexists(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hexists(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hdel(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.hdel(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.getrange(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.getSet(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.getSet(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.getrange(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.getbit(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.getbit(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.get(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.get(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.expireAt(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.expireAt(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.expire(byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.expire(java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.exists(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.exists(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.echo(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.echo(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.del(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.del(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.decrBy(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.decrBy(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.decr(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.decr(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.brpop(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.blpop(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.brpop(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.blpop(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.append(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Transaction.append(java.lang.String, java.lang.String)"], ["redis.clients.jedis.BitOP[]", "redis.clients.jedis.BitOP.values()"], ["redis.clients.jedis.BitOP", "redis.clients.jedis.BitOP.valueOf(java.lang.String)"], ["redis.clients.jedis.Protocol$Keyword[]", "redis.clients.jedis.Protocol$Keyword.values()"], ["redis.clients.jedis.Protocol$Keyword", "redis.clients.jedis.Protocol$Keyword.valueOf(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "redis.clients.jedis.BuilderFactory$7.build(java.lang.Object)"], ["java.lang.String", "redis.clients.jedis.BuilderFactory$7.toString()"], ["java.lang.Object", "redis.clients.jedis.BuilderFactory$7.build(java.lang.Object)"], ["redis.clients.jedis.JedisPubSub", "redis.clients.jedis.JedisPubSub()"], ["void", "redis.clients.jedis.JedisPubSub.unsubscribe()"], ["void", "redis.clients.jedis.JedisPubSub.unsubscribe(java.lang.String...)"], ["void", "redis.clients.jedis.JedisPubSub.subscribe(java.lang.String...)"], ["void", "redis.clients.jedis.JedisPubSub.psubscribe(java.lang.String...)"], ["void", "redis.clients.jedis.JedisPubSub.punsubscribe()"], ["void", "redis.clients.jedis.JedisPubSub.punsubscribe(java.lang.String...)"], ["boolean", "redis.clients.jedis.JedisPubSub.isSubscribed()"], ["void", "redis.clients.jedis.JedisPubSub.proceedWithPatterns(redis.clients.jedis.Client, java.lang.String...)"], ["void", "redis.clients.jedis.JedisPubSub.proceed(redis.clients.jedis.Client, java.lang.String...)"], ["int", "redis.clients.jedis.JedisPubSub.getSubscribedChannels()"], ["java.lang.String", "redis.clients.jedis.BuilderFactory$6.toString()"], ["java.lang.Object", "redis.clients.jedis.BuilderFactory$6.build(java.lang.Object)"], ["redis.clients.jedis.Protocol$Command[]", "redis.clients.jedis.Protocol$Command.values()"], ["redis.clients.jedis.Protocol$Command", "redis.clients.jedis.Protocol$Command.valueOf(java.lang.String)"], ["java.lang.String", "redis.clients.jedis.BuilderFactory$5.build(java.lang.Object)"], ["java.lang.String", "redis.clients.jedis.BuilderFactory$5.toString()"], ["java.lang.Object", "redis.clients.jedis.BuilderFactory$5.build(java.lang.Object)"], ["redis.clients.jedis.Builder", "redis.clients.jedis.Builder()"], ["java.lang.String", "redis.clients.jedis.BuilderFactory$14.toString()"], ["java.lang.Object", "redis.clients.jedis.BuilderFactory$14.build(java.lang.Object)"], ["void", "redis.clients.jedis.JedisSentinelPool$JedisPubSubAdapter.onMessage(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.JedisSentinelPool$JedisPubSubAdapter.onPMessage(java.lang.String, java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.JedisSentinelPool$JedisPubSubAdapter.onPSubscribe(java.lang.String, int)"], ["void", "redis.clients.jedis.JedisSentinelPool$JedisPubSubAdapter.onPUnsubscribe(java.lang.String, int)"], ["void", "redis.clients.jedis.JedisSentinelPool$JedisPubSubAdapter.onSubscribe(java.lang.String, int)"], ["void", "redis.clients.jedis.JedisSentinelPool$JedisPubSubAdapter.onUnsubscribe(java.lang.String, int)"], ["void", "redis.clients.jedis.JedisSentinelPool$MasterListener$1.onMessage(java.lang.String, java.lang.String)"], ["java.util.Map<byte[], byte[]>", "redis.clients.jedis.BuilderFactory$11.build(java.lang.Object)"], ["java.lang.String", "redis.clients.jedis.BuilderFactory$11.toString()"], ["java.lang.Object", "redis.clients.jedis.BuilderFactory$11.build(java.lang.Object)"], ["redis.clients.jedis.BinaryShardedJedis", "redis.clients.jedis.BinaryShardedJedis(java.util.List<redis.clients.jedis.JedisShardInfo>)"], ["redis.clients.jedis.BinaryShardedJedis", "redis.clients.jedis.BinaryShardedJedis(java.util.List<redis.clients.jedis.JedisShardInfo>, redis.clients.util.Hashing)"], ["redis.clients.jedis.BinaryShardedJedis", "redis.clients.jedis.BinaryShardedJedis(java.util.List<redis.clients.jedis.JedisShardInfo>, java.util.regex.Pattern)"], ["redis.clients.jedis.BinaryShardedJedis", "redis.clients.jedis.BinaryShardedJedis(java.util.List<redis.clients.jedis.JedisShardInfo>, redis.clients.util.Hashing, java.util.regex.Pattern)"], ["void", "redis.clients.jedis.BinaryShardedJedis.disconnect()"], ["java.lang.String", "redis.clients.jedis.BinaryShardedJedis.set(byte[], byte[])"], ["byte[]", "redis.clients.jedis.BinaryShardedJedis.get(byte[])"], ["java.lang.Boolean", "redis.clients.jedis.BinaryShardedJedis.exists(byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryShardedJedis.type(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.expire(byte[], int)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.expireAt(byte[], long)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.ttl(byte[])"], ["byte[]", "redis.clients.jedis.BinaryShardedJedis.getSet(byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.setnx(byte[], byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryShardedJedis.setex(byte[], int, byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.decrBy(byte[], long)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.decr(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.del(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.incrBy(byte[], long)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.incr(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.append(byte[], byte[])"], ["byte[]", "redis.clients.jedis.BinaryShardedJedis.substr(byte[], int, int)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.hset(byte[], byte[], byte[])"], ["byte[]", "redis.clients.jedis.BinaryShardedJedis.hget(byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.hsetnx(byte[], byte[], byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryShardedJedis.hmset(byte[], java.util.Map<byte[], byte[]>)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.hincrBy(byte[], byte[], long)"], ["java.lang.Boolean", "redis.clients.jedis.BinaryShardedJedis.hexists(byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.hdel(byte[], byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.hlen(byte[])"], ["java.util.Map<byte[], byte[]>", "redis.clients.jedis.BinaryShardedJedis.hgetAll(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.rpush(byte[], byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.lpush(byte[], byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.strlen(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.lpushx(byte[], byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.persist(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.rpushx(byte[], byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.llen(byte[])"], ["java.lang.String", "redis.clients.jedis.BinaryShardedJedis.ltrim(byte[], long, long)"], ["byte[]", "redis.clients.jedis.BinaryShardedJedis.lindex(byte[], long)"], ["java.lang.String", "redis.clients.jedis.BinaryShardedJedis.lset(byte[], long, byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.lrem(byte[], long, byte[])"], ["byte[]", "redis.clients.jedis.BinaryShardedJedis.lpop(byte[])"], ["byte[]", "redis.clients.jedis.BinaryShardedJedis.rpop(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.sadd(byte[], byte[]...)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.srem(byte[], byte[]...)"], ["byte[]", "redis.clients.jedis.BinaryShardedJedis.spop(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.scard(byte[])"], ["java.lang.Boolean", "redis.clients.jedis.BinaryShardedJedis.sismember(byte[], byte[])"], ["byte[]", "redis.clients.jedis.BinaryShardedJedis.srandmember(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.zadd(byte[], double, byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.zadd(byte[], java.util.Map<java.lang.Double, byte[]>)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.zrem(byte[], byte[]...)"], ["java.lang.Double", "redis.clients.jedis.BinaryShardedJedis.zincrby(byte[], double, byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.zrank(byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.zrevrank(byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.zcard(byte[])"], ["java.lang.Double", "redis.clients.jedis.BinaryShardedJedis.zscore(byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.zcount(byte[], double, double)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.zcount(byte[], byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.zremrangeByRank(byte[], long, long)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.zremrangeByScore(byte[], double, double)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.zremrangeByScore(byte[], byte[], byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.linsert(byte[], redis.clients.jedis.BinaryClient$LIST_POSITION, byte[], byte[])"], ["redis.clients.jedis.ShardedJedisPipeline", "redis.clients.jedis.BinaryShardedJedis.pipelined()"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.objectRefcount(byte[])"], ["byte[]", "redis.clients.jedis.BinaryShardedJedis.objectEncoding(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.objectIdletime(byte[])"], ["java.lang.Boolean", "redis.clients.jedis.BinaryShardedJedis.setbit(byte[], long, boolean)"], ["java.lang.Boolean", "redis.clients.jedis.BinaryShardedJedis.setbit(byte[], long, byte[])"], ["java.lang.Boolean", "redis.clients.jedis.BinaryShardedJedis.getbit(byte[], long)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.setrange(byte[], long, byte[])"], ["byte[]", "redis.clients.jedis.BinaryShardedJedis.getrange(byte[], long, long)"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.move(byte[], int)"], ["byte[]", "redis.clients.jedis.BinaryShardedJedis.echo(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.bitcount(byte[])"], ["java.lang.Long", "redis.clients.jedis.BinaryShardedJedis.bitcount(byte[], long, long)"], ["redis.clients.jedis.BinaryJedisPubSub", "redis.clients.jedis.BinaryJedisPubSub()"], ["void", "redis.clients.jedis.BinaryJedisPubSub.unsubscribe()"], ["void", "redis.clients.jedis.BinaryJedisPubSub.unsubscribe(byte[]...)"], ["void", "redis.clients.jedis.BinaryJedisPubSub.subscribe(byte[]...)"], ["void", "redis.clients.jedis.BinaryJedisPubSub.psubscribe(byte[]...)"], ["void", "redis.clients.jedis.BinaryJedisPubSub.punsubscribe()"], ["void", "redis.clients.jedis.BinaryJedisPubSub.punsubscribe(byte[]...)"], ["boolean", "redis.clients.jedis.BinaryJedisPubSub.isSubscribed()"], ["void", "redis.clients.jedis.BinaryJedisPubSub.proceedWithPatterns(redis.clients.jedis.Client, byte[]...)"], ["void", "redis.clients.jedis.BinaryJedisPubSub.proceed(redis.clients.jedis.Client, byte[]...)"], ["int", "redis.clients.jedis.BinaryJedisPubSub.getSubscribedChannels()"], ["void", "redis.clients.jedis.Protocol.sendCommand(redis.clients.util.RedisOutputStream, redis.clients.jedis.Protocol$Command, byte[]...)"], ["java.lang.Object", "redis.clients.jedis.Protocol.read(redis.clients.util.RedisInputStream)"], ["byte[]", "redis.clients.jedis.Protocol.toByteArray(boolean)"], ["byte[]", "redis.clients.jedis.Protocol.toByteArray(int)"], ["byte[]", "redis.clients.jedis.Protocol.toByteArray(long)"], ["byte[]", "redis.clients.jedis.Protocol.toByteArray(double)"], ["redis.clients.jedis.TransactionBlock", "redis.clients.jedis.TransactionBlock(redis.clients.jedis.Client)"], ["redis.clients.jedis.TransactionBlock", "redis.clients.jedis.TransactionBlock()"], ["void", "redis.clients.jedis.TransactionBlock.setClient(redis.clients.jedis.Client)"], ["java.net.Socket", "redis.clients.jedis.Connection.getSocket()"], ["int", "redis.clients.jedis.Connection.getTimeout()"], ["void", "redis.clients.jedis.Connection.setTimeout(int)"], ["void", "redis.clients.jedis.Connection.setTimeoutInfinite()"], ["void", "redis.clients.jedis.Connection.rollbackTimeout()"], ["redis.clients.jedis.Connection", "redis.clients.jedis.Connection(java.lang.String)"], ["redis.clients.jedis.Connection", "redis.clients.jedis.Connection(java.lang.String, int)"], ["java.lang.String", "redis.clients.jedis.Connection.getHost()"], ["void", "redis.clients.jedis.Connection.setHost(java.lang.String)"], ["int", "redis.clients.jedis.Connection.getPort()"], ["void", "redis.clients.jedis.Connection.setPort(int)"], ["redis.clients.jedis.Connection", "redis.clients.jedis.Connection()"], ["void", "redis.clients.jedis.Connection.connect()"], ["void", "redis.clients.jedis.Connection.disconnect()"], ["boolean", "redis.clients.jedis.Connection.isConnected()"], ["java.lang.String", "redis.clients.jedis.Connection.getBulkReply()"], ["byte[]", "redis.clients.jedis.Connection.getBinaryBulkReply()"], ["java.lang.Long", "redis.clients.jedis.Connection.getIntegerReply()"], ["java.lang.Object", "redis.clients.jedis.Connection.getOne()"], ["redis.clients.jedis.JedisMonitor", "redis.clients.jedis.JedisMonitor()"], ["void", "redis.clients.jedis.JedisMonitor.proceed(redis.clients.jedis.Client)"], ["redis.clients.jedis.exceptions.JedisException", "redis.clients.jedis.exceptions.JedisException(java.lang.String)"], ["redis.clients.jedis.exceptions.JedisException", "redis.clients.jedis.exceptions.JedisException(java.lang.Throwable)"], ["redis.clients.jedis.exceptions.JedisException", "redis.clients.jedis.exceptions.JedisException(java.lang.String, java.lang.Throwable)"], ["redis.clients.jedis.exceptions.JedisConnectionException", "redis.clients.jedis.exceptions.JedisConnectionException(java.lang.String)"], ["redis.clients.jedis.exceptions.JedisConnectionException", "redis.clients.jedis.exceptions.JedisConnectionException(java.lang.Throwable)"], ["redis.clients.jedis.exceptions.JedisConnectionException", "redis.clients.jedis.exceptions.JedisConnectionException(java.lang.String, java.lang.Throwable)"], ["redis.clients.jedis.exceptions.JedisDataException", "redis.clients.jedis.exceptions.JedisDataException(java.lang.String)"], ["redis.clients.jedis.exceptions.JedisDataException", "redis.clients.jedis.exceptions.JedisDataException(java.lang.Throwable)"], ["redis.clients.jedis.exceptions.JedisDataException", "redis.clients.jedis.exceptions.JedisDataException(java.lang.String, java.lang.Throwable)"], ["redis.clients.jedis.ZParams$Aggregate[]", "redis.clients.jedis.ZParams$Aggregate.values()"], ["redis.clients.jedis.ZParams$Aggregate", "redis.clients.jedis.ZParams$Aggregate.valueOf(java.lang.String)"], ["redis.clients.jedis.Pipeline", "redis.clients.jedis.Pipeline()"], ["void", "redis.clients.jedis.Pipeline.setClient(redis.clients.jedis.Client)"], ["void", "redis.clients.jedis.Pipeline.sync()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.bitop(redis.clients.jedis.BitOP, java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.bitop(redis.clients.jedis.BitOP, byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.select(int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.ping()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.shutdown()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.dbSize()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.info()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.flushAll()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.flushDB()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.randomKeyBinary()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.randomKey()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.publish(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.publish(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.lastsave()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.save()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.configResetStat()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.brpoplpush(byte[], byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.brpoplpush(java.lang.String, java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.configSet(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.configGet(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.bgsave()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.bgrewriteaof()"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zunionstore(byte[], redis.clients.jedis.ZParams, byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zunionstore(java.lang.String, redis.clients.jedis.ZParams, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zunionstore(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zunionstore(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zinterstore(byte[], redis.clients.jedis.ZParams, byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zinterstore(java.lang.String, redis.clients.jedis.ZParams, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zinterstore(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zinterstore(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.watch(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.watch(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sunionstore(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sunionstore(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sunion(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sunion(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sort(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sort(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sort(byte[], redis.clients.jedis.SortingParams, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sort(java.lang.String, redis.clients.jedis.SortingParams, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.smove(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.smove(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sinterstore(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sinterstore(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sinter(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sinter(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sdiffstore(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sdiffstore(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sdiff(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sdiff(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.rpoplpush(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.rpoplpush(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.renamenx(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.renamenx(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.rename(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.rename(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.msetnx(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.msetnx(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.mset(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.mset(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.mget(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.mget(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.keys(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.keys(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.del(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.del(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.blpop(int, byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.blpop(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.brpopMap(int, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.brpop(int, byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.brpop(byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.blpopMap(int, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.blpop(int, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.blpop(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.brpop(int, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.brpop(java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.evalsha(java.lang.String, int, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.evalsha(java.lang.String, java.util.List, java.util.List)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.evalsha(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.eval(java.lang.String, int, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.eval(java.lang.String, java.util.List, java.util.List)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.eval(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hincrByFloat(byte[], byte[], double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hincrByFloat(java.lang.String, java.lang.String, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.set(byte[], byte[], byte[], byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.set(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.set(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.set(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.psetex(byte[], int, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.psetex(java.lang.String, int, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.incrByFloat(byte[], double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.incrByFloat(java.lang.String, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.restore(byte[], int, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.restore(java.lang.String, int, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.pttl(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.pttl(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.pexpireAt(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.pexpireAt(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.pexpire(byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.pexpire(java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.objectIdletime(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.objectIdletime(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.objectEncoding(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.objectEncoding(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.objectRefcount(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.objectRefcount(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.migrate(byte[], int, byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.migrate(java.lang.String, int, java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.dump(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.dump(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.bitcount(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.bitcount(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.bitcount(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.bitcount(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zscore(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zscore(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrank(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrank(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeWithScores(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeWithScores(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrange(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrange(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zremrangeByScore(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zremrangeByScore(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zremrangeByScore(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zremrangeByScore(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zremrangeByRank(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zremrangeByRank(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrem(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrem(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrank(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrank(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeWithScores(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeWithScores(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScoreWithScores(byte[], byte[], byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScoreWithScores(byte[], double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScoreWithScores(java.lang.String, double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScoreWithScores(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScoreWithScores(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScoreWithScores(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScore(byte[], byte[], byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScore(byte[], double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScore(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScore(java.lang.String, double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScore(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScore(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScore(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrevrangeByScore(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScoreWithScores(byte[], byte[], byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScoreWithScores(byte[], double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScoreWithScores(java.lang.String, double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScoreWithScores(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScoreWithScores(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScoreWithScores(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScore(byte[], byte[], byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScore(byte[], double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScore(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScore(java.lang.String, double, double, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScore(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScore(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScore(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrangeByScore(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrange(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zrange(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zincrby(byte[], double, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zincrby(java.lang.String, double, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zcount(byte[], double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zcount(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zcount(java.lang.String, double, double)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zcard(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zcard(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zadd(byte[], double, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zadd(java.lang.String, java.util.Map)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.zadd(java.lang.String, double, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.type(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.type(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.ttl(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.ttl(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.substr(byte[], int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.substr(java.lang.String, int, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.strlen(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.strlen(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.srem(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.srem(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.srandmember(byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.srandmember(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.srandmember(java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.srandmember(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.spop(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.spop(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sort(byte[], redis.clients.jedis.SortingParams)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sort(java.lang.String, redis.clients.jedis.SortingParams)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sort(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sort(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.smembers(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.smembers(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sismember(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sismember(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.setrange(byte[], long, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.setrange(java.lang.String, long, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.setnx(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.setnx(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.setex(byte[], int, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.setex(java.lang.String, int, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.setbit(byte[], long, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.setbit(java.lang.String, long, boolean)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.set(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.set(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.scard(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.scard(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sadd(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.sadd(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.rpushx(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.rpushx(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.rpush(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.rpush(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.rpop(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.rpop(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.persist(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.persist(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.move(byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.move(java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.ltrim(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.ltrim(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.lset(byte[], long, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.lset(java.lang.String, long, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.lrem(byte[], long, byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.lrem(java.lang.String, long, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.lrange(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.lrange(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.lpushx(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.lpushx(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.lpush(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.lpush(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.lpop(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.lpop(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.llen(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.llen(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.linsert(byte[], redis.clients.jedis.BinaryClient$LIST_POSITION, byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.linsert(java.lang.String, redis.clients.jedis.BinaryClient$LIST_POSITION, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.lindex(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.lindex(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.incrBy(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.incrBy(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.incr(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.incr(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hvals(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hvals(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hsetnx(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hsetnx(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hset(byte[], byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hset(java.lang.String, java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hmset(byte[], java.util.Map)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hmset(java.lang.String, java.util.Map)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hmget(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hmget(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hlen(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hlen(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hkeys(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hkeys(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hincrBy(byte[], byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hincrBy(java.lang.String, java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hgetAll(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hgetAll(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hget(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hget(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hexists(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hexists(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hdel(byte[], byte[][])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.hdel(java.lang.String, java.lang.String[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.getrange(byte[], long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.getSet(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.getSet(java.lang.String, java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.getrange(java.lang.String, long, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.getbit(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.getbit(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.get(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.get(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.expireAt(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.expireAt(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.expire(byte[], int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.expire(java.lang.String, int)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.exists(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.exists(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.echo(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.echo(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.del(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.del(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.decrBy(byte[], long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.decrBy(java.lang.String, long)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.decr(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.decr(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.brpop(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.blpop(byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.brpop(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.blpop(java.lang.String)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.append(byte[], byte[])"], ["redis.clients.jedis.Response", "redis.clients.jedis.Pipeline.append(java.lang.String, java.lang.String)"], ["boolean", "redis.clients.jedis.BinaryClient.isInMulti()"], ["redis.clients.jedis.BinaryClient", "redis.clients.jedis.BinaryClient(java.lang.String)"], ["redis.clients.jedis.BinaryClient", "redis.clients.jedis.BinaryClient(java.lang.String, int)"], ["void", "redis.clients.jedis.BinaryClient.setPassword(java.lang.String)"], ["void", "redis.clients.jedis.BinaryClient.connect()"], ["void", "redis.clients.jedis.BinaryClient.ping()"], ["void", "redis.clients.jedis.BinaryClient.set(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.set(byte[], byte[], byte[], byte[], long)"], ["void", "redis.clients.jedis.BinaryClient.get(byte[])"], ["void", "redis.clients.jedis.BinaryClient.quit()"], ["void", "redis.clients.jedis.BinaryClient.exists(byte[])"], ["void", "redis.clients.jedis.BinaryClient.del(byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.type(byte[])"], ["void", "redis.clients.jedis.BinaryClient.flushDB()"], ["void", "redis.clients.jedis.BinaryClient.keys(byte[])"], ["void", "redis.clients.jedis.BinaryClient.randomKey()"], ["void", "redis.clients.jedis.BinaryClient.rename(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.renamenx(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.dbSize()"], ["void", "redis.clients.jedis.BinaryClient.expire(byte[], int)"], ["void", "redis.clients.jedis.BinaryClient.expireAt(byte[], long)"], ["void", "redis.clients.jedis.BinaryClient.ttl(byte[])"], ["void", "redis.clients.jedis.BinaryClient.select(int)"], ["void", "redis.clients.jedis.BinaryClient.move(byte[], int)"], ["void", "redis.clients.jedis.BinaryClient.flushAll()"], ["void", "redis.clients.jedis.BinaryClient.getSet(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.mget(byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.setnx(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.setex(byte[], int, byte[])"], ["void", "redis.clients.jedis.BinaryClient.mset(byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.msetnx(byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.decrBy(byte[], long)"], ["void", "redis.clients.jedis.BinaryClient.decr(byte[])"], ["void", "redis.clients.jedis.BinaryClient.incrBy(byte[], long)"], ["void", "redis.clients.jedis.BinaryClient.incr(byte[])"], ["void", "redis.clients.jedis.BinaryClient.append(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.substr(byte[], int, int)"], ["void", "redis.clients.jedis.BinaryClient.hset(byte[], byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.hget(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.hsetnx(byte[], byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.hmset(byte[], java.util.Map<byte[], byte[]>)"], ["void", "redis.clients.jedis.BinaryClient.hmget(byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.hincrBy(byte[], byte[], long)"], ["void", "redis.clients.jedis.BinaryClient.hexists(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.hdel(byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.hlen(byte[])"], ["void", "redis.clients.jedis.BinaryClient.hkeys(byte[])"], ["void", "redis.clients.jedis.BinaryClient.hvals(byte[])"], ["void", "redis.clients.jedis.BinaryClient.hgetAll(byte[])"], ["void", "redis.clients.jedis.BinaryClient.rpush(byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.lpush(byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.llen(byte[])"], ["void", "redis.clients.jedis.BinaryClient.lrange(byte[], long, long)"], ["void", "redis.clients.jedis.BinaryClient.ltrim(byte[], long, long)"], ["void", "redis.clients.jedis.BinaryClient.lindex(byte[], long)"], ["void", "redis.clients.jedis.BinaryClient.lset(byte[], long, byte[])"], ["void", "redis.clients.jedis.BinaryClient.lrem(byte[], long, byte[])"], ["void", "redis.clients.jedis.BinaryClient.lpop(byte[])"], ["void", "redis.clients.jedis.BinaryClient.rpop(byte[])"], ["void", "redis.clients.jedis.BinaryClient.rpoplpush(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.sadd(byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.smembers(byte[])"], ["void", "redis.clients.jedis.BinaryClient.srem(byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.spop(byte[])"], ["void", "redis.clients.jedis.BinaryClient.smove(byte[], byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.scard(byte[])"], ["void", "redis.clients.jedis.BinaryClient.sismember(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.sinter(byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.sinterstore(byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.sunion(byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.sunionstore(byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.sdiff(byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.sdiffstore(byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.srandmember(byte[])"], ["void", "redis.clients.jedis.BinaryClient.zadd(byte[], double, byte[])"], ["void", "redis.clients.jedis.BinaryClient.zaddBinary(byte[], java.util.Map<java.lang.Double, byte[]>)"], ["void", "redis.clients.jedis.BinaryClient.zrange(byte[], long, long)"], ["void", "redis.clients.jedis.BinaryClient.zrem(byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.zincrby(byte[], double, byte[])"], ["void", "redis.clients.jedis.BinaryClient.zrank(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.zrevrank(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.zrevrange(byte[], long, long)"], ["void", "redis.clients.jedis.BinaryClient.zrangeWithScores(byte[], long, long)"], ["void", "redis.clients.jedis.BinaryClient.zrevrangeWithScores(byte[], long, long)"], ["void", "redis.clients.jedis.BinaryClient.zcard(byte[])"], ["void", "redis.clients.jedis.BinaryClient.zscore(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.multi()"], ["void", "redis.clients.jedis.BinaryClient.discard()"], ["void", "redis.clients.jedis.BinaryClient.exec()"], ["void", "redis.clients.jedis.BinaryClient.watch(byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.unwatch()"], ["void", "redis.clients.jedis.BinaryClient.sort(byte[])"], ["void", "redis.clients.jedis.BinaryClient.sort(byte[], redis.clients.jedis.SortingParams)"], ["void", "redis.clients.jedis.BinaryClient.blpop(byte[][])"], ["void", "redis.clients.jedis.BinaryClient.blpop(int, byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.sort(byte[], redis.clients.jedis.SortingParams, byte[])"], ["void", "redis.clients.jedis.BinaryClient.sort(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.brpop(byte[][])"], ["void", "redis.clients.jedis.BinaryClient.brpop(int, byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.auth(java.lang.String)"], ["void", "redis.clients.jedis.BinaryClient.subscribe(byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.publish(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.unsubscribe()"], ["void", "redis.clients.jedis.BinaryClient.unsubscribe(byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.psubscribe(byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.punsubscribe()"], ["void", "redis.clients.jedis.BinaryClient.punsubscribe(byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.zcount(byte[], double, double)"], ["void", "redis.clients.jedis.BinaryClient.zcount(byte[], byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.zcount(byte[], java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.BinaryClient.zrangeByScore(byte[], double, double)"], ["void", "redis.clients.jedis.BinaryClient.zrangeByScore(byte[], byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.zrangeByScore(byte[], java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.BinaryClient.zrevrangeByScore(byte[], double, double)"], ["void", "redis.clients.jedis.BinaryClient.zrevrangeByScore(byte[], byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.zrevrangeByScore(byte[], java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.BinaryClient.zrangeByScore(byte[], double, double, int, int)"], ["void", "redis.clients.jedis.BinaryClient.zrangeByScore(byte[], java.lang.String, java.lang.String, int, int)"], ["void", "redis.clients.jedis.BinaryClient.zrevrangeByScore(byte[], double, double, int, int)"], ["void", "redis.clients.jedis.BinaryClient.zrevrangeByScore(byte[], java.lang.String, java.lang.String, int, int)"], ["void", "redis.clients.jedis.BinaryClient.zrangeByScoreWithScores(byte[], double, double)"], ["void", "redis.clients.jedis.BinaryClient.zrangeByScoreWithScores(byte[], java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.BinaryClient.zrevrangeByScoreWithScores(byte[], double, double)"], ["void", "redis.clients.jedis.BinaryClient.zrevrangeByScoreWithScores(byte[], java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.BinaryClient.zrangeByScoreWithScores(byte[], double, double, int, int)"], ["void", "redis.clients.jedis.BinaryClient.zrangeByScoreWithScores(byte[], java.lang.String, java.lang.String, int, int)"], ["void", "redis.clients.jedis.BinaryClient.zrevrangeByScoreWithScores(byte[], double, double, int, int)"], ["void", "redis.clients.jedis.BinaryClient.zrevrangeByScoreWithScores(byte[], java.lang.String, java.lang.String, int, int)"], ["void", "redis.clients.jedis.BinaryClient.zrangeByScore(byte[], byte[], byte[], int, int)"], ["void", "redis.clients.jedis.BinaryClient.zrevrangeByScore(byte[], byte[], byte[], int, int)"], ["void", "redis.clients.jedis.BinaryClient.zrangeByScoreWithScores(byte[], byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.zrevrangeByScoreWithScores(byte[], byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.zrangeByScoreWithScores(byte[], byte[], byte[], int, int)"], ["void", "redis.clients.jedis.BinaryClient.zrevrangeByScoreWithScores(byte[], byte[], byte[], int, int)"], ["void", "redis.clients.jedis.BinaryClient.zremrangeByRank(byte[], long, long)"], ["void", "redis.clients.jedis.BinaryClient.zremrangeByScore(byte[], byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.zremrangeByScore(byte[], java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.BinaryClient.zunionstore(byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.zunionstore(byte[], redis.clients.jedis.ZParams, byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.zinterstore(byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.zinterstore(byte[], redis.clients.jedis.ZParams, byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.save()"], ["void", "redis.clients.jedis.BinaryClient.bgsave()"], ["void", "redis.clients.jedis.BinaryClient.bgrewriteaof()"], ["void", "redis.clients.jedis.BinaryClient.lastsave()"], ["void", "redis.clients.jedis.BinaryClient.shutdown()"], ["void", "redis.clients.jedis.BinaryClient.info()"], ["void", "redis.clients.jedis.BinaryClient.info(java.lang.String)"], ["void", "redis.clients.jedis.BinaryClient.monitor()"], ["void", "redis.clients.jedis.BinaryClient.slaveof(java.lang.String, int)"], ["void", "redis.clients.jedis.BinaryClient.slaveofNoOne()"], ["void", "redis.clients.jedis.BinaryClient.configGet(byte[])"], ["void", "redis.clients.jedis.BinaryClient.configSet(byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.strlen(byte[])"], ["void", "redis.clients.jedis.BinaryClient.sync()"], ["void", "redis.clients.jedis.BinaryClient.lpushx(byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.persist(byte[])"], ["void", "redis.clients.jedis.BinaryClient.rpushx(byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.echo(byte[])"], ["void", "redis.clients.jedis.BinaryClient.linsert(byte[], redis.clients.jedis.BinaryClient$LIST_POSITION, byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.debug(redis.clients.jedis.DebugParams)"], ["void", "redis.clients.jedis.BinaryClient.brpoplpush(byte[], byte[], int)"], ["void", "redis.clients.jedis.BinaryClient.configResetStat()"], ["void", "redis.clients.jedis.BinaryClient.setbit(byte[], long, byte[])"], ["void", "redis.clients.jedis.BinaryClient.setbit(byte[], long, boolean)"], ["void", "redis.clients.jedis.BinaryClient.getbit(byte[], long)"], ["void", "redis.clients.jedis.BinaryClient.setrange(byte[], long, byte[])"], ["void", "redis.clients.jedis.BinaryClient.getrange(byte[], long, long)"], ["java.lang.Long", "redis.clients.jedis.BinaryClient.getDB()"], ["void", "redis.clients.jedis.BinaryClient.disconnect()"], ["void", "redis.clients.jedis.BinaryClient.eval(byte[], byte[], byte[][])"], ["void", "redis.clients.jedis.BinaryClient.eval(byte[], int, byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.evalsha(byte[], byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.evalsha(byte[], int, byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.scriptFlush()"], ["void", "redis.clients.jedis.BinaryClient.scriptExists(byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.scriptLoad(byte[])"], ["void", "redis.clients.jedis.BinaryClient.scriptKill()"], ["void", "redis.clients.jedis.BinaryClient.slowlogGet()"], ["void", "redis.clients.jedis.BinaryClient.slowlogGet(long)"], ["void", "redis.clients.jedis.BinaryClient.slowlogReset()"], ["void", "redis.clients.jedis.BinaryClient.slowlogLen()"], ["void", "redis.clients.jedis.BinaryClient.objectRefcount(byte[])"], ["void", "redis.clients.jedis.BinaryClient.objectIdletime(byte[])"], ["void", "redis.clients.jedis.BinaryClient.objectEncoding(byte[])"], ["void", "redis.clients.jedis.BinaryClient.bitcount(byte[])"], ["void", "redis.clients.jedis.BinaryClient.bitcount(byte[], long, long)"], ["void", "redis.clients.jedis.BinaryClient.bitop(redis.clients.jedis.BitOP, byte[], byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.sentinel(byte[]...)"], ["void", "redis.clients.jedis.BinaryClient.dump(byte[])"], ["void", "redis.clients.jedis.BinaryClient.restore(byte[], int, byte[])"], ["void", "redis.clients.jedis.BinaryClient.pexpire(byte[], int)"], ["void", "redis.clients.jedis.BinaryClient.pexpireAt(byte[], long)"], ["void", "redis.clients.jedis.BinaryClient.pttl(byte[])"], ["void", "redis.clients.jedis.BinaryClient.incrByFloat(byte[], double)"], ["void", "redis.clients.jedis.BinaryClient.psetex(byte[], int, byte[])"], ["void", "redis.clients.jedis.BinaryClient.set(byte[], byte[], byte[])"], ["void", "redis.clients.jedis.BinaryClient.set(byte[], byte[], byte[], byte[], int)"], ["void", "redis.clients.jedis.BinaryClient.srandmember(byte[], int)"], ["void", "redis.clients.jedis.BinaryClient.clientKill(byte[])"], ["void", "redis.clients.jedis.BinaryClient.clientGetname()"], ["void", "redis.clients.jedis.BinaryClient.clientList()"], ["void", "redis.clients.jedis.BinaryClient.clientSetname(byte[])"], ["void", "redis.clients.jedis.BinaryClient.time()"], ["void", "redis.clients.jedis.BinaryClient.migrate(byte[], int, byte[], int, int)"], ["void", "redis.clients.jedis.BinaryClient.hincrByFloat(byte[], byte[], double)"], ["java.lang.String", "redis.clients.jedis.BuilderFactory$8.toString()"], ["java.lang.Object", "redis.clients.jedis.BuilderFactory$8.build(java.lang.Object)"], ["redis.clients.jedis.Client", "redis.clients.jedis.Client(java.lang.String)"], ["redis.clients.jedis.Client", "redis.clients.jedis.Client(java.lang.String, int)"], ["void", "redis.clients.jedis.Client.set(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.set(java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)"], ["void", "redis.clients.jedis.Client.get(java.lang.String)"], ["void", "redis.clients.jedis.Client.exists(java.lang.String)"], ["void", "redis.clients.jedis.Client.del(java.lang.String...)"], ["void", "redis.clients.jedis.Client.type(java.lang.String)"], ["void", "redis.clients.jedis.Client.keys(java.lang.String)"], ["void", "redis.clients.jedis.Client.rename(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.renamenx(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.expire(java.lang.String, int)"], ["void", "redis.clients.jedis.Client.expireAt(java.lang.String, long)"], ["void", "redis.clients.jedis.Client.ttl(java.lang.String)"], ["void", "redis.clients.jedis.Client.move(java.lang.String, int)"], ["void", "redis.clients.jedis.Client.getSet(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.mget(java.lang.String...)"], ["void", "redis.clients.jedis.Client.setnx(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.setex(java.lang.String, int, java.lang.String)"], ["void", "redis.clients.jedis.Client.mset(java.lang.String...)"], ["void", "redis.clients.jedis.Client.msetnx(java.lang.String...)"], ["void", "redis.clients.jedis.Client.decrBy(java.lang.String, long)"], ["void", "redis.clients.jedis.Client.decr(java.lang.String)"], ["void", "redis.clients.jedis.Client.incrBy(java.lang.String, long)"], ["void", "redis.clients.jedis.Client.incr(java.lang.String)"], ["void", "redis.clients.jedis.Client.append(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.substr(java.lang.String, int, int)"], ["void", "redis.clients.jedis.Client.hset(java.lang.String, java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.hget(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.hsetnx(java.lang.String, java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.hmset(java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"], ["void", "redis.clients.jedis.Client.hmget(java.lang.String, java.lang.String...)"], ["void", "redis.clients.jedis.Client.hincrBy(java.lang.String, java.lang.String, long)"], ["void", "redis.clients.jedis.Client.hexists(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.hdel(java.lang.String, java.lang.String...)"], ["void", "redis.clients.jedis.Client.hlen(java.lang.String)"], ["void", "redis.clients.jedis.Client.hkeys(java.lang.String)"], ["void", "redis.clients.jedis.Client.hvals(java.lang.String)"], ["void", "redis.clients.jedis.Client.hgetAll(java.lang.String)"], ["void", "redis.clients.jedis.Client.rpush(java.lang.String, java.lang.String...)"], ["void", "redis.clients.jedis.Client.lpush(java.lang.String, java.lang.String...)"], ["void", "redis.clients.jedis.Client.llen(java.lang.String)"], ["void", "redis.clients.jedis.Client.lrange(java.lang.String, long, long)"], ["void", "redis.clients.jedis.Client.ltrim(java.lang.String, long, long)"], ["void", "redis.clients.jedis.Client.lindex(java.lang.String, long)"], ["void", "redis.clients.jedis.Client.lset(java.lang.String, long, java.lang.String)"], ["void", "redis.clients.jedis.Client.lrem(java.lang.String, long, java.lang.String)"], ["void", "redis.clients.jedis.Client.lpop(java.lang.String)"], ["void", "redis.clients.jedis.Client.rpop(java.lang.String)"], ["void", "redis.clients.jedis.Client.rpoplpush(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.sadd(java.lang.String, java.lang.String...)"], ["void", "redis.clients.jedis.Client.smembers(java.lang.String)"], ["void", "redis.clients.jedis.Client.srem(java.lang.String, java.lang.String...)"], ["void", "redis.clients.jedis.Client.spop(java.lang.String)"], ["void", "redis.clients.jedis.Client.smove(java.lang.String, java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.scard(java.lang.String)"], ["void", "redis.clients.jedis.Client.sismember(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.sinter(java.lang.String...)"], ["void", "redis.clients.jedis.Client.sinterstore(java.lang.String, java.lang.String...)"], ["void", "redis.clients.jedis.Client.sunion(java.lang.String...)"], ["void", "redis.clients.jedis.Client.sunionstore(java.lang.String, java.lang.String...)"], ["void", "redis.clients.jedis.Client.sdiff(java.lang.String...)"], ["void", "redis.clients.jedis.Client.sdiffstore(java.lang.String, java.lang.String...)"], ["void", "redis.clients.jedis.Client.srandmember(java.lang.String)"], ["void", "redis.clients.jedis.Client.zadd(java.lang.String, double, java.lang.String)"], ["void", "redis.clients.jedis.Client.zrange(java.lang.String, long, long)"], ["void", "redis.clients.jedis.Client.zrem(java.lang.String, java.lang.String...)"], ["void", "redis.clients.jedis.Client.zincrby(java.lang.String, double, java.lang.String)"], ["void", "redis.clients.jedis.Client.zrank(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.zrevrank(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.zrevrange(java.lang.String, long, long)"], ["void", "redis.clients.jedis.Client.zrangeWithScores(java.lang.String, long, long)"], ["void", "redis.clients.jedis.Client.zrevrangeWithScores(java.lang.String, long, long)"], ["void", "redis.clients.jedis.Client.zcard(java.lang.String)"], ["void", "redis.clients.jedis.Client.zscore(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.watch(java.lang.String...)"], ["void", "redis.clients.jedis.Client.sort(java.lang.String)"], ["void", "redis.clients.jedis.Client.sort(java.lang.String, redis.clients.jedis.SortingParams)"], ["void", "redis.clients.jedis.Client.blpop(java.lang.String[])"], ["void", "redis.clients.jedis.Client.blpop(int, java.lang.String...)"], ["void", "redis.clients.jedis.Client.sort(java.lang.String, redis.clients.jedis.SortingParams, java.lang.String)"], ["void", "redis.clients.jedis.Client.sort(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.brpop(java.lang.String[])"], ["void", "redis.clients.jedis.Client.brpop(int, java.lang.String...)"], ["void", "redis.clients.jedis.Client.zcount(java.lang.String, double, double)"], ["void", "redis.clients.jedis.Client.zcount(java.lang.String, java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.zrangeByScore(java.lang.String, double, double)"], ["void", "redis.clients.jedis.Client.zrangeByScore(java.lang.String, java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.zrangeByScore(java.lang.String, double, double, int, int)"], ["void", "redis.clients.jedis.Client.zrangeByScoreWithScores(java.lang.String, double, double)"], ["void", "redis.clients.jedis.Client.zrangeByScoreWithScores(java.lang.String, double, double, int, int)"], ["void", "redis.clients.jedis.Client.zrevrangeByScore(java.lang.String, double, double)"], ["void", "redis.clients.jedis.Client.zrangeByScore(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["void", "redis.clients.jedis.Client.zrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.zrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["void", "redis.clients.jedis.Client.zrevrangeByScore(java.lang.String, java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.zrevrangeByScore(java.lang.String, double, double, int, int)"], ["void", "redis.clients.jedis.Client.zrevrangeByScore(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["void", "redis.clients.jedis.Client.zrevrangeByScoreWithScores(java.lang.String, double, double)"], ["void", "redis.clients.jedis.Client.zrevrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.zrevrangeByScoreWithScores(java.lang.String, double, double, int, int)"], ["void", "redis.clients.jedis.Client.zrevrangeByScoreWithScores(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["void", "redis.clients.jedis.Client.zremrangeByRank(java.lang.String, long, long)"], ["void", "redis.clients.jedis.Client.zremrangeByScore(java.lang.String, double, double)"], ["void", "redis.clients.jedis.Client.zremrangeByScore(java.lang.String, java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.zunionstore(java.lang.String, java.lang.String...)"], ["void", "redis.clients.jedis.Client.zunionstore(java.lang.String, redis.clients.jedis.ZParams, java.lang.String...)"], ["void", "redis.clients.jedis.Client.zinterstore(java.lang.String, java.lang.String...)"], ["void", "redis.clients.jedis.Client.zinterstore(java.lang.String, redis.clients.jedis.ZParams, java.lang.String...)"], ["void", "redis.clients.jedis.Client.strlen(java.lang.String)"], ["void", "redis.clients.jedis.Client.lpushx(java.lang.String, java.lang.String...)"], ["void", "redis.clients.jedis.Client.persist(java.lang.String)"], ["void", "redis.clients.jedis.Client.rpushx(java.lang.String, java.lang.String...)"], ["void", "redis.clients.jedis.Client.echo(java.lang.String)"], ["void", "redis.clients.jedis.Client.linsert(java.lang.String, redis.clients.jedis.BinaryClient$LIST_POSITION, java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.brpoplpush(java.lang.String, java.lang.String, int)"], ["void", "redis.clients.jedis.Client.setbit(java.lang.String, long, boolean)"], ["void", "redis.clients.jedis.Client.setbit(java.lang.String, long, java.lang.String)"], ["void", "redis.clients.jedis.Client.getbit(java.lang.String, long)"], ["void", "redis.clients.jedis.Client.setrange(java.lang.String, long, java.lang.String)"], ["void", "redis.clients.jedis.Client.getrange(java.lang.String, long, long)"], ["void", "redis.clients.jedis.Client.publish(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.unsubscribe(java.lang.String...)"], ["void", "redis.clients.jedis.Client.psubscribe(java.lang.String...)"], ["void", "redis.clients.jedis.Client.punsubscribe(java.lang.String...)"], ["void", "redis.clients.jedis.Client.subscribe(java.lang.String...)"], ["void", "redis.clients.jedis.Client.configSet(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.configGet(java.lang.String)"], ["void", "redis.clients.jedis.Client.eval(java.lang.String, int, java.lang.String...)"], ["void", "redis.clients.jedis.Client.evalsha(java.lang.String, int, java.lang.String...)"], ["void", "redis.clients.jedis.Client.scriptExists(java.lang.String...)"], ["void", "redis.clients.jedis.Client.scriptLoad(java.lang.String)"], ["void", "redis.clients.jedis.Client.zadd(java.lang.String, java.util.Map<java.lang.Double, java.lang.String>)"], ["void", "redis.clients.jedis.Client.objectRefcount(java.lang.String)"], ["void", "redis.clients.jedis.Client.objectIdletime(java.lang.String)"], ["void", "redis.clients.jedis.Client.objectEncoding(java.lang.String)"], ["void", "redis.clients.jedis.Client.bitcount(java.lang.String)"], ["void", "redis.clients.jedis.Client.bitcount(java.lang.String, long, long)"], ["void", "redis.clients.jedis.Client.bitop(redis.clients.jedis.BitOP, java.lang.String, java.lang.String...)"], ["void", "redis.clients.jedis.Client.sentinel(java.lang.String...)"], ["void", "redis.clients.jedis.Client.sentinel(java.lang.String, java.lang.String, int)"], ["void", "redis.clients.jedis.Client.dump(java.lang.String)"], ["void", "redis.clients.jedis.Client.restore(java.lang.String, int, byte[])"], ["void", "redis.clients.jedis.Client.pexpire(java.lang.String, int)"], ["void", "redis.clients.jedis.Client.pexpireAt(java.lang.String, long)"], ["void", "redis.clients.jedis.Client.pttl(java.lang.String)"], ["void", "redis.clients.jedis.Client.incrByFloat(java.lang.String, double)"], ["void", "redis.clients.jedis.Client.psetex(java.lang.String, int, java.lang.String)"], ["void", "redis.clients.jedis.Client.set(java.lang.String, java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Client.set(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int)"], ["void", "redis.clients.jedis.Client.srandmember(java.lang.String, int)"], ["void", "redis.clients.jedis.Client.clientKill(java.lang.String)"], ["void", "redis.clients.jedis.Client.clientSetname(java.lang.String)"], ["void", "redis.clients.jedis.Client.migrate(java.lang.String, int, java.lang.String, int, int)"], ["void", "redis.clients.jedis.Client.hincrByFloat(java.lang.String, java.lang.String, double)"], ["redis.clients.jedis.JedisSentinelPool", "redis.clients.jedis.JedisSentinelPool(java.lang.String, java.util.Set<java.lang.String>, org.apache.commons.pool.impl.GenericObjectPool$Config)"], ["redis.clients.jedis.JedisSentinelPool", "redis.clients.jedis.JedisSentinelPool(java.lang.String, java.util.Set<java.lang.String>)"], ["redis.clients.jedis.JedisSentinelPool", "redis.clients.jedis.JedisSentinelPool(java.lang.String, java.util.Set<java.lang.String>, java.lang.String)"], ["redis.clients.jedis.JedisSentinelPool", "redis.clients.jedis.JedisSentinelPool(java.lang.String, java.util.Set<java.lang.String>, org.apache.commons.pool.impl.GenericObjectPool$Config, int, java.lang.String)"], ["redis.clients.jedis.JedisSentinelPool", "redis.clients.jedis.JedisSentinelPool(java.lang.String, java.util.Set<java.lang.String>, org.apache.commons.pool.impl.GenericObjectPool$Config, int)"], ["redis.clients.jedis.JedisSentinelPool", "redis.clients.jedis.JedisSentinelPool(java.lang.String, java.util.Set<java.lang.String>, org.apache.commons.pool.impl.GenericObjectPool$Config, java.lang.String)"], ["redis.clients.jedis.JedisSentinelPool", "redis.clients.jedis.JedisSentinelPool(java.lang.String, java.util.Set<java.lang.String>, org.apache.commons.pool.impl.GenericObjectPool$Config, int, java.lang.String, int)"], ["void", "redis.clients.jedis.JedisSentinelPool.returnBrokenResource(redis.clients.jedis.BinaryJedis)"], ["void", "redis.clients.jedis.JedisSentinelPool.returnResource(redis.clients.jedis.BinaryJedis)"], ["void", "redis.clients.jedis.JedisSentinelPool.destroy()"], ["redis.clients.jedis.JedisSentinelPool$HostAndPort", "redis.clients.jedis.JedisSentinelPool.getCurrentHostMaster()"], ["java.lang.Boolean", "redis.clients.jedis.BuilderFactory$2.build(java.lang.Object)"], ["java.lang.String", "redis.clients.jedis.BuilderFactory$2.toString()"], ["java.lang.Object", "redis.clients.jedis.BuilderFactory$2.build(java.lang.Object)"], ["redis.clients.jedis.Response", "redis.clients.jedis.Response(redis.clients.jedis.Builder<T>)"], ["void", "redis.clients.jedis.Response.set(java.lang.Object)"], ["T", "redis.clients.jedis.Response.get()"], ["java.lang.String", "redis.clients.jedis.Response.toString()"], ["redis.clients.jedis.JedisSentinelPool$MasterListener", "redis.clients.jedis.JedisSentinelPool$MasterListener(redis.clients.jedis.JedisSentinelPool, java.lang.String, java.lang.String, int)"], ["redis.clients.jedis.JedisSentinelPool$MasterListener", "redis.clients.jedis.JedisSentinelPool$MasterListener(redis.clients.jedis.JedisSentinelPool, java.lang.String, java.lang.String, int, long)"], ["void", "redis.clients.jedis.JedisSentinelPool$MasterListener.run()"], ["void", "redis.clients.jedis.JedisSentinelPool$MasterListener.shutdown()"], ["redis.clients.jedis.ShardedJedisPool", "redis.clients.jedis.ShardedJedisPool(org.apache.commons.pool.impl.GenericObjectPool$Config, java.util.List<redis.clients.jedis.JedisShardInfo>)"], ["redis.clients.jedis.ShardedJedisPool", "redis.clients.jedis.ShardedJedisPool(org.apache.commons.pool.impl.GenericObjectPool$Config, java.util.List<redis.clients.jedis.JedisShardInfo>, redis.clients.util.Hashing)"], ["redis.clients.jedis.ShardedJedisPool", "redis.clients.jedis.ShardedJedisPool(org.apache.commons.pool.impl.GenericObjectPool$Config, java.util.List<redis.clients.jedis.JedisShardInfo>, java.util.regex.Pattern)"], ["redis.clients.jedis.ShardedJedisPool", "redis.clients.jedis.ShardedJedisPool(org.apache.commons.pool.impl.GenericObjectPool$Config, java.util.List<redis.clients.jedis.JedisShardInfo>, redis.clients.util.Hashing, java.util.regex.Pattern)"], ["byte[]", "redis.clients.jedis.BuilderFactory$3.build(java.lang.Object)"], ["java.lang.String", "redis.clients.jedis.BuilderFactory$3.toString()"], ["java.lang.Object", "redis.clients.jedis.BuilderFactory$3.build(java.lang.Object)"], ["redis.clients.jedis.ShardedJedisPool$ShardedJedisFactory", "redis.clients.jedis.ShardedJedisPool$ShardedJedisFactory(java.util.List<redis.clients.jedis.JedisShardInfo>, redis.clients.util.Hashing, java.util.regex.Pattern)"], ["java.lang.Object", "redis.clients.jedis.ShardedJedisPool$ShardedJedisFactory.makeObject()"], ["void", "redis.clients.jedis.ShardedJedisPool$ShardedJedisFactory.destroyObject(java.lang.Object)"], ["boolean", "redis.clients.jedis.ShardedJedisPool$ShardedJedisFactory.validateObject(java.lang.Object)"], ["redis.clients.jedis.JedisPoolConfig", "redis.clients.jedis.JedisPoolConfig()"], ["int", "redis.clients.jedis.JedisPoolConfig.getMaxIdle()"], ["void", "redis.clients.jedis.JedisPoolConfig.setMaxIdle(int)"], ["int", "redis.clients.jedis.JedisPoolConfig.getMinIdle()"], ["void", "redis.clients.jedis.JedisPoolConfig.setMinIdle(int)"], ["int", "redis.clients.jedis.JedisPoolConfig.getMaxActive()"], ["void", "redis.clients.jedis.JedisPoolConfig.setMaxActive(int)"], ["long", "redis.clients.jedis.JedisPoolConfig.getMaxWait()"], ["void", "redis.clients.jedis.JedisPoolConfig.setMaxWait(long)"], ["byte", "redis.clients.jedis.JedisPoolConfig.getWhenExhaustedAction()"], ["void", "redis.clients.jedis.JedisPoolConfig.setWhenExhaustedAction(byte)"], ["boolean", "redis.clients.jedis.JedisPoolConfig.isTestOnBorrow()"], ["void", "redis.clients.jedis.JedisPoolConfig.setTestOnBorrow(boolean)"], ["boolean", "redis.clients.jedis.JedisPoolConfig.isTestOnReturn()"], ["void", "redis.clients.jedis.JedisPoolConfig.setTestOnReturn(boolean)"], ["boolean", "redis.clients.jedis.JedisPoolConfig.isTestWhileIdle()"], ["void", "redis.clients.jedis.JedisPoolConfig.setTestWhileIdle(boolean)"], ["long", "redis.clients.jedis.JedisPoolConfig.getTimeBetweenEvictionRunsMillis()"], ["void", "redis.clients.jedis.JedisPoolConfig.setTimeBetweenEvictionRunsMillis(long)"], ["int", "redis.clients.jedis.JedisPoolConfig.getNumTestsPerEvictionRun()"], ["void", "redis.clients.jedis.JedisPoolConfig.setNumTestsPerEvictionRun(int)"], ["long", "redis.clients.jedis.JedisPoolConfig.getMinEvictableIdleTimeMillis()"], ["void", "redis.clients.jedis.JedisPoolConfig.setMinEvictableIdleTimeMillis(long)"], ["long", "redis.clients.jedis.JedisPoolConfig.getSoftMinEvictableIdleTimeMillis()"], ["void", "redis.clients.jedis.JedisPoolConfig.setSoftMinEvictableIdleTimeMillis(long)"], ["java.lang.String[]", "redis.clients.jedis.DebugParams.getCommand()"], ["redis.clients.jedis.DebugParams", "redis.clients.jedis.DebugParams.SEGFAULT()"], ["redis.clients.jedis.DebugParams", "redis.clients.jedis.DebugParams.OBJECT(java.lang.String)"], ["redis.clients.jedis.DebugParams", "redis.clients.jedis.DebugParams.RELOAD()"], ["redis.clients.jedis.Response<java.util.Map<java.lang.String, java.lang.String>>", "redis.clients.jedis.MultiKeyPipelineBase.blpopMap(int, java.lang.String...)"], ["redis.clients.jedis.Response<java.util.Map<java.lang.String, java.lang.String>>", "redis.clients.jedis.MultiKeyPipelineBase.brpopMap(int, java.lang.String...)"], ["java.lang.String", "redis.clients.jedis.BuilderFactory$13.toString()"], ["java.lang.Object", "redis.clients.jedis.BuilderFactory$13.build(java.lang.Object)"], ["redis.clients.jedis.JedisPool", "redis.clients.jedis.JedisPool(org.apache.commons.pool.impl.GenericObjectPool$Config, java.lang.String)"], ["redis.clients.jedis.JedisPool", "redis.clients.jedis.JedisPool(java.lang.String, int)"], ["redis.clients.jedis.JedisPool", "redis.clients.jedis.JedisPool(java.lang.String)"], ["redis.clients.jedis.JedisPool", "redis.clients.jedis.JedisPool(java.net.URI)"], ["redis.clients.jedis.JedisPool", "redis.clients.jedis.JedisPool(org.apache.commons.pool.impl.GenericObjectPool$Config, java.lang.String, int, int, java.lang.String)"], ["redis.clients.jedis.JedisPool", "redis.clients.jedis.JedisPool(org.apache.commons.pool.impl.GenericObjectPool$Config, java.lang.String, int)"], ["redis.clients.jedis.JedisPool", "redis.clients.jedis.JedisPool(org.apache.commons.pool.impl.GenericObjectPool$Config, java.lang.String, int, int)"], ["redis.clients.jedis.JedisPool", "redis.clients.jedis.JedisPool(org.apache.commons.pool.impl.GenericObjectPool$Config, java.lang.String, int, int, java.lang.String, int)"], ["void", "redis.clients.jedis.JedisPool.returnBrokenResource(redis.clients.jedis.BinaryJedis)"], ["void", "redis.clients.jedis.JedisPool.returnResource(redis.clients.jedis.BinaryJedis)"], ["boolean", "redis.clients.jedis.JedisSentinelPool$HostAndPort.equals(java.lang.Object)"], ["java.lang.String", "redis.clients.jedis.JedisSentinelPool$HostAndPort.toString()"], ["java.lang.String", "redis.clients.jedis.JedisShardInfo.toString()"], ["java.lang.String", "redis.clients.jedis.JedisShardInfo.getHost()"], ["int", "redis.clients.jedis.JedisShardInfo.getPort()"], ["redis.clients.jedis.JedisShardInfo", "redis.clients.jedis.JedisShardInfo(java.lang.String)"], ["redis.clients.jedis.JedisShardInfo", "redis.clients.jedis.JedisShardInfo(java.lang.String, java.lang.String)"], ["redis.clients.jedis.JedisShardInfo", "redis.clients.jedis.JedisShardInfo(java.lang.String, int)"], ["redis.clients.jedis.JedisShardInfo", "redis.clients.jedis.JedisShardInfo(java.lang.String, int, java.lang.String)"], ["redis.clients.jedis.JedisShardInfo", "redis.clients.jedis.JedisShardInfo(java.lang.String, int, int)"], ["redis.clients.jedis.JedisShardInfo", "redis.clients.jedis.JedisShardInfo(java.lang.String, int, int, java.lang.String)"], ["redis.clients.jedis.JedisShardInfo", "redis.clients.jedis.JedisShardInfo(java.lang.String, int, int, int)"], ["redis.clients.jedis.JedisShardInfo", "redis.clients.jedis.JedisShardInfo(java.net.URI)"], ["java.lang.String", "redis.clients.jedis.JedisShardInfo.getPassword()"], ["void", "redis.clients.jedis.JedisShardInfo.setPassword(java.lang.String)"], ["int", "redis.clients.jedis.JedisShardInfo.getTimeout()"], ["void", "redis.clients.jedis.JedisShardInfo.setTimeout(int)"], ["java.lang.String", "redis.clients.jedis.JedisShardInfo.getName()"], ["redis.clients.jedis.Jedis", "redis.clients.jedis.JedisShardInfo.createResource()"], ["java.lang.Object", "redis.clients.jedis.JedisShardInfo.createResource()"], ["redis.clients.jedis.SortingParams", "redis.clients.jedis.SortingParams()"], ["redis.clients.jedis.SortingParams", "redis.clients.jedis.SortingParams.by(java.lang.String)"], ["redis.clients.jedis.SortingParams", "redis.clients.jedis.SortingParams.by(byte[])"], ["redis.clients.jedis.SortingParams", "redis.clients.jedis.SortingParams.nosort()"], ["redis.clients.jedis.SortingParams", "redis.clients.jedis.SortingParams.desc()"], ["redis.clients.jedis.SortingParams", "redis.clients.jedis.SortingParams.asc()"], ["redis.clients.jedis.SortingParams", "redis.clients.jedis.SortingParams.limit(int, int)"], ["redis.clients.jedis.SortingParams", "redis.clients.jedis.SortingParams.alpha()"], ["redis.clients.jedis.SortingParams", "redis.clients.jedis.SortingParams.get(java.lang.String...)"], ["redis.clients.jedis.SortingParams", "redis.clients.jedis.SortingParams.get(byte[]...)"], ["redis.clients.jedis.Jedis", "redis.clients.jedis.Jedis(java.lang.String)"], ["redis.clients.jedis.Jedis", "redis.clients.jedis.Jedis(java.lang.String, int)"], ["redis.clients.jedis.Jedis", "redis.clients.jedis.Jedis(java.lang.String, int, int)"], ["redis.clients.jedis.Jedis", "redis.clients.jedis.Jedis(redis.clients.jedis.JedisShardInfo)"], ["redis.clients.jedis.Jedis", "redis.clients.jedis.Jedis(java.net.URI)"], ["java.lang.String", "redis.clients.jedis.Jedis.set(java.lang.String, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.set(java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)"], ["java.lang.String", "redis.clients.jedis.Jedis.get(java.lang.String)"], ["java.lang.Boolean", "redis.clients.jedis.Jedis.exists(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.del(java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.del(java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.type(java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.randomKey()"], ["java.lang.String", "redis.clients.jedis.Jedis.rename(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.renamenx(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.expire(java.lang.String, int)"], ["java.lang.Long", "redis.clients.jedis.Jedis.expireAt(java.lang.String, long)"], ["java.lang.Long", "redis.clients.jedis.Jedis.ttl(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.move(java.lang.String, int)"], ["java.lang.String", "redis.clients.jedis.Jedis.getSet(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.setnx(java.lang.String, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.setex(java.lang.String, int, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.mset(java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.msetnx(java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.decrBy(java.lang.String, long)"], ["java.lang.Long", "redis.clients.jedis.Jedis.decr(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.incrBy(java.lang.String, long)"], ["java.lang.Long", "redis.clients.jedis.Jedis.incr(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.append(java.lang.String, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.substr(java.lang.String, int, int)"], ["java.lang.Long", "redis.clients.jedis.Jedis.hset(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.hget(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.hsetnx(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.hmset(java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"], ["java.lang.Long", "redis.clients.jedis.Jedis.hincrBy(java.lang.String, java.lang.String, long)"], ["java.lang.Boolean", "redis.clients.jedis.Jedis.hexists(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.hdel(java.lang.String, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.hlen(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "redis.clients.jedis.Jedis.hgetAll(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.rpush(java.lang.String, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.lpush(java.lang.String, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.llen(java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.ltrim(java.lang.String, long, long)"], ["java.lang.String", "redis.clients.jedis.Jedis.lindex(java.lang.String, long)"], ["java.lang.String", "redis.clients.jedis.Jedis.lset(java.lang.String, long, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.lrem(java.lang.String, long, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.lpop(java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.rpop(java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.rpoplpush(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.sadd(java.lang.String, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.srem(java.lang.String, java.lang.String...)"], ["java.lang.String", "redis.clients.jedis.Jedis.spop(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.smove(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.scard(java.lang.String)"], ["java.lang.Boolean", "redis.clients.jedis.Jedis.sismember(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.sinterstore(java.lang.String, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.sunionstore(java.lang.String, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.sdiffstore(java.lang.String, java.lang.String...)"], ["java.lang.String", "redis.clients.jedis.Jedis.srandmember(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.zadd(java.lang.String, double, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.zadd(java.lang.String, java.util.Map<java.lang.Double, java.lang.String>)"], ["java.lang.Long", "redis.clients.jedis.Jedis.zrem(java.lang.String, java.lang.String...)"], ["java.lang.Double", "redis.clients.jedis.Jedis.zincrby(java.lang.String, double, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.zrank(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.zrevrank(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.zcard(java.lang.String)"], ["java.lang.Double", "redis.clients.jedis.Jedis.zscore(java.lang.String, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.watch(java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.sort(java.lang.String, redis.clients.jedis.SortingParams, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.sort(java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.zcount(java.lang.String, double, double)"], ["java.lang.Long", "redis.clients.jedis.Jedis.zcount(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.zremrangeByRank(java.lang.String, long, long)"], ["java.lang.Long", "redis.clients.jedis.Jedis.zremrangeByScore(java.lang.String, double, double)"], ["java.lang.Long", "redis.clients.jedis.Jedis.zremrangeByScore(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.zunionstore(java.lang.String, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.zunionstore(java.lang.String, redis.clients.jedis.ZParams, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.zinterstore(java.lang.String, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.zinterstore(java.lang.String, redis.clients.jedis.ZParams, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.strlen(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.lpushx(java.lang.String, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.persist(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.rpushx(java.lang.String, java.lang.String...)"], ["java.lang.String", "redis.clients.jedis.Jedis.echo(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.linsert(java.lang.String, redis.clients.jedis.BinaryClient$LIST_POSITION, java.lang.String, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.brpoplpush(java.lang.String, java.lang.String, int)"], ["java.lang.Boolean", "redis.clients.jedis.Jedis.setbit(java.lang.String, long, boolean)"], ["java.lang.Boolean", "redis.clients.jedis.Jedis.setbit(java.lang.String, long, java.lang.String)"], ["java.lang.Boolean", "redis.clients.jedis.Jedis.getbit(java.lang.String, long)"], ["java.lang.Long", "redis.clients.jedis.Jedis.setrange(java.lang.String, long, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.getrange(java.lang.String, long, long)"], ["java.lang.String", "redis.clients.jedis.Jedis.configSet(java.lang.String, java.lang.String)"], ["java.lang.Object", "redis.clients.jedis.Jedis.eval(java.lang.String, int, java.lang.String...)"], ["void", "redis.clients.jedis.Jedis.subscribe(redis.clients.jedis.JedisPubSub, java.lang.String...)"], ["java.lang.Long", "redis.clients.jedis.Jedis.publish(java.lang.String, java.lang.String)"], ["void", "redis.clients.jedis.Jedis.psubscribe(redis.clients.jedis.JedisPubSub, java.lang.String...)"], ["java.lang.Object", "redis.clients.jedis.Jedis.eval(java.lang.String, java.util.List<java.lang.String>, java.util.List<java.lang.String>)"], ["java.lang.Object", "redis.clients.jedis.Jedis.eval(java.lang.String)"], ["java.lang.Object", "redis.clients.jedis.Jedis.evalsha(java.lang.String)"], ["java.lang.Object", "redis.clients.jedis.Jedis.evalsha(java.lang.String, java.util.List<java.lang.String>, java.util.List<java.lang.String>)"], ["java.lang.Object", "redis.clients.jedis.Jedis.evalsha(java.lang.String, int, java.lang.String...)"], ["java.lang.Boolean", "redis.clients.jedis.Jedis.scriptExists(java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.scriptLoad(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.objectRefcount(java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.objectEncoding(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.objectIdletime(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.bitcount(java.lang.String)"], ["java.lang.Long", "redis.clients.jedis.Jedis.bitcount(java.lang.String, long, long)"], ["java.lang.Long", "redis.clients.jedis.Jedis.bitop(redis.clients.jedis.BitOP, java.lang.String, java.lang.String...)"], ["java.util.List<java.util.Map<java.lang.String, java.lang.String>>", "redis.clients.jedis.Jedis.sentinelMasters()"], ["java.lang.Long", "redis.clients.jedis.Jedis.sentinelReset(java.lang.String)"], ["java.util.List<java.util.Map<java.lang.String, java.lang.String>>", "redis.clients.jedis.Jedis.sentinelSlaves(java.lang.String)"], ["java.util.List<? extends java.lang.Object>", "redis.clients.jedis.Jedis.sentinelIsMasterDownByAddr(java.lang.String, int)"], ["byte[]", "redis.clients.jedis.Jedis.dump(java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.restore(java.lang.String, int, byte[])"], ["java.lang.Long", "redis.clients.jedis.Jedis.pexpire(java.lang.String, int)"], ["java.lang.Long", "redis.clients.jedis.Jedis.pexpireAt(java.lang.String, long)"], ["java.lang.Long", "redis.clients.jedis.Jedis.pttl(java.lang.String)"], ["java.lang.Double", "redis.clients.jedis.Jedis.incrByFloat(java.lang.String, double)"], ["java.lang.String", "redis.clients.jedis.Jedis.psetex(java.lang.String, int, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.set(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.set(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int)"], ["java.lang.String", "redis.clients.jedis.Jedis.clientKill(java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.clientSetname(java.lang.String)"], ["java.lang.String", "redis.clients.jedis.Jedis.migrate(java.lang.String, int, java.lang.String, int, int)"], ["java.lang.Double", "redis.clients.jedis.Jedis.hincrByFloat(java.lang.String, java.lang.String, double)"], ["redis.clients.jedis.BinaryClient$LIST_POSITION[]", "redis.clients.jedis.BinaryClient$LIST_POSITION.values()"], ["redis.clients.jedis.BinaryClient$LIST_POSITION", "redis.clients.jedis.BinaryClient$LIST_POSITION.valueOf(java.lang.String)"], ["java.lang.Double", "redis.clients.jedis.BuilderFactory$1.build(java.lang.Object)"], ["java.lang.String", "redis.clients.jedis.BuilderFactory$1.toString()"], ["java.lang.Object", "redis.clients.jedis.BuilderFactory$1.build(java.lang.Object)"], ["redis.clients.jedis.ShardedJedisPipeline$FutureResult", "redis.clients.jedis.ShardedJedisPipeline$FutureResult(redis.clients.jedis.Client)"], ["java.lang.Object", "redis.clients.jedis.ShardedJedisPipeline$FutureResult.get()"], ["redis.clients.jedis.BuilderFactory", "redis.clients.jedis.BuilderFactory()"], ["void", "redis.clients.jedis.Pipeline$MultiResponseBuilder.addResponse(redis.clients.jedis.Response<?>)"], ["java.lang.Object", "redis.clients.jedis.Pipeline$MultiResponseBuilder.build(java.lang.Object)"], ["redis.clients.jedis.PipelineBlock", "redis.clients.jedis.PipelineBlock()"], ["java.lang.Long", "redis.clients.jedis.BuilderFactory$4.build(java.lang.Object)"], ["java.lang.String", "redis.clients.jedis.BuilderFactory$4.toString()"], ["java.lang.Object", "redis.clients.jedis.BuilderFactory$4.build(java.lang.Object)"], ["int", "redis.clients.jedis.Tuple.hashCode()"], ["boolean", "redis.clients.jedis.Tuple.equals(java.lang.Object)"], ["int", "redis.clients.jedis.Tuple.compareTo(redis.clients.jedis.Tuple)"], ["redis.clients.jedis.Tuple", "redis.clients.jedis.Tuple(java.lang.String, java.lang.Double)"], ["redis.clients.jedis.Tuple", "redis.clients.jedis.Tuple(byte[], java.lang.Double)"], ["java.lang.String", "redis.clients.jedis.Tuple.getElement()"], ["byte[]", "redis.clients.jedis.Tuple.getBinaryElement()"], ["double", "redis.clients.jedis.Tuple.getScore()"], ["java.lang.String", "redis.clients.jedis.Tuple.toString()"], ["int", "redis.clients.jedis.Tuple.compareTo(java.lang.Object)"], ["redis.clients.jedis.Queable", "redis.clients.jedis.Queable()"]]}